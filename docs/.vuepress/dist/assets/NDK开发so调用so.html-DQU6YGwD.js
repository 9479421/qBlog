import{_ as n,o as s,c as a,e as t}from"./app-koVjN3rn.js";const p={},o=t(`<h1 id="ndk开发so动态调用so" tabindex="-1"><a class="header-anchor" href="#ndk开发so动态调用so"><span>NDK开发so动态调用so</span></a></h1><p>创建一个新的cpp，并且配置so绑定此cpp，这便是要被调用的so</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240304142825887.png" alt="image-20240304142825887"></p><p>在MainActivity.java中声明public native String stringFromOtherSo(String path)，并在native-lib.cpp中实现该方法。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span>
JNIEXPORT jstring JNICALL
<span class="token function">Java_vip_wqby_souseso_MainActivity_stringFromOtherSo</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span>
                                                     jstring path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cPath <span class="token operator">=</span> env<span class="token operator">-&gt;</span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> nullptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>soinfo <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>cPath<span class="token punctuation">,</span>RTLD_NOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>ref<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span>std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">dlsym</span><span class="token punctuation">(</span>soinfo<span class="token punctuation">,</span><span class="token string">&quot;getStr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dlclose</span><span class="token punctuation">(</span>soinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法读取了路径为path的so文件，并且执行了so下的getStr()方法。</p><p>接下来我们要去编写被调用的so文件，也就是libshabi.so，即beused.cpp</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> std<span class="token operator">::</span>string <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;这里是beused.cpp&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明了Java层所调用的so方法，又编写了被so调用的so的方法。接下来就是对java层进行so方法调用了。</p><p>在NDK开发中，想要动态调用so文件，首先要拿到so文件所在的路径。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token class-name">Context</span> ctx<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PackageManager</span> pm <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PackageInfo</span><span class="token punctuation">&gt;</span></span> pkgList <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">getInstalledPackages</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkgList <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pkgList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">PackageInfo</span> pi <span class="token operator">:</span> pkgList<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/data/app&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pi<span class="token punctuation">.</span>packageName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;vip.wqby.myapplication&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> pi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后将so路径进行传递拼接，调用stringFromOtherSo(String path)</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240304150947407.png" alt="image-20240304150947407"></p><p>运行后发现毫无效果，我们经过调试输出会发现dlopen得到的返回值是nullptr，然后我们输出path路径，并去手机对应路径寻找。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240304151234287.png" alt="image-20240304151234287"></p><p>发现对应的lib路径下根本没有so文件。这里是个坑，说明APP直接从APK内部读取了对应的so文件，并没有将so文件独立输出。</p><p>用rar软件打开apk包，对比了老包后发现，新包中用到的lib下<code>libcocos2djs.so</code>压缩算法为Store(存储模式，无压缩)。后面在网上找了一些资料，发现在gradle版本比较高的时候，<code>android:extractNativeLibs</code>的默认值发生了改变。</p><ul><li><code>minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0</code>情况下，打包时 <code>android:extractNativeLibs=true</code>；</li><li><code>minSdkVersion &gt;= 23 并且 Android Gradle plugin &gt;= 3.6.0</code>情况下，打包时<code>android:extractNativeLibs=false</code>；</li></ul><p>所以如果是目标SDK版本低于23的时候，该代码是可以执行成功的，而SDK大于等于23的时候，我们就要手动配置一下AndroidManifest.xml中的application，将android:extractNativeLibs=&quot;true&quot;添加进去即可。</p><p>再次运行APP，发现beused.cpp中call的返回值被MainActivity赋值成功给了TextView</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240304151646769.png" alt="image-20240304151646769"></p>`,21),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","NDK开发so调用so.html.vue"]]),k=JSON.parse('{"path":"/blog/NDK%E5%BC%80%E5%8F%91so%E8%B0%83%E7%94%A8so.html","title":"NDK开发so动态调用so","lang":"en-US","frontmatter":{"title":"NDK开发so动态调用so","date":"2024-03-04T00:00:00.000Z","category":["History"],"tag":["Android","C++"]},"headers":[],"git":{"updatedTime":1710776868000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"blog/NDK开发so调用so.md","excerpt":"\\n<p>创建一个新的cpp，并且配置so绑定此cpp，这便是要被调用的so</p>\\n<p><img src=\\"https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240304142825887.png\\" alt=\\"image-20240304142825887\\"></p>\\n<p>在MainActivity.java中声明public native String stringFromOtherSo(String path)，并在native-lib.cpp中实现该方法。</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">extern</span> <span class=\\"token string\\">\\"C\\"</span>\\nJNIEXPORT jstring JNICALL\\n<span class=\\"token function\\">Java_vip_wqby_souseso_MainActivity_stringFromOtherSo</span><span class=\\"token punctuation\\">(</span>JNIEnv <span class=\\"token operator\\">*</span>env<span class=\\"token punctuation\\">,</span> jobject thiz<span class=\\"token punctuation\\">,</span>\\n                                                     jstring path<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> cPath <span class=\\"token operator\\">=</span> env<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">GetStringUTFChars</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> nullptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>soinfo <span class=\\"token operator\\">=</span> <span class=\\"token function\\">dlopen</span><span class=\\"token punctuation\\">(</span>cPath<span class=\\"token punctuation\\">,</span>RTLD_NOW<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token operator\\">::</span><span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>ref<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=</span> reinterpret_cast<span class=\\"token operator\\">&lt;</span>std<span class=\\"token operator\\">::</span><span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">dlsym</span><span class=\\"token punctuation\\">(</span>soinfo<span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"getStr\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">dlclose</span><span class=\\"token punctuation\\">(</span>soinfo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> env<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">NewStringUTF</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">c_str</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,k as data};
