import{_ as n,o as s,c as a,e as t}from"./app-C2hHG5A5.js";const p={},e=t(`<h1 id="网游喊话加密call分析" tabindex="-1"><a class="header-anchor" href="#网游喊话加密call分析"><span>网游喊话加密Call分析</span></a></h1><blockquote><p>思路整理</p></blockquote><p>网游喊话的原理就是向服务器发送了数据，网游与服务器通信数据都是使用tcp协议，而windows中发送tcp数据的API函数有send，sendto，WSASend，所以对此三个函数进行下断点。</p><p>结果在WSASend函数处断了下来，说明该游戏使用的是WSASend来封装的发送数据函数。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212092957837.png" alt="image-20240212092957837"></p><p>通过观察堆栈变化可以猜出是线程发包，说明有一个线程负责从某个地址循环读取数据，当有数据的时候就会自动采取发包。而游戏主线程则只需要在执行操作的时候把数据写入至某个地址即可。而我们此时断下的位置就是线程内部，我们需要对封包数据进行追踪到静态地址，再对地址进行硬件写入断点，就可以追踪到线程外的操作地址了。</p><h2 id="封包追踪" tabindex="-1"><a class="header-anchor" href="#封包追踪"><span>封包追踪</span></a></h2><p>观察该WSASend函数的堆栈，可知第二个参数是发送封包的包地址pBuffers，数据窗口中跟随pBuffers，可以大致看到如下内容</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212093311469.png" alt="image-20240212093311469"></p><p>可以推测出第一个字节16是该封包的长度，推测pBuffers+4是包数据地址。故[pBuffers]是包长，[pBuffers+4]是包数据。</p><p>接下来我们要对该pBuffers进行跟踪，找到线程内发包获取pBuffers的基地址。随后对其下硬件写入断点，即可找到线程外对pBuffers基地址赋值的语句，从而跳出循环。然后就可以向上找到喊话call了。</p><p>我们返回到调用WSASend上层，寻求倒数第二个压栈的push，定位到pBuffers来源。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212161613045.png" alt="image-20240212161613045"></p><p>接下来只需要对eax进行向上追溯，就可以找到包地址来源了。</p><p>首先eax为esp+0x28，所以只需要追溯esp即可，可以看到包长来源是eax。继续向上追溯。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212165126247.png" alt="image-20240212165126247"></p><p>可以看到包数据地址的来源是ecx，同理继续追溯ecx，ecx==edx+esi，调试可知edx恒为0，即ecx == esi，继续追溯esi，esi为[ebx+0x4]，ebx为[edx+0x2888]，综上，包数据地址==[[edi+0x2888]+0x4]</p><p>那么，即有其他代码向edi+0x2888写入数据之时，也就会触发线程内的发包函数。</p><p>我们尝试对edi+0x2888下硬件写入断点</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212171146893.png" alt="image-20240212171146893"></p><p>发现代码仍然在线程内，并且在刚刚代码的上方，没关系，我们继续追溯edi的来源eax，直到函数头的时候，得到[edi+2888]== [[[edi+0x2880]]+0x8] ，测试得知edi+0x2880的值是不变的，故继续对[edi+0x2880]下硬件写入断点（此时edx==[edi+0x2880]为固定值）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212215611858.png" alt="image-20240212215611858"></p><p>此时断到的位置往上堆栈回溯会发现与WSASend的上层堆栈就不一样了，至此为止说明我们已经跳出了线程，找到了线程外对线程内发包地址进行赋值的代码。</p><p>至此，包数据地址的表达式为[[[[edi+0x2880]]+0x8]+0x4]，并且[edi+0x2880]是固定值</p><p>对[eax]赋值ebp，也就是对前面的[edi+0x2880]赋值ebp，故表达式可以换成[[ebp+0x8]+0x4]</p><h2 id="加密追踪" tabindex="-1"><a class="header-anchor" href="#加密追踪"><span>加密追踪</span></a></h2><p>可以揣测此时[[ebp+0x8]+0x4]就是加密后的封包数据，我们跳到上层CALL下断继续分析参数。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240216020431985.png" alt="image-20240216020431985"></p><p>追踪[ESI+4]</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240216020450258.png" alt="image-20240216020450258"></p><p>发现可以看到了封包的明文喊话内容11111111111的字节形式，而第一个字节21便是包长度，于是我们可以猜测加密明文封包内容的代码就在这个CALL中，封包内容明文的表达式便是[ESI+4]我们进入CALL中继续分析。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240217121734101.png" alt=""></p><p>前面五个判断都直接被跳过了，所以应该是判断一些封包内容合法之类的无用操作，可以不用管。</p><p>那么封包加密操作就在下面的三个CALL中了。</p><p>通过观察[esi+4]的值在执行call前后是否产生变化，找到加密CALL。</p><p>在调用加密CALL之前，通过调试可以猜测出eax是类似于加密秘钥的一个参数，我们要先追溯出eax的来源。</p><p>这里不做过多赘述，最后可以得到eax==[[[[[00f84ba4]]+4]+0xC+8]]+0x54</p><h2 id="调用加密call" tabindex="-1"><a class="header-anchor" href="#调用加密call"><span>调用加密call</span></a></h2><p>首先观察call内容，发现除了esp以外，没有用到任何一个寄存器的值。所以如果只是单纯调用该加密call，只需要一个正确的esp值即可。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240217131642975.png" alt="image-20240217131642975"></p><p>编写测试加密代码</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240217170720453.png" alt="image-20240217170720453"></p><p>复制一份执行加密call时ebp和ebx的值到01111111里，然后注入代码，测试出加密成功</p><h2 id="编写代码发送封包" tabindex="-1"><a class="header-anchor" href="#编写代码发送封包"><span>编写代码发送封包</span></a></h2><p>我们尝试手写一个MFC的dll，直接将dll注入至游戏内部，通过调用汇编代码实现加密功能，再调用windows Api的WSASend实现模拟封包发送。</p><p>先编写一个可视化的窗口</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240217174249635.png" alt="image-20240217174249635"></p><p>接着编写封包发送，首先我们要逆向一下WSASend的第一个参数socket的来源</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240218210422616.png" alt="image-20240218210422616"></p><p>追踪ecx，不断往上层去返回</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240218211214918.png" alt="image-20240218211214918"></p><p>最后可以得到socket的值是GetWindowLongW()的返回值加上0x38地址的值，而GetWindowLongW的第一个参数是根据类名Lapis Network Class得到的窗口句柄，第二个参数为固定值GWL_USERDATA。</p><p>故综上可以编写出如下代码</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240218211447461.png" alt="image-20240218211447461"></p><p>将该程序DLL注入到游戏即可实现模拟发送喊话封包了</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240221205530581.png" alt="image-20240221205530581"></p><h2 id="纯汇编实现加密" tabindex="-1"><a class="header-anchor" href="#纯汇编实现加密"><span>纯汇编实现加密</span></a></h2><blockquote><p>这样的话我们虽然实现了功能，但是加密部分仍然是调用了游戏的CALL，我们并没有实现完全依靠自己的代码模拟实现，所以要继续深究</p></blockquote><p>将加密CALL的汇编代码抠出来，做成如下函数</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token keyword">void</span> 加密<span class="token function">CALL</span><span class="token punctuation">(</span>DWORD 秘钥<span class="token punctuation">,</span>DWORD 加密长度<span class="token punctuation">,</span>DWORD 加密地址<span class="token punctuation">,</span>DWORD 加密地址<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	__asm
	<span class="token punctuation">{</span>
		push    ebp
		push    ebx
		push    esi
		push    edi
		mov     edi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">]</span>
		mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">]</span>
		mov     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x1C</span><span class="token punctuation">]</span>
		mov     ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span>
		xor eax<span class="token punctuation">,</span> eax
		xor ebx<span class="token punctuation">,</span> ebx
		cmp     edx<span class="token punctuation">,</span> <span class="token number">0</span>
		je      Label1
		mov     al<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi<span class="token punctuation">]</span>
		mov     bl<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>
		add     edi<span class="token punctuation">,</span> <span class="token number">8</span>
		lea     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi <span class="token operator">+</span> edx<span class="token punctuation">]</span>
		sub     ebp<span class="token punctuation">,</span> esi
		mov     dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
		inc     al
		cmp     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>
		je      Label2
		mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
		and edx<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFC</span>
		je      Label3
		lea     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi <span class="token operator">+</span> edx <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span>
		mov     dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x1C</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
		mov     dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ebp


		Label4 <span class="token operator">:</span>
		add     bl<span class="token punctuation">,</span> cl
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
			add     edx<span class="token punctuation">,</span> ecx
			inc     al
			and edx<span class="token punctuation">,</span> <span class="token number">0x0FF</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			add     bl<span class="token punctuation">,</span> cl
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
			add     edx<span class="token punctuation">,</span> ecx
			inc     al
			and edx<span class="token punctuation">,</span> <span class="token number">0x0FF</span>
			ror     ebp<span class="token punctuation">,</span> <span class="token number">8</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			or ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			add     bl<span class="token punctuation">,</span> cl
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
			add     edx<span class="token punctuation">,</span> ecx
			inc     al
			and edx<span class="token punctuation">,</span> <span class="token number">0x0FF</span>
			ror     ebp<span class="token punctuation">,</span> <span class="token number">8</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			or ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			add     bl<span class="token punctuation">,</span> cl
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
			add     edx<span class="token punctuation">,</span> ecx
			inc     al
			and edx<span class="token punctuation">,</span> <span class="token number">0x0FF</span>
			ror     ebp<span class="token punctuation">,</span> <span class="token number">8</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span>
			or ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			ror     ebp<span class="token punctuation">,</span> <span class="token number">8</span>
			xor ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi<span class="token punctuation">]</span>
			cmp     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x1C</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>ecx <span class="token operator">+</span> esi<span class="token punctuation">]</span><span class="token punctuation">,</span> ebp
			lea     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			jb      Label4
			cmp     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">]</span>
			je      Label5
			mov     ebp<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span>


			Label3<span class="token operator">:</span>
		add     bl<span class="token punctuation">,</span> cl
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecx
			mov     dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edx
			add     edx<span class="token punctuation">,</span> ecx
			inc     al
			and edx<span class="token punctuation">,</span> <span class="token number">0x0FF</span>
			mov     edx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			xor dl<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>esi<span class="token punctuation">]</span>
			lea     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
			mov     ecx<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>
			cmp     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">]</span>
			mov     byte ptr<span class="token punctuation">[</span>ebp <span class="token operator">+</span> esi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dl
			jb      Label3
			jmp     Label5


			Label2 <span class="token operator">:</span>

		movzx   ecx<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax<span class="token punctuation">]</span>

			Label6 <span class="token operator">:</span>
			add     bl<span class="token punctuation">,</span> cl
			movzx   edx<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx<span class="token punctuation">]</span>
			mov     byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> ebx<span class="token punctuation">]</span><span class="token punctuation">,</span> cl
			mov     byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax<span class="token punctuation">]</span><span class="token punctuation">,</span> dl
			add     dl<span class="token punctuation">,</span> cl
			movzx   edx<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> edx<span class="token punctuation">]</span>
			add     al<span class="token punctuation">,</span> <span class="token number">1</span>
			xor dl<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>esi<span class="token punctuation">]</span>
			lea     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
			movzx   ecx<span class="token punctuation">,</span> byte ptr<span class="token punctuation">[</span>edi <span class="token operator">+</span> eax<span class="token punctuation">]</span>
			cmp     esi<span class="token punctuation">,</span> dword ptr<span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">]</span>
			mov     byte ptr<span class="token punctuation">[</span>ebp <span class="token operator">+</span> esi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dl
			jb      Label6
			Label5 <span class="token operator">:</span>
		dec     al
			mov     byte ptr<span class="token punctuation">[</span>edi <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bl
			mov     byte ptr<span class="token punctuation">[</span>edi <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> al

			Label1 <span class="token operator">:</span>

		pop     edi
			pop     esi
			pop     ebx
			pop     ebp
			retn

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>byte a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x6C</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
DWORD 包长 <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>
DWORD 包地址 <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>a<span class="token punctuation">;</span>
DWORD 加密地址 <span class="token operator">=</span> 包地址 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
DWORD 加密长度 <span class="token operator">=</span> 包长 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>

DWORD 秘钥 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
__asm <span class="token punctuation">{</span>
	mov eax<span class="token punctuation">,</span> <span class="token number">0x00f84ba4</span>
	mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
	mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
	mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">]</span>
	mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax <span class="token operator">+</span> <span class="token number">0xc</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">]</span>
	mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
	lea eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>eax <span class="token operator">+</span> <span class="token number">0x54</span><span class="token punctuation">]</span>
	mov 秘钥<span class="token punctuation">,</span> eax
<span class="token punctuation">}</span>

加密<span class="token function">CALL</span><span class="token punctuation">(</span>秘钥<span class="token punctuation">,</span> 加密长度<span class="token punctuation">,</span> 加密地址<span class="token punctuation">,</span> 加密地址<span class="token punctuation">)</span><span class="token punctuation">;</span>
HWND 窗口句柄 <span class="token operator">=</span> <span class="token function">FindWindowA</span><span class="token punctuation">(</span><span class="token string">&quot;Lapis Network Class&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
DWORD A <span class="token operator">=</span> <span class="token function">GetWindowLongW</span><span class="token punctuation">(</span>窗口句柄<span class="token punctuation">,</span> GWL_USERDATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
DWORD S <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>A <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">send</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>包地址<span class="token punctuation">,</span> 包长<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此就可以实现完全脱离游戏本身代码实现模拟封包的加密与发送了。</p><h2 id="编写简易抓包工具" tabindex="-1"><a class="header-anchor" href="#编写简易抓包工具"><span>编写简易抓包工具</span></a></h2><p>除了喊话封包以外，我们后面肯定还要模拟其他功能的封包实现。所以我们要对明文封包进行HOOK实现自动抓取。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">outputMsg</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pszFormat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
	<span class="token keyword">char</span> szbufFormat<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> szbufFormat_Game<span class="token punctuation">[</span><span class="token number">0x1100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	va_list argList<span class="token punctuation">;</span>
	<span class="token function">va_start</span><span class="token punctuation">(</span>argList<span class="token punctuation">,</span> pszFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">vsprintf_s</span><span class="token punctuation">(</span>szbufFormat<span class="token punctuation">,</span> pszFormat<span class="token punctuation">,</span> argList<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcat_s</span><span class="token punctuation">(</span>szbufFormat_Game<span class="token punctuation">,</span> szbufFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">OutputDebugStringA</span><span class="token punctuation">(</span>szbufFormat_Game<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">va_end</span><span class="token punctuation">(</span>argList<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DEBUG</span></span>

<span class="token punctuation">}</span>

BOOL Call_提升权限<span class="token punctuation">(</span>BOOL bEnable<span class="token punctuation">)</span><span class="token comment">//OpenProgress失败的情况调用 </span>
<span class="token punctuation">{</span>
	BOOL fOK <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
	HANDLE hToken<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OpenProcessToken</span><span class="token punctuation">(</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TOKEN_ADJUST_PRIVILEGES<span class="token punctuation">,</span><span class="token operator">&amp;</span>hToken<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		TOKEN_PRIVILEGES tp<span class="token punctuation">;</span>
		tp<span class="token punctuation">.</span>PrivilegeCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">LookupPrivilegeValue</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>SE_DEBUG_NAME<span class="token punctuation">,</span><span class="token operator">&amp;</span>tp<span class="token punctuation">.</span>Privileges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Luid<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tp<span class="token punctuation">.</span>Privileges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Attributes <span class="token operator">=</span> bEnable <span class="token operator">?</span> SE_PRIVILEGE_ENABLED <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">AdjustTokenPrivileges</span><span class="token punctuation">(</span>hToken<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fOK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ERROR_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">CloseHandle</span><span class="token punctuation">(</span>hToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> fOK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


HWND handle<span class="token punctuation">;</span>
HANDLE hProcess <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
DWORD pid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
DWORD WriteSize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
byte<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


DWORD g_包长 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
DWORD g_包地址 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> g_包内容<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token function">_declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token keyword">void</span> 跳转<span class="token function">CALL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	__asm <span class="token punctuation">{</span>
		pushad
		nop
		mov ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>
		mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span>
		mov g_包地址<span class="token punctuation">,</span>ecx
		sub eax<span class="token punctuation">,</span> ecx
		mov g_包长<span class="token punctuation">,</span> eax
	<span class="token punctuation">}</span>
	Call_提升权限<span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	handle <span class="token operator">=</span> <span class="token function">FindWindowA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Fantasy Frontier Online                       &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//outputMsg(&quot;幻想神域 窗口句柄%d&quot;, handle);</span>
	<span class="token function">GetWindowThreadProcessId</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hProcess <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span>FALSE<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> new byte<span class="token punctuation">[</span>g_包长<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>hProcess<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCVOID<span class="token punctuation">)</span>g_包地址<span class="token punctuation">,</span> p<span class="token punctuation">,</span> g_包长<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>WORD<span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">=</span> g_包长 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>g_包长<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">sprintf_s</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%02X&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">strcat_s</span><span class="token punctuation">(</span>g_包内容<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">outputMsg</span><span class="token punctuation">(</span><span class="token string">&quot;幻想神域     包长:%x  包地址:%x  包内容:%s\\r\\n&quot;</span><span class="token punctuation">,</span> g_包长<span class="token punctuation">,</span> g_包地址<span class="token punctuation">,</span> g_包内容<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sprintf_s</span><span class="token punctuation">(</span>g_包内容<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	delete p<span class="token punctuation">;</span>

	__asm <span class="token punctuation">{</span>
		popad
		mov eax<span class="token punctuation">,</span> dword ptr ds <span class="token operator">:</span> <span class="token punctuation">[</span>esi <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">]</span>
		sub eax<span class="token punctuation">,</span> ecx
		retn
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> MainDialog<span class="token operator">::</span><span class="token function">OnBnClickedButton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	DWORD HOOKAddress <span class="token operator">=</span> <span class="token number">0x00B92C82</span><span class="token punctuation">;</span>
	DWORD HOOKCallAddress <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>跳转CALL<span class="token punctuation">;</span>

	DWORD old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span>HOOKAddress<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span>HOOKAddress <span class="token operator">=</span> <span class="token number">0xE8</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HOOKAddress <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> HOOKCallAddress  <span class="token operator">-</span> <span class="token punctuation">(</span>HOOKAddress <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PVOID<span class="token punctuation">)</span>HOOKAddress<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240223033140392.png" alt=""></p><blockquote><p>结语</p></blockquote><p>前不久找到了一个满眼都是自己的女孩，沉浸在爱情的海洋里，3个月没碰代码。过完年也算是闲了下来，准备继续深造技术。去年的项目都停了，今年从0开始全新的领域，目标20个W，希望今年能用编程赚到的钱开起来一个属于自己的台球厅。</p>`,68),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","网游喊话加密Call分析.html.vue"]]),k=JSON.parse('{"path":"/blog/%E7%BD%91%E6%B8%B8%E5%96%8A%E8%AF%9D%E5%8A%A0%E5%AF%86Call%E5%88%86%E6%9E%90.html","title":"网游喊话加密Call分析","lang":"en-US","frontmatter":{"title":"网游喊话加密Call分析","date":"2024-02-12T00:00:00.000Z","category":["History"],"tag":["C++","逆向","windows","汇编","tcp"]},"headers":[{"level":2,"title":"封包追踪","slug":"封包追踪","link":"#封包追踪","children":[]},{"level":2,"title":"加密追踪","slug":"加密追踪","link":"#加密追踪","children":[]},{"level":2,"title":"调用加密call","slug":"调用加密call","link":"#调用加密call","children":[]},{"level":2,"title":"编写代码发送封包","slug":"编写代码发送封包","link":"#编写代码发送封包","children":[]},{"level":2,"title":"纯汇编实现加密","slug":"纯汇编实现加密","link":"#纯汇编实现加密","children":[]},{"level":2,"title":"编写简易抓包工具","slug":"编写简易抓包工具","link":"#编写简易抓包工具","children":[]}],"git":{"updatedTime":1709311174000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"blog/网游喊话加密Call分析.md","excerpt":"\\n<blockquote>\\n<p>思路整理</p>\\n</blockquote>\\n<p>网游喊话的原理就是向服务器发送了数据，网游与服务器通信数据都是使用tcp协议，而windows中发送tcp数据的API函数有send，sendto，WSASend，所以对此三个函数进行下断点。</p>\\n<p>结果在WSASend函数处断了下来，说明该游戏使用的是WSASend来封装的发送数据函数。</p>\\n<p><img src=\\"https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240212092957837.png\\" alt=\\"image-20240212092957837\\"></p>\\n<p>通过观察堆栈变化可以猜出是线程发包，说明有一个线程负责从某个地址循环读取数据，当有数据的时候就会自动采取发包。而游戏主线程则只需要在执行操作的时候把数据写入至某个地址即可。而我们此时断下的位置就是线程内部，我们需要对封包数据进行追踪到静态地址，再对地址进行硬件写入断点，就可以追踪到线程外的操作地址了。</p>\\n"}');export{r as comp,k as data};
