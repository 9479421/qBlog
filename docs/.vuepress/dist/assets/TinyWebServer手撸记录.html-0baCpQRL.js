import{_ as e,o as s,c as a,e as l}from"./app-CC-6zdNz.js";const n={},i=l(`<h1 id="tinywebserver手撸记录" tabindex="-1"><a class="header-anchor" href="#tinywebserver手撸记录"><span>TinyWebServer手撸记录</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>依稀记得上次0基础手撸项目是在3年前，当时在0基础手撸vue，一个视频教程没看的情况下，一口气写出了一个几万行的前后端项目，并且实现了几个W的盈利，尽管现在回想起来那时候代码质量不高。</p><p>前不久在手撸c++的webserver，先后看了牛客的Linux服务器编程的视频，以及《TCP/IP网络编程》、《Linux高性能服务器编程》这两本书，加上先前在易道云的网络编程基础，算是在服务器编程方向入了门。</p><p>总结下来，C++的难度绝非任何一门语言可以相提并论，没有基础的情况下硬撸是行不通的。反观烂大街的Java和web，门槛低难度小，网课视频多，拉条狗都能学会。当然难度再低的领域，学精了也会有不可企及的大山存在。但是当下而言，学Java的大学生们似乎思维已经被禁锢在了JVM里，并且天真的认为编程就是写接口，对除了Spring外编程能做的事情一无所知，甚至连一个有实际功能性的项目都没写过，再加上如今前后端的就业环境差至冰点，显然这类大学生已经无法赢得尊重。</p><p>学习过程中取得实质性帮助的文章：</p><p>https://blog.csdn.net/lepaitianshi/article/details/133035990</p><p>https://blog.csdn.net/m0_51551385/article/details/124359780</p><p>https://blog.csdn.net/XZbnhh/article/details/120689278</p><p>https://blog.csdn.net/qq_15054345/article/details/125368426</p><p>https://blog.csdn.net/weixin_60338047/article/details/130857596</p><h2 id="学习路线" tabindex="-1"><a class="header-anchor" href="#学习路线"><span>学习路线</span></a></h2><p>因为没人带，我也算是走了很多弯路，后续自己整理了下最快的学习路径，可以参考下：</p><p>首先必须下功夫先熟读《TCP/IP网络编程》，理解epoll的用法，同时熟悉EPOLLONESHOT、SO_REUSEADDR(WAIT_TIME)、EPOLLONESHOT等网络编程常用参数的作用。</p><p>熟知边缘触发、条件触发的区别。</p><p>其次要会手写链表、多线程。</p><p>了解信号、定时器、管道通信等机制。</p><p>懂一丢丢的mysql。</p><p>几乎所有应届C++ Linux服务器程序员面试里，简历里都会写WebServer项目，TinyWebServer这个项目确实是极其优秀与精简，涵盖了Linux服务器编程常用的所有内容，所以是必学的。</p><p>所以我们掌握以上的技术后，就要尝试运行tinywebserver并分模块阅读，直至理清每一行代码的作用，并能独立仿写出自己的webserver就算是大功告成了。这个过程可能会持续好几天甚至好几周，不要心急，期间可以带着翻阅《Linux高性能服务器编程》，遇到问题最好有个大佬或者前辈可以请教，那样能少走很多弯路。</p><h2 id="运行tinywebserver" tabindex="-1"><a class="header-anchor" href="#运行tinywebserver"><span>运行TinyWebServer</span></a></h2><p>运行TinyWebServer大概率会踩坑，并且发现网络上并没有任何一篇文章是完整解决问题的，我记录了下解决方案：</p><p>这里以Ubuntu为例，TinyWebServer需要mysql环境</p><blockquote><p>安装mysql</p></blockquote><p>sudo apt install mysql-server</p><blockquote><p>启动mysql</p></blockquote><p>sudo service mysql start</p><blockquote><p>设置mysql的root用户及密码</p></blockquote><p>sudo mysql -uroot -p</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>use mysql;
ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>设置远程访问root</p></blockquote><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>UPDATE user SET \`Host\` = &#39;%&#39; WHERE \`User\` = &#39;root&#39; LIMIT 1;
flush privileges;
exit;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>在bind-address = 127.0.0.1前面加#</p><blockquote><p>重启mysql</p></blockquote><p>service mysql restart</p><blockquote><p>添加mysql安全组</p></blockquote><p>此时我们要尝试使用Navicat(随便)连接数据库，如果连接不上，大概率是防火墙出了问题，我们要开放3306端口。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>添加端口： firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span>
重启防火墙： firewall-cmd --reload；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有提示没有firewall，则使用指令进行安装后再尝试关闭防火墙</p><p>sudo apt install firewalld</p><blockquote><p>添加数据库及表数据</p></blockquote><p>随后执行sql命令</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>create database yourdb;

USE yourdb;
CREATE TABLE user(
    username char(50) NULL,
    passwd char(50) NULL
)ENGINE=InnoDB;

INSERT INTO user(username, passwd) VALUES(&#39;name&#39;, &#39;passwd&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保证数据库能连接上的情况下再进行下一步操作，否则项目即使跑起来也是白吊搭。</p><blockquote><p>添加server安全组</p></blockquote><p>项目本身也需要9006端口，于是开放一下9006端口</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>添加端口： firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9006</span>/tcp <span class="token parameter variable">--permanent</span>
重启防火墙： firewall-cmd --reload；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置cpp</p></blockquote><p>打开main.cpp并且填入mysql参数。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20231018184850380.png" alt="image-20231018184850380"></p><blockquote><p>安装依赖</p></blockquote><p>此时我们就配置好了需要的环境，随后我们尝试make项目，发现找不到&lt;mysql/mysql.h&gt;</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20231018180919458.png" alt="image-20231018180919458"></p><p>解决方法:sudo apt-get install libmysqlclient-dev</p><blockquote><p>运行</p></blockquote><p>再次make</p><p>运行./server</p><p>此时用浏览器打开ip:9006即可正常访问了。</p><p>期间如果配置出错，自己都搞晕了的话，那就彻底卸载mysql再重新操作。</p><ol><li><p>停止Mysql服务</p><p>sudo systemctl stop mysql</p></li><li><p>卸载Mysql服务器</p><p>sudo apt remove --purge mysql-server</p></li><li><p>卸载Mysql共享库</p><p>sudo apt remove --purge mysql-common</p></li><li><p>删除MYSQL配置文件和数据目录</p><p>sudo rm -rf /etc/mysql /var/lib/mysql</p></li></ol><h2 id="下一步学习计划" tabindex="-1"><a class="header-anchor" href="#下一步学习计划"><span>下一步学习计划</span></a></h2><p>我将深入学习安卓手游逆向，将已学的安卓Java层、so层逆向技术、C++、Linux编程进行结合，在编程中逆向，在逆向中提升编程。</p>`,63),p=[i];function r(t,d){return s(),a("div",null,p)}const c=e(n,[["render",r],["__file","TinyWebServer手撸记录.html.vue"]]),m=JSON.parse('{"path":"/blog/TinyWebServer%E6%89%8B%E6%92%B8%E8%AE%B0%E5%BD%95.html","title":"TinyWebServer手撸记录","lang":"en-US","frontmatter":{"title":"TinyWebServer手撸记录","date":"2023-10-18T00:00:00.000Z","category":["History"],"tag":["C++","服务器","后端","高并发"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"学习路线","slug":"学习路线","link":"#学习路线","children":[]},{"level":2,"title":"运行TinyWebServer","slug":"运行tinywebserver","link":"#运行tinywebserver","children":[]},{"level":2,"title":"下一步学习计划","slug":"下一步学习计划","link":"#下一步学习计划","children":[]}],"git":{"updatedTime":1709311174000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"blog/TinyWebServer手撸记录.md","excerpt":"\\n<h2>前言</h2>\\n<p>依稀记得上次0基础手撸项目是在3年前，当时在0基础手撸vue，一个视频教程没看的情况下，一口气写出了一个几万行的前后端项目，并且实现了几个W的盈利，尽管现在回想起来那时候代码质量不高。</p>\\n<p>前不久在手撸c++的webserver，先后看了牛客的Linux服务器编程的视频，以及《TCP/IP网络编程》、《Linux高性能服务器编程》这两本书，加上先前在易道云的网络编程基础，算是在服务器编程方向入了门。</p>\\n<p>总结下来，C++的难度绝非任何一门语言可以相提并论，没有基础的情况下硬撸是行不通的。反观烂大街的Java和web，门槛低难度小，网课视频多，拉条狗都能学会。当然难度再低的领域，学精了也会有不可企及的大山存在。但是当下而言，学Java的大学生们似乎思维已经被禁锢在了JVM里，并且天真的认为编程就是写接口，对除了Spring外编程能做的事情一无所知，甚至连一个有实际功能性的项目都没写过，再加上如今前后端的就业环境差至冰点，显然这类大学生已经无法赢得尊重。</p>"}');export{c as comp,m as data};
