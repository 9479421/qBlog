import{_ as p,r as c,o as i,c as o,a as n,b as s,d as t,e as a}from"./app-W42XCaNm.js";const l={},u=a('<h1 id="linux服务器编程" tabindex="-1"><a class="header-anchor" href="#linux服务器编程"><span>Linux服务器编程</span></a></h1><h1 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h1><h2 id="系统配置" tabindex="-1"><a class="header-anchor" href="#系统配置"><span>系统配置</span></a></h2>',3),d=n("li",null,[n("p",null,[s("在虚拟机中安装Linux系统，本项目采用"),n("code",null,"VMware Workstation 16.1.2"),s("和"),n("code",null,"Ubuntu 18.04"),s("，本机系统为"),n("code",null,"Win 10")])],-1),r=a(`<p>更新<code>Ubuntu 18.04</code>源并安装<code>open-vm-tools</code></p><ol><li><p>进入<code>/etc/apt/sources.list</code> 修改为国内镜像源（速度快），全部删除，替换为下述内容，如果更新报错，将<code>https</code>换成<code>http</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>

<span class="token comment"># 预发布软件源，不建议启用</span>
<span class="token comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新系统源：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># update 是同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token comment"># upgrade 是升级已安装的所有软件包(可选)</span>
<span class="token comment"># sudo apt upgrade</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装<code>open-vm-tools</code>：<code>sudo apt install open-vm-tools</code></p></li><li><p><s>如果要实现文件夹共享，需要安装<code>open-vm-tools-dkms</code>：<code>sudo apt install open-vm-tools-dkms</code></s>=&gt;清华源找不到<code>open-vm-tools-dkms</code>，不安装不影响</p></li><li><p>桌面环境还需要安装<code>open-vm-tools-desktop</code>以支持双向拖放文件：<code>sudo apt install open-vm-tools-desktop</code></p></li><li><p>重启（使用<code>VMware</code>自带重启，使用<code>reboot</code>重启可能失败）后成功进行拖拽复制</p></li></ol>`,2),k={href:"https://blog.csdn.net/hhdhz/article/details/87922794",target:"_blank",rel:"noopener noreferrer"},v=a(`<li><p>在<code>Ubuntu 18.10</code>安装必要组件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装Vim环境</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span>

<span class="token comment"># 用于远程连接虚拟机</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server

<span class="token comment"># 用于查看IP地址</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> net-tools

<span class="token comment"># 树形查看文件夹内容</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tree
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),m=a(`<h2 id="vs-code" tabindex="-1"><a class="header-anchor" href="#vs-code"><span>VS code</span></a></h2><ol><li><p>安装<code>Remote Development</code>插件</p></li><li><p>在Linux中使用<code>ifconfig</code>查看<code>ip地址</code></p></li><li><p>按下图步骤设置<code>config</code>文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831142010206.png" alt="image-20210831142010206"></p></li><li><p><code>config</code>内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span>
Host 自定义名称
    HostName 远程服务器IP
    User 远程服务器用户名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>GCC</span></a></h2><h3 id="安装gcc" tabindex="-1"><a class="header-anchor" href="#安装gcc"><span>安装<code>gcc</code></span></a></h3><p>命令：<code>sudo apt install gcc g++</code>，本项目安装版本为：<code>7.5.0</code></p><h3 id="gcc工作流程" tabindex="-1"><a class="header-anchor" href="#gcc工作流程"><span>gcc工作流程</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831132508825.png" alt="image-20210831132508825"></p><h3 id="gcc常用参数选项" tabindex="-1"><a class="header-anchor" href="#gcc常用参数选项"><span>gcc常用参数选项</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831132654506.png" alt="image-20210831132654506"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831135954037.png" alt="image-20210831135954037"></p><ul><li><p><code>-D</code>实例</p><ul><li><p>源程序</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DEBUG</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Debug\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译命令1：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>
./test

<span class="token comment"># 输出</span>
hello, world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译命令2：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-D</span> DEBUG
./test

<span class="token comment"># 输出</span>
Debug
hello, world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="gcc与g-区别" tabindex="-1"><a class="header-anchor" href="#gcc与g-区别"><span>gcc与g++区别</span></a></h3><ul><li><code>gcc</code> 和 <code>g++</code> 都是<code>GNU(组织)</code>的一个编译器</li><li><strong>误区一</strong>：<code>gcc</code> 只能编译 c 代码，g++ 只能编译 c++ 代码 <ul><li>后缀为<code> .c</code> 的，<code>gcc</code> 把它当作是 C 程序，而 <code>g++</code> 当作是 <code>c++</code> 程序</li><li>后缀为 <code>.cpp</code> 的，两者都会认为是 <code>C++</code> 程序，<code>C++</code> 的语法规则更加严谨一些</li><li>编译阶段，<code>g++</code> 会调用 <code>gcc</code>，对于 <code>C++</code> 代码，两者是等价的，但是因为 <code>gcc</code> 命令不能自动和 <code>C++</code> 程序使用的库联接，所以通常用 <code>g++</code> 来完成链接，为了统一起见，干脆编译/链接统统用 <code>g++</code> 了，这就给人一种错觉，好像 <code>cpp</code> 程序只能用 <code>g++</code> 似的</li></ul></li><li><strong>误区二</strong>：<code>gcc</code> 不会定义 <code>__cplusplus</code> 宏，而 <code>g++</code> 会 <ul><li>实际上，这个宏只是标志着编译器将会把代码按 C 还是 C++ 语法来解释</li><li>如上所述，如果后缀为<code> .c</code>，并且采用 <code>gcc</code> 编译器，则该宏就是未定义的，否则，就是已定义</li></ul></li><li><strong>误区三</strong>：编译只能用 <code>gcc</code>，链接只能用 <code>g++</code><ul><li>严格来说，这句话不算错误，但是它混淆了概念，应该这样说：编译可以用 <code>gcc/g++</code>，而链接可以用 <code>g++</code> 或者 <code>gcc -lstdc++</code></li><li><code>gcc</code> 命令不能自动和C++程序使用的库联接，所以通常使用 <code>g++</code> 来完成链接。但在编译阶段，<code>g++</code> 会自动调用 <code>gcc</code>，二者等价</li></ul></li></ul><h1 id="linux系统编程基础知识" tabindex="-1"><a class="header-anchor" href="#linux系统编程基础知识"><span>Linux系统编程基础知识</span></a></h1><h2 id="静态库与动态库" tabindex="-1"><a class="header-anchor" href="#静态库与动态库"><span>静态库与动态库</span></a></h2><h3 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h3><ul><li>库文件是计算机上的一类文件，可以简单的把库文件看成一种代码仓库，它提供给使用者一些<strong>可以直接拿来用的变量、函数或类</strong></li><li>库是特殊的一种程序，编写库的程序和编写一般的程序区别不大，只是<strong>库不能单独运行</strong></li><li>库文件有两种，<code>静态库</code>和<code>动态库（共享库）</code>。区别是： <ul><li><strong>静态库</strong>在程序的链接阶段被复制到了程序中</li><li><strong>动态库</strong>在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用</li></ul></li><li>库的好处：<strong>代码保密</strong> 和<strong>方便部署和分发</strong></li></ul><h3 id="静态库的制作" tabindex="-1"><a class="header-anchor" href="#静态库的制作"><span>静态库的制作</span></a></h3><ul><li>规则</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831163546031.png" alt="image-20210831163546031"></p><ul><li><p>示例：有如下图所示文件(其中每个分文件用于实现四则运算)，将其打包为<strong>静态库</strong></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831164707648.png" alt="image-20210831164707648"></p><ol><li><p>生成<code>.o</code>文件：<code>gcc -c 文件名</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831164903714.png" alt="image-20210831164903714"></p></li><li><p>将<code>.o</code>文件打包：<code>ar rcs libxxx.a xx1.o xx2.o</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831165142693.png" alt="image-20210831165142693"></p></li></ol></li></ul><h3 id="静态库的使用" tabindex="-1"><a class="header-anchor" href="#静态库的使用"><span>静态库的使用</span></a></h3><ul><li><p>需要提供<strong>静态库文件和相应的头文件</strong>，有如下结构文件，其中<code>main.c</code>测试文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831170033041.png" alt="image-20210831170033041"></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// main.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;head.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d, b = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a + b = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a - b = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a * b = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a / b = %f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译运行：<code>gcc main.c -o app -I ./include -l calc -L ./lib</code></p><ul><li><p><code>-I ./include</code>：指定头文件目录，如果不指定，出现以下错误</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831170715090.png" alt="image-20210831170715090"></p></li><li><p><code>-l calc</code>：指定静态库名称，如果不指定，出现以下错误</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831170816127.png" alt="image-20210831170816127"></p></li><li><p><code>-L ./lib</code>：指定静态库位置，如果不指定，出现以下错误</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831170844743.png" alt="image-20210831170844743"></p></li><li><p><strong>正确执行</strong>（成功生成<code>app</code>可执行文件）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831170923394.png" alt="image-20210831170923394"></p></li><li><p>测试程序</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831193122578.png" alt="image-20210831193122578"></p></li></ul></li></ul><h3 id="动态库的制作" tabindex="-1"><a class="header-anchor" href="#动态库的制作"><span>动态库的制作</span></a></h3><ul><li>规则</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831171945803.png" alt="image-20210831171945803"></p><ul><li><p>示例：有如下图所示文件(其中每个分文件用于实现四则运算)，将其打包为<strong>动态库</strong></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831164707648.png" alt="image-20210831164707648"></p><ol><li><p>生成<code>.o</code>文件：<code>gcc -c -fpic 文件名</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831173502435.png" alt="image-20210831173502435"></p></li><li><p>将<code>.o</code>文件打包：<code>gcc -shared xx1.o xx2.o -o libxxx.so</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831173600480.png" alt="image-20210831173600480"></p></li></ol></li></ul><h3 id="动态库的使用" tabindex="-1"><a class="header-anchor" href="#动态库的使用"><span>动态库的使用</span></a></h3><ul><li><p>需要提供<strong>动态库文件和相应的头文件</strong></p></li><li><p>定位动态库（<strong>原因见工作原理-&gt;如何定位共享库文件</strong>，其中路径为动态库所在位置）</p><ul><li><p>方法一：修改环境变量，<strong>当前终端生效</strong>，退出当前终端失效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/home/u/Desktop/Linux/calc/lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>方法二：修改环境变量，用户级别永久配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改~/.bashrc</span>
<span class="token function">vim</span> ~/.bashrc

<span class="token comment"># 在~/.bashrc中添加下行，保存退出</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/home/u/Desktop/Linux/calc/lib

<span class="token comment"># 使修改生效</span>
<span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法三：修改环境变量，系统级别永久配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改/etc/profile</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/profile

<span class="token comment"># 在~/.bashrc中添加下行，保存退出</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/home/u/Desktop/Linux/calc/lib

<span class="token comment"># 使修改生效</span>
<span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法四：修改<code>/etc/ld.so.cache文件列表</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改/etc/ld.so.conf</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/ld.so.conf

<span class="token comment"># 在/etc/ld.so.conf中添加下行，保存退出</span>
/home/u/Desktop/Linux/calc/lib

<span class="token comment"># 更新配置</span>
<span class="token function">sudo</span> ldconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>有如下结构文件，其中<code>main.c</code>测试文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831173858257.png" alt="image-20210831173858257"></p></li><li><p>编译运行：<code>gcc main.c -o app -I ./include -l calc -L ./lib</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831193101168.png" alt="image-20210831193101168"></p></li><li><p>测试程序</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831193122578.png" alt="image-20210831193122578"></p></li><li><p>如果不将动态库文件绝对路径加入环境变量，则会出现以下错误</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831174331780.png" alt="image-20210831174331780"></p></li></ul><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li><p>静态库：<code>GCC</code> 进行链接时，会把静态库中代码打包到可执行程序中</p></li><li><p>动态库：<code>GCC</code> 进行链接时，动态库的代码不会被打包到可执行程序中</p></li><li><p>程序启动之后，动态库会被动态加载到内存中，通过 <code>ldd （list dynamic dependencies）</code>命令检查动态库依赖关系</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210831174842063.png" alt="image-20210831174842063"></p></li><li><p>如何定位共享库文件呢？</p><ul><li>当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是还需要知道<strong>绝对路径</strong>。此时就需要系统的动态载入器来获取该绝对路径</li><li>对于<code>elf格式</code>的可执行程序，是由<code>ld-linux.so</code>来完成的，它先后搜索<code>elf文件</code>的 <code>DT_RPATH</code>段 =&gt; <code>环境变量LD_LIBRARY_PATH</code> =&gt; <code>/etc/ld.so.cache文件列表</code> =&gt; <code>/lib/</code>，<code>usr/lib</code>目录找到库文件后将其载入内存</li></ul></li></ul><h3 id="静态库和动态库的对比" tabindex="-1"><a class="header-anchor" href="#静态库和动态库的对比"><span>静态库和动态库的对比</span></a></h3><h4 id="程序编译成可执行程序的过程" tabindex="-1"><a class="header-anchor" href="#程序编译成可执行程序的过程"><span>程序编译成可执行程序的过程</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902092607878.png" alt="image-20210902092607878"></p><h4 id="静态库制作过程" tabindex="-1"><a class="header-anchor" href="#静态库制作过程"><span>静态库制作过程</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902092645051.png" alt="image-20210902092645051"></p><h4 id="动态库制作过程" tabindex="-1"><a class="header-anchor" href="#动态库制作过程"><span>动态库制作过程</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902092702345.png" alt="image-20210902092702345"></p><h4 id="静态库的优缺点" tabindex="-1"><a class="header-anchor" href="#静态库的优缺点"><span>静态库的优缺点</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902092725852.png" alt="image-20210902092725852"></p><h4 id="动态库的优缺点" tabindex="-1"><a class="header-anchor" href="#动态库的优缺点"><span>动态库的优缺点</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902092749213.png" alt="image-20210902092749213"></p><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>Makefile</span></a></h2><h3 id="概念及安装" tabindex="-1"><a class="header-anchor" href="#概念及安装"><span>概念及安装</span></a></h3><ul><li>一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，<code>Makefile</code> 文件定义了一系列的规则来指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 <code>Makefile</code> 文件就像一个 <code>Shell</code> 脚本一样，也可以执行操作系统的命令</li><li><code>Makefile</code> 带来的好处就是“自动化编译” ，一旦写好，只需要一个 <code>make</code> 命令，整个工程完全自动编译，极大的提高了软件开发的效率。</li><li><code>make</code> 是一个命令工具，是一个解释 <code>Makefile</code> 文件中指令的命令工具，一般来说，大多数的 <code>IDE</code> 都有这个命令，比如 Delphi 的 <code>make</code>，Visual C++ 的 <code>nmake</code>，Linux 下 GNU 的 <code>make</code></li><li>安装：<code>sudo apt install make</code>，安装时会安装<code>man 手册</code></li></ul><h3 id="makefile-文件命名和规则" tabindex="-1"><a class="header-anchor" href="#makefile-文件命名和规则"><span>Makefile 文件命名和规则</span></a></h3><ul><li><p>文件命名：<code>makefile</code> 或者 <code>Makefile</code></p></li><li><p><code>Makefile</code> 规则</p><ul><li><p>一个 <code>Makefile</code> 文件中可以有一个或者多个规则</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902093603940.png" alt="image-20210902093603940"></p><ul><li><strong>目标</strong>：最终要生成的文件（伪目标除外）</li><li><strong>依赖</strong>：生成目标所需要的文件或是目标</li><li><strong>命令</strong>：通过执行命令对依赖操作生成目标（命令前必须 Tab 缩进）</li></ul></li><li><p><code>Makefile</code> 中的其它规则一般都是为第一条规则服务的。</p></li></ul></li></ul><h3 id="makefile编写方式" tabindex="-1"><a class="header-anchor" href="#makefile编写方式"><span>Makefile编写方式</span></a></h3><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h4><p>假设有如下文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902100556519.png" alt="image-20210902100556519"></p><h4 id="方式一-makefile-直接编译链接-不推荐" tabindex="-1"><a class="header-anchor" href="#方式一-makefile-直接编译链接-不推荐"><span>方式一：Makefile+直接编译链接（不推荐）</span></a></h4><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token target symbol">app</span><span class="token punctuation">:</span>add.c div.c multi.c sub.c main.c
	gcc add.c div.c multi.c sub.c main.c -o app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902101930762.png" alt="image-20210902101930762"></p><h4 id="方式二-makefile-编译-链接" tabindex="-1"><a class="header-anchor" href="#方式二-makefile-编译-链接"><span>方式二：Makefile+编译+链接</span></a></h4><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token target symbol">app</span><span class="token punctuation">:</span>add.o div.o multi.o sub.o main.o
	gcc add.o div.o multi.o sub.o main.o -o app

<span class="token target symbol">add.o</span><span class="token punctuation">:</span>add.c
	gcc -c add.c -o add.o

<span class="token target symbol">div.o</span><span class="token punctuation">:</span>div.c
	gcc -c div.c -o div.o

<span class="token target symbol">multi.o</span><span class="token punctuation">:</span>multi.c
	gcc -c multi.c -o multi.o

<span class="token target symbol">sub.o</span><span class="token punctuation">:</span>sub.c
	gcc -c sub.c -o sub.o

<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
	gcc -c main.c -o main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902101856277.png" alt="image-20210902101856277"></p><h4 id="方式三-makefile-变量" tabindex="-1"><a class="header-anchor" href="#方式三-makefile-变量"><span>方式三：Makefile+变量</span></a></h4><h5 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点"><span>知识点</span></a></h5><ul><li><p>自定义变量：<code>变量名=变量值</code>，如<code>var=hello</code></p></li><li><p>预定义变量</p><ul><li><p><code>AR</code> : 归档维护程序的名称，默认值为 ar</p></li><li><p><code>CC </code>: C 编译器的名称，默认值为 cc</p></li><li><p><code>CXX</code> : C++ 编译器的名称，默认值为 g++</p></li><li><p><code>$@</code> : 目标的完整名称</p></li><li><p><code>$&lt;</code> : 第一个依赖文件的名称</p></li><li><p><code>$^</code>: 所有的依赖文件</p></li><li><p>示例</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902095418237.png" alt="image-20210902095418237"></p></li></ul></li><li><p>获取变量的值：<code>$(变量名)</code>，如<code>$(var)</code></p></li></ul><h5 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h5><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>src<span class="token operator">=</span>add.o div.o multi.o sub.o main.o
target<span class="token operator">=</span>app
<span class="token target symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">add.o</span><span class="token punctuation">:</span>add.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">div.o</span><span class="token punctuation">:</span>div.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">multi.o</span><span class="token punctuation">:</span>multi.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">sub.o</span><span class="token punctuation">:</span>sub.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">main.o</span><span class="token punctuation">:</span>main.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902103929268.png" alt="image-20210902103929268"></p><h4 id="方式四-makefile-模式匹配" tabindex="-1"><a class="header-anchor" href="#方式四-makefile-模式匹配"><span>方式四：Makefile+模式匹配</span></a></h4><h5 id="知识点-1" tabindex="-1"><a class="header-anchor" href="#知识点-1"><span>知识点</span></a></h5><p>当所要编译的文件过多时，使用模式匹配能够简化操作</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902095522095.png" alt="image-20210902095522095"></p><h5 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h5><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>src<span class="token operator">=</span>add.o div.o multi.o sub.o main.o
target<span class="token operator">=</span>app
<span class="token target symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902104314203.png" alt="image-20210902104314203"></p><h4 id="方法五-makefile-函数" tabindex="-1"><a class="header-anchor" href="#方法五-makefile-函数"><span>方法五：Makefile + 函数</span></a></h4><h5 id="知识点-2" tabindex="-1"><a class="header-anchor" href="#知识点-2"><span>知识点</span></a></h5><ul><li><p><code>$(wildcard PATTERN...)</code></p><ul><li><p>功能：获取指定目录下指定类型的文件列表</p></li><li><p>参数：PATTERN 指的是某个或多个目录下的对应的某种类型的文件，如果有多个目录，一般使用空格间隔</p></li><li><p>返回：得到的若干个文件的文件列表，文件名之间使用空格间隔</p></li><li><p>示例</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902100119333.png" alt="image-20210902100119333"></p></li></ul></li><li><p><code>$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</code></p><ul><li><p>功能：查找<code>&lt;text&gt;</code>中的单词(单词以“空格”、“Tab”或“回车”“换行”分隔)是否符合模式<code>&lt;pattern&gt;</code>，如果匹配的话，则以<code>&lt;replacement&gt;</code>替换</p></li><li><p><code>&lt;pattern&gt;</code>可以包括通配符<code>%</code>，表示任意长度的字串。如果<code>&lt;replacement&gt;</code>中也包含<code>%</code>，那么，<code>&lt;replacement&gt;</code>中的这个<code>%</code>将是<code>&lt;pattern&gt;</code>中的那个%所代表的字串。(可以用<code>\\</code>来转义，以<code>\\%</code>来表示真实含义的<code>%</code>字符)</p></li><li><p>返回：函数返回被替换过后的字符串</p></li><li><p>示例</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902100350848.png" alt="image-20210902100350848"></p></li></ul></li></ul><h5 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h5><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>src<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> ./*.c<span class="token punctuation">)</span>
objs<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.c, %.o, <span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>
target<span class="token operator">=</span>app
<span class="token target symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902104748931.png" alt="image-20210902104748931"></p><h3 id="清除中间文件" tabindex="-1"><a class="header-anchor" href="#清除中间文件"><span>清除中间文件</span></a></h3><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>src<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">wildcard</span> ./*.c<span class="token punctuation">)</span>
objs<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.c, %.o, <span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>
target<span class="token operator">=</span>app
<span class="token target symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span>

<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm *.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902104842411.png" alt="image-20210902104842411"></p><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h3><ul><li><p>命令在执行之前，需要先检查规则中的依赖是否存在</p><ul><li>如果存在，执行命令</li><li>如果不存在，向下检查其它的规则，检查有没有一个规则是用来生成这个依赖的，如果找到了，则执行该规则中的命令</li></ul></li><li><p>检测更新，在执行规则中的命令时，会比较目标和依赖文件的时间</p><ul><li>如果依赖的时间比目标的时间晚，需要重新生成目标</li><li>如果依赖的时间比目标的时间早，目标不需要更新，对应规则中的命令不需要被执行</li></ul></li><li><p>示例</p><ul><li><p>当修改<code>main.c</code>且重新<code>make</code>时，如下</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902105119451.png" alt="image-20210902105119451"></p></li><li><p>当不做任何修改且重新<code>make</code>时，如下</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210902105057184.png" alt="image-20210902105057184"></p></li></ul></li></ul><h2 id="gdb调试" tabindex="-1"><a class="header-anchor" href="#gdb调试"><span>GDB调试</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><ul><li><code>GDB</code> 是由 GNU 软件系统社区提供的调试工具，同 <code>GCC</code> 配套组成了一套完整的开发环境，<code>GDB</code> 是 Linux 和许多类 Unix 系统中的标准开发环境</li><li>一般来说，<code>GDB</code> 主要帮助你完成下面四个方面的功能 <ul><li>启动程序，可以按照自定义的要求随心所欲的运行程序</li><li>可让被调试的程序在所指定的调置的断点处停住（断点可以是条件表达式）</li><li>当程序被停住时，可以检查此时程序中所发生的事</li><li>可以改变程序，将一个 BUG 产生的影响修正从而测试其他 BUG</li></ul></li></ul><h3 id="准备工作-1" tabindex="-1"><a class="header-anchor" href="#准备工作-1"><span>准备工作</span></a></h3><ul><li><p>使用以下命令编译：<code>gcc -g -Wall program.c -o program</code></p><ul><li>通常，在为调试而编译时，我们会<strong>关掉编译器的优化选项</strong>（<code>-O</code>）， 并打开<strong>调试选项</strong>（<code>-g</code>）。另外，<code>-Wall</code>在尽量不影响程序行为的情况下选项打开所有warning，也可以发现许多问题，避免一些不必要的 BUG</li><li><code>-g</code> 选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调试时必须保证 <code>gdb</code> 能找到源文件</li></ul></li><li><p>注：当在 <code>gdb</code> 中直接使用<code>回车</code>时，会默认执行上一条命令</p></li></ul><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><h4 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1"><span>说明</span></a></h4><ul><li><code>启动与退出</code>至<code>查看当前文件代码</code>使用<code>test.c</code></li><li>后续内容使用课件中其他源程序</li></ul><h4 id="启动与退出" tabindex="-1"><a class="header-anchor" href="#启动与退出"><span>启动与退出</span></a></h4><ul><li>启动：<code>gdb 可执行程序</code></li><li>退出：<code>quit/q</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903103104338.png" alt="image-20210903103104338"></p><h4 id="给程序设置参数-获取设置参数" tabindex="-1"><a class="header-anchor" href="#给程序设置参数-获取设置参数"><span>给程序设置参数/获取设置参数</span></a></h4><ul><li>设置参数：<code>set args 10 20</code></li><li>获取设置参数：<code>show args</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// test.c 源码</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argc = %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d, b = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a + b = %d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 函数调用</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res value: %d\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;THE END !!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903103228384.png" alt="image-20210903103228384"></p><h4 id="gdb使用帮助" tabindex="-1"><a class="header-anchor" href="#gdb使用帮助"><span>GDB使用帮助</span></a></h4><ul><li><code>help</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903103520671.png" alt="image-20210903103520671"></p><h4 id="查看当前文件代码" tabindex="-1"><a class="header-anchor" href="#查看当前文件代码"><span>查看当前文件代码</span></a></h4><ul><li><p>从默认位置显示：<code>list/l</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903103920656.png" alt="image-20210903103920656"></p></li><li><p>从指定的行显示：<code>list/l 行号</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903104039928.png" alt="image-20210903104039928"></p></li><li><p>从指定的函数显示：<code>list/l 行号</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903104052483.png" alt="image-20210903104052483"></p></li><li><p>注：<strong>查看时会显示前后文</strong></p></li></ul><h4 id="查看非当前文件代码" tabindex="-1"><a class="header-anchor" href="#查看非当前文件代码"><span>查看非当前文件代码</span></a></h4><ul><li><p>编译运行并使用<code>gdb main</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903104949112.png" alt="image-20210903104949112"></p></li><li><p>从指定文件指定的行显示：<code>list/l 文件名:行号</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903105035366.png" alt="image-20210903105035366"></p></li><li><p>从指定文件指定的函数显示：<code>list/l 文件名:函数名</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903105105909.png" alt="image-20210903105105909"></p></li></ul><h4 id="查看及设置显示的行数" tabindex="-1"><a class="header-anchor" href="#查看及设置显示的行数"><span>查看及设置显示的行数</span></a></h4><ul><li>查看显示的行数：<code>show list/listsize</code></li><li>设置显示的行数：<code>set list/listsize</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903105356344.png" alt="image-20210903105356344"></p><h4 id="断点操作" tabindex="-1"><a class="header-anchor" href="#断点操作"><span>断点操作</span></a></h4><ul><li><p>查看断点：<code>i/info b/break</code></p></li><li><p>设置一般断点</p><ul><li><code>b/break 行号</code></li><li><code>b/break 函数名</code></li><li><code>b/break 文件名:行号</code></li><li><code>b/break 文件名:函数</code></li></ul></li><li><p>设置条件断点（一般用在循环的位置）：<code>b/break 10 if i==5</code></p></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903110417653.png" alt="image-20210903110417653"></p><ul><li>删除断点：<code>d/del/delete 断点编号</code></li><li>设置断点无效：<code>dis/disable 断点编号</code></li><li>设置断点生效：<code>ena/enable 断点编号</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210903110544093.png" alt="image-20210903110544093"></p><h4 id="调试操作" tabindex="-1"><a class="header-anchor" href="#调试操作"><span>调试操作</span></a></h4><ul><li>运行 <code>GDB</code> 程序 <ul><li>程序停在第一行：<code>start</code></li><li>遇到断点才停：<code>run</code></li></ul></li><li>继续运行，到下一个断点停：<code>c/continue</code></li><li>向下执行一行代码（不会进入函数体）：<code>n/next</code></li><li>变量操作 <ul><li>打印变量值：<code>p/print 变量名</code></li><li>打印变量类型：<code>ptype 变量名</code></li></ul></li><li>向下单步调试（遇到函数进入函数体） <ul><li><code>s/step</code></li><li>跳出函数体：<code>finish</code></li></ul></li><li>自动变量操作 <ul><li>自动打印指定变量的值：<code>display 变量名</code></li><li>查看自动变量：<code>i/info display</code></li><li>取消自动变量：<code>undisplay 编号</code></li></ul></li><li>其它操作 <ul><li>设置变量值：<code>set var 变量名=变量值 （循环中用的较多）</code></li><li>跳出循环：<code>until</code></li></ul></li></ul><h2 id="文件io" tabindex="-1"><a class="header-anchor" href="#文件io"><span>文件IO</span></a></h2><ul><li><p>在<code>Linux</code>中使用<code>man 2 API名</code>查看<strong>Linux系统API</strong>，<code>man 3 API名</code>查看<strong>标准C库API</strong></p><ul><li><p><code>man 2 open</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905161448175.png" alt="image-20210905161448175"></p></li><li><p><code>man 3 fopen</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905161518280.png" alt="image-20210905161518280"></p></li></ul></li></ul><h3 id="标准-c-库-io-函数" tabindex="-1"><a class="header-anchor" href="#标准-c-库-io-函数"><span>标准 C 库 IO 函数</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905151717853.png" alt="image-20210905151717853"></p><h3 id="标准-c-库-io-和-linux-系统-io-的关系" tabindex="-1"><a class="header-anchor" href="#标准-c-库-io-和-linux-系统-io-的关系"><span>标准 C 库 IO 和 Linux 系统 IO 的关系</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905151735234.png" alt="image-20210905151735234"></p><h3 id="虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间"><span>虚拟地址空间</span></a></h3><ul><li><p>虚拟地址空间是为了解决内存加载问题</p><ul><li>问题1：假设实际内存为<code>4G</code>，此时共有<code>1G</code>、<code>2G</code>、<code>2G</code>三个程序，如果直接加载，那么第三个程序由于内存不足而无法执行</li><li>问题2：当问题1的<code>1G</code>程序执行完后，释放内存，第三个程序可以执行，但此时内存空间不连续</li></ul></li><li><p>对于32位机器来说，大小约为$2^{32}$，即<code>4G</code>左右，对于64位机器来说，，大小约为$2^{48}$，即<code>256T</code>左右</p></li><li><p>通过<code>CPU中的MMU(内存管理单元)</code>将虚拟内存地址映射到物理内存地址上</p></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905151755982.png" alt="image-20210905151755982"></p><h3 id="文件描述符" tabindex="-1"><a class="header-anchor" href="#文件描述符"><span>文件描述符</span></a></h3><ul><li>文件描述符表是一个<strong>数组</strong>，为了一个进程能够同时操作多个文件</li><li>文件描述符表默认大小：1024</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905160958789.png" alt="image-20210905160958789"></p><h3 id="linux-系统-io-函数" tabindex="-1"><a class="header-anchor" href="#linux-系统-io-函数"><span>Linux 系统 IO 函数</span></a></h3><h4 id="open-close" tabindex="-1"><a class="header-anchor" href="#open-close"><span>open &amp; close</span></a></h4><ul><li><p><code>int open(const char *pathname, int flags);</code>，使用<code>man 2 open</code>查看帮助</p><ul><li>参数 <ul><li><code>pathname</code>：要打开的文件路径</li><li><code>flags</code>：对文件的操作权限设置还有其他的设置(<code>O_RDONLY,</code> <code>O_WRONLY,</code> <code>O_RDWR</code> 这三个设置是互斥的，代表只读，只写，可读可写)</li></ul></li><li>返回值：返回一个新的文件描述符，如果调用失败，返回-1，并设置<code>errno</code>，<code>errno</code>属于Linux系统函数库里面的一个全局变量，记录的是最近的错误号</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;stdio.h&gt;
    void perror(const char *s);作用：打印errno对应的错误描述
        参数s：用户描述，比如hello, 最终输出的内容是  hello:xxx(实际的错误描述)
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">// 系统宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token comment">// fopen函数声明头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token comment">// close函数声明头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 打开一个文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 读写操作</span>

    <span class="token comment">// 关闭</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int open(const char *pathname, int flags, mode_t mode);</code>，使用<code>man 2 open</code>查看帮助</p><ul><li>参数 <ul><li><code>pathname</code>：要创建的文件的路径</li><li><code>flags</code>：对文件的操作权限和其他的设置 <ul><li>必选项：<code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_RDWR</code> 这三个之间是互斥的</li><li>可选项：<code>O_CREAT</code> 文件不存在，创建新文件</li><li><code>flags</code>参数是一个int类型的数据，占4个字节，32位，每一位就是一个标志位，所以用 <code>|</code> 可以保证能够实现多个操作</li></ul></li><li><code>mode</code>：八进制的数，表示创建出的新的文件的操作权限，比如：0775</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
            最终的权限是：mode &amp; ~umask
            0777   -&gt;   111111111
        &amp;   0775   -&gt;   111111101
        ----------------------------
                        111111101
        按位与：0和任何数都为0
        umask的作用就是抹去某些权限, 可以直接在终端输入 umask 查看默认值
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个新的文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;create.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int close(int fd);</code></p></li></ul><h4 id="read-write" tabindex="-1"><a class="header-anchor" href="#read-write"><span>read &amp; write</span></a></h4><ul><li><code>ssize_t read(int fd, void *buf, size_t count);</code>，使用<code>man 2 read</code>查看帮助 <ul><li>参数 <ul><li><code>fd</code>：文件描述符，open得到的，通过这个文件描述符操作某个文件</li><li><code>buf</code>：需要读取数据存放的地方，数组的地址（传出参数）</li><li><code>count</code>：指定的数组的大小</li></ul></li><li>返回值 <ul><li>成功 <ul><li><code>&gt; 0</code>: 返回实际的读取到的字节数</li><li><code>= 0</code>：文件已经读取完了</li></ul></li><li>失败：-1</li></ul></li></ul></li><li><code>ssize_t write(int fd, const void *buf, size_t count);</code>，使用<code>man 2 write</code>查看帮助 <ul><li>参数 <ul><li><code>fd</code>：文件描述符，open得到的，通过这个文件描述符操作某个文件</li><li><code>buf</code>：要往磁盘写入的数据</li><li><code>count</code>：要写的数据的实际的大小</li></ul></li><li>返回值 <ul><li>成功：实际写入的字节数</li><li>失败：返回-1，并设置<code>errno</code></li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 1.通过open打开english.txt文件</span>
    <span class="token keyword">int</span> srcfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;english.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>srcfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2.创建一个新的文件（拷贝文件）</span>
    <span class="token keyword">int</span> destfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;cpy.txt&quot;</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>destfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.频繁的读写操作</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>srcfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">write</span><span class="token punctuation">(</span>destfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4.关闭文件</span>
    <span class="token function">close</span><span class="token punctuation">(</span>destfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>srcfd<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lseek" tabindex="-1"><a class="header-anchor" href="#lseek"><span>lseek</span></a></h4><ul><li><code>off_t lseek(int fd, off_t offset, int whence);</code>，使用<code>man 2 lseek</code>查看帮助</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*  
    标准C库的函数
    #include &lt;stdio.h&gt;
    int fseek(FILE *stream, long offset, int whence);

    Linux系统函数
    #include &lt;sys/types.h&gt;
    #include &lt;unistd.h&gt;
    off_t lseek(int fd, off_t offset, int whence);
        参数：
            - fd：文件描述符，通过open得到的，通过这个fd操作某个文件
            - offset：偏移量
            - whence:
                SEEK_SET
                    设置文件指针的偏移量
                SEEK_CUR
                    设置偏移量：当前位置 + 第二个参数offset的值
                SEEK_END
                    设置偏移量：文件大小 + 第二个参数offset的值
        返回值：返回文件指针的位置

    作用：
        1.移动文件指针到文件头
        lseek(fd, 0, SEEK_SET);

        2.获取当前文件指针的位置
        lseek(fd, 0, SEEK_CUR);

        3.获取文件长度
        lseek(fd, 0, SEEK_END);

        4.拓展文件的长度，当前文件10b, 110b, 增加了100个字节
        lseek(fd, 100, SEEK_END)
        注意：需要写一次数据

*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 扩展文件的长度</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;lseek&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 写入一个空数据，如果缺少，那么会扩展失败</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 关闭文件</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>扩展前</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905182600860.png" alt="image-20210905182600860"></p></li><li><p>扩展后（原先为5个字节，扩展100个字节，然后写入一个字节）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905182955313.png" alt="image-20210905182955313"></p></li></ul><h4 id="stat-lstat-获取文件信息及软链接信息" tabindex="-1"><a class="header-anchor" href="#stat-lstat-获取文件信息及软链接信息"><span>stat &amp; lstat(获取文件信息及软链接信息)</span></a></h4><ul><li><p><code>int stat(const char *pathname, struct stat *statbuf);</code>，使用<code>man 2 stat</code>查看帮助</p></li><li><p><code>int lstat(const char *pathname, struct stat *statbuf);</code>，使用<code>man 2 lstat</code>查看帮助</p></li><li><p>Linux命令：<code>stat</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905184130981.png" alt="image-20210905184130981"></p></li><li><p><code>stat</code>结构体</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">{</span>
    <span class="token class-name">dev_t</span> st_dev<span class="token punctuation">;</span> <span class="token comment">// 文件的设备编号</span>
    <span class="token class-name">ino_t</span> st_ino<span class="token punctuation">;</span> <span class="token comment">// 节点</span>
    <span class="token class-name">mode_t</span> st_mode<span class="token punctuation">;</span> <span class="token comment">// 文件的类型和存取的权限</span>
    <span class="token class-name">nlink_t</span> st_nlink<span class="token punctuation">;</span> <span class="token comment">// 连到该文件的硬连接数目</span>
    <span class="token class-name">uid_t</span> st_uid<span class="token punctuation">;</span> <span class="token comment">// 用户ID</span>
    <span class="token class-name">gid_t</span> st_gid<span class="token punctuation">;</span> <span class="token comment">// 组ID</span>
    <span class="token class-name">dev_t</span> st_rdev<span class="token punctuation">;</span> <span class="token comment">// 设备文件的设备编号</span>
    <span class="token class-name">off_t</span> st_size<span class="token punctuation">;</span> <span class="token comment">// 文件字节数(文件大小)</span>
    <span class="token class-name">blksize_t</span> st_blksize<span class="token punctuation">;</span> <span class="token comment">// 块大小</span>
    <span class="token class-name">blkcnt_t</span> st_blocks<span class="token punctuation">;</span> <span class="token comment">// 块数</span>
    <span class="token class-name">time_t</span> st_atime<span class="token punctuation">;</span> <span class="token comment">// 最后一次访问时间</span>
    <span class="token class-name">time_t</span> st_mtime<span class="token punctuation">;</span> <span class="token comment">// 最后一次修改时间</span>
    <span class="token class-name">time_t</span> st_ctime<span class="token punctuation">;</span> <span class="token comment">// 最后一次改变时间(指属性)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>st_mode</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210905184325137.png" alt="image-20210905184325137"></p></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;sys/types.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;unistd.h&gt;

    int stat(const char *pathname, struct stat *statbuf);
        作用：获取一个文件相关的一些信息
        参数:
            - pathname：操作的文件的路径
            - statbuf：结构体变量，传出参数，用于保存获取到的文件的信息
        返回值：
            成功：返回0
            失败：返回-1 设置errno

    int lstat(const char *pathname, struct stat *statbuf);
        参数:
            - pathname：操作的文件的路径
            - statbuf：结构体变量，传出参数，用于保存获取到的文件的信息
        返回值：
            成功：返回0
            失败：返回-1 设置errno

*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">stat</span> statbuf<span class="token punctuation">;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>statbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;stat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size: %ld\\n&quot;</span><span class="token punctuation">,</span> statbuf<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模拟实现ls-l" tabindex="-1"><a class="header-anchor" href="#模拟实现ls-l"><span>模拟实现<code>ls -l</code></span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pwd.h&gt;</span>        <span class="token comment">// for getpwuid()</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;grp.h&gt;</span>        <span class="token comment">// for getgrgid()</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span>       <span class="token comment">// for ctime()</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span>     <span class="token comment">// for strncpy(), strlen()</span></span>

<span class="token comment">// 模拟实现 ls -l 指令</span>
<span class="token comment">// -rw-rw-r-- 1 nowcoder nowcoder 12 12月  3 15:48 a.txt</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 判断输入的参数是否正确</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s filename\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 通过stat函数获取用户传入的文件的信息</span>
    <span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;stat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取文件类型和文件权限</span>
    <span class="token keyword">char</span> perms<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 用于保存文件类型和文件权限的字符串</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IFMT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> S_IFLNK<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> S_IFDIR<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> S_IFREG<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> 
        <span class="token keyword">case</span> S_IFBLK<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> 
        <span class="token keyword">case</span> S_IFCHR<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> 
        <span class="token keyword">case</span> S_IFSOCK<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> S_IFIFO<span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            perms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;?&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断文件的访问权限</span>

    <span class="token comment">// 文件所有者</span>
    perms<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;r&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;x&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 文件所在组</span>
    perms<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;r&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;x&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他人</span>
    perms<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;r&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>
    perms<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;x&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 硬连接数</span>
    <span class="token keyword">int</span> linkNum <span class="token operator">=</span> st<span class="token punctuation">.</span>st_nlink<span class="token punctuation">;</span>

    <span class="token comment">// 文件所有者</span>
    <span class="token keyword">char</span><span class="token operator">*</span> fileUser <span class="token operator">=</span> <span class="token function">getpwuid</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_uid<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pw_name<span class="token punctuation">;</span>

    <span class="token comment">// 文件所在组</span>
    <span class="token keyword">char</span><span class="token operator">*</span> fileGrp <span class="token operator">=</span> <span class="token function">getgrgid</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_gid<span class="token punctuation">)</span><span class="token operator">-&gt;</span>gr_name<span class="token punctuation">;</span>

    <span class="token comment">// 文件大小</span>
    <span class="token keyword">long</span> <span class="token keyword">int</span> fileSize <span class="token operator">=</span> st<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>

    <span class="token comment">// 获取修改的时间</span>
    <span class="token keyword">char</span><span class="token operator">*</span> time <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> mtime<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>mtime<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%s %d %s %s %ld %s %s&quot;</span><span class="token punctuation">,</span> perms<span class="token punctuation">,</span> linkNum<span class="token punctuation">,</span> fileUser<span class="token punctuation">,</span> fileGrp<span class="token punctuation">,</span> fileSize<span class="token punctuation">,</span> mtime<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件属性操作函数" tabindex="-1"><a class="header-anchor" href="#文件属性操作函数"><span>文件属性操作函数</span></a></h3><h4 id="access" tabindex="-1"><a class="header-anchor" href="#access"><span>access</span></a></h4><ul><li><code>int access(const char *pathname, int mode);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;unistd.h&gt;
    int access(const char *pathname, int mode);
        作用：判断某个文件是否有某个权限，或者判断文件是否存在
        参数：
            - pathname: 判断的文件路径
            - mode:
                R_OK: 判断是否有读权限
                W_OK: 判断是否有写权限
                X_OK: 判断是否有执行权限
                F_OK: 判断文件是否存在
        返回值：成功返回0， 失败返回-1
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;access&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;文件存在！！!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chmod-chown" tabindex="-1"><a class="header-anchor" href="#chmod-chown"><span>chmod &amp; chown</span></a></h4><ul><li><code>int chmod(const char *filename, int mode);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;sys/stat.h&gt;
    int chmod(const char *pathname, mode_t mode);
        修改文件的权限
        参数：
            - pathname: 需要修改的文件的路径
            - mode:需要修改的权限值，八进制的数
        返回值：成功返回0，失败返回-1

*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;chmod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>int chown(const char *path, uid_t owner, gid_t group);</code><ul><li>修改文件所有者</li><li>可使用<code>vim /etc/passwd</code>查看有哪些用户</li><li>可使用<code>vim /etc/group</code>查看有哪些组</li></ul></li></ul><h4 id="truncate" tabindex="-1"><a class="header-anchor" href="#truncate"><span>truncate</span></a></h4><ul><li><code>int truncate(const char *path, off_t length);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;unistd.h&gt;
    #include &lt;sys/types.h&gt;
    int truncate(const char *path, off_t length);
        作用：缩减或者扩展文件的尺寸至指定的大小
        参数：
            - path: 需要修改的文件的路径
            - length: 需要最终文件变成的大小
        返回值：
            成功返回0， 失败返回-1
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;truncate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录操作函数" tabindex="-1"><a class="header-anchor" href="#目录操作函数"><span>目录操作函数</span></a></h3><h4 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir"><span>mkdir</span></a></h4><ul><li><code>int mkdir(const char *pathname, mode_t mode);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/types.h&gt;
    int mkdir(const char *pathname, mode_t mode);
        作用：创建一个目录
        参数：
            pathname: 创建的目录的路径
            mode: 权限，八进制的数
        返回值：
            成功返回0， 失败返回-1
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rename" tabindex="-1"><a class="header-anchor" href="#rename"><span>rename</span></a></h4><ul><li><code>int rename(const char *oldpath, const char *newpath);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;stdio.h&gt;
    int rename(const char *oldpath, const char *newpath);

*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;rename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chdir-getcwd" tabindex="-1"><a class="header-anchor" href="#chdir-getcwd"><span>chdir &amp; getcwd</span></a></h4><ul><li><p><code>int chdir(const char *path);</code></p></li><li><p><code>char *getcwd(char *buf, size_t size);</code></p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*

    #include &lt;unistd.h&gt;
    int chdir(const char *path);
        作用：修改进程的工作目录
            比如在/home/nowcoder 启动了一个可执行程序a.out, 进程的工作目录 /home/nowcoder
        参数：
            path : 需要修改的工作目录

    #include &lt;unistd.h&gt;
    char *getcwd(char *buf, size_t size);
        作用：获取当前工作目录
        参数：
            - buf : 存储的路径，指向的是一个数组（传出参数）
            - size: 数组的大小
        返回值：
            返回的指向的一块内存，这个数据就是第一个参数

*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 获取当前的工作目录</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">getcwd</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前的工作目录是：%s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 修改工作目录</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">&quot;/home/u/Desktop/Linux/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;chdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

    <span class="token comment">// 创建一个新的文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;chdir.txt&quot;</span><span class="token punctuation">,</span> O_CREAT <span class="token operator">|</span> O_RDWR<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取当前的工作目录</span>
    <span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">getcwd</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前的工作目录是：%s\\n&quot;</span><span class="token punctuation">,</span> buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录遍历函数" tabindex="-1"><a class="header-anchor" href="#目录遍历函数"><span>目录遍历函数</span></a></h3><ul><li><p>打开一个目录：<code>DIR *opendir(const char *name);</code></p></li><li><p>读取目录中的数据：<code>struct dirent *readdir(DIR *dirp);</code></p></li><li><p>关闭目录：<code>int closedir(DIR *dirp);</code></p></li><li><p><code>dirent</code> 结构体和 <code>d_type</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">dirent</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 此目录进入点的inode</span>
    <span class="token class-name">ino_t</span> d_ino<span class="token punctuation">;</span> 
    <span class="token comment">// 目录文件开头至此目录进入点的位移</span>
    <span class="token class-name">off_t</span> d_off<span class="token punctuation">;</span> 
    <span class="token comment">// d_name 的长度, 不包含NULL字符</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> d_reclen<span class="token punctuation">;</span> 
    <span class="token comment">// d_name 所指的文件类型</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> d_type<span class="token punctuation">;</span> 
    <span class="token comment">// 文件名</span>
    <span class="token keyword">char</span> d_name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>d_type</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210908203416289.png" alt="image-20210908203416289"></p></li></ul></li><li><p><strong>读取文件夹文件数目</strong>实例</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    // 打开一个目录
    #include &lt;sys/types.h&gt;
    #include &lt;dirent.h&gt;
    DIR *opendir(const char *name);
        参数：
            - name: 需要打开的目录的名称
        返回值：
            DIR * 类型，理解为目录流
            错误返回NULL


    // 读取目录中的数据
    #include &lt;dirent.h&gt;
    struct dirent *readdir(DIR *dirp);
        - 参数：dirp是opendir返回的结果
        - 返回值：
            struct dirent，代表读取到的文件的信息
            读取到了末尾或者失败了，返回NULL

    // 关闭目录
    #include &lt;sys/types.h&gt;
    #include &lt;dirent.h&gt;
    int closedir(DIR *dirp);

*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">getFileNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取某个目录下所有的普通文件的个数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s path\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">getFileNum</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;普通文件的个数为：%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用于获取目录下所有普通文件的个数</span>
<span class="token keyword">int</span> <span class="token function">getFileNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 1.打开目录</span>
    DIR <span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;opendir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>

    <span class="token comment">// 记录普通文件的个数</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取名称</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> dname <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>d_name<span class="token punctuation">;</span>

        <span class="token comment">// 忽略掉. 和..</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dname<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 判断是否是普通文件还是目录</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>d_type <span class="token operator">==</span> DT_DIR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 目录,需要继续读取这个目录</span>
            <span class="token keyword">char</span> newpath<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>newpath<span class="token punctuation">,</span> <span class="token string">&quot;%s/%s&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> dname<span class="token punctuation">)</span><span class="token punctuation">;</span>
            total <span class="token operator">+=</span> <span class="token function">getFileNum</span><span class="token punctuation">(</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>d_type <span class="token operator">==</span> DT_REG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 普通文件</span>
            total<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭目录</span>
    <span class="token function">closedir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="文件描述符之dup、dup2" tabindex="-1"><a class="header-anchor" href="#文件描述符之dup、dup2"><span>文件描述符之<code>dup</code>、<code>dup2</code></span></a></h3><h4 id="dup" tabindex="-1"><a class="header-anchor" href="#dup"><span>dup</span></a></h4><ul><li><code>int dup(int oldfd);</code></li><li>复制文件描述符</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;unistd.h&gt;
    int dup(int oldfd);
        作用：复制一个新的文件描述符
        fd=3, int fd1 = dup(fd),
        fd指向的是a.txt, fd1也是指向a.txt
        从空闲的文件描述符表中找一个最小的，作为新的拷贝的文件描述符


*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>fd1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;dup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fd : %d , fd1 : %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;hello,world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dup2" tabindex="-1"><a class="header-anchor" href="#dup2"><span>dup2</span></a></h4><ul><li><code>int dup2(int oldfd, int newfd);</code></li><li>重定向文件描述符</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;unistd.h&gt;
    int dup2(int oldfd, int newfd);
        作用：重定向文件描述符
        oldfd 指向 a.txt, newfd 指向 b.txt
        调用函数成功后：newfd 和 b.txt 做close, newfd 指向了 a.txt
        oldfd 必须是一个有效的文件描述符
        oldfd和newfd值相同，相当于什么都没有做
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fd : %d, fd1 : %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;dup2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 通过fd1去写数据，实际操作的是1.txt，而不是2.txt</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;hello, dup2&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fd : %d, fd1 : %d, fd2 : %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> fd1<span class="token punctuation">,</span> fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fcntl-函数" tabindex="-1"><a class="header-anchor" href="#fcntl-函数"><span>fcntl 函数</span></a></h3><ul><li><code>int fcntl(int fd, int cmd, ... /* arg */ );</code></li><li><strong>复制文件描述符</strong>和<strong>设置/获取文件的状态标志</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*

    #include &lt;unistd.h&gt;
    #include &lt;fcntl.h&gt;

    int fcntl(int fd, int cmd, ...);
    参数：
        fd : 表示需要操作的文件描述符
        cmd: 表示对文件描述符进行如何操作
            - F_DUPFD : 复制文件描述符,复制的是第一个参数fd，得到一个新的文件描述符（返回值）
                int ret = fcntl(fd, F_DUPFD);

            - F_GETFL : 获取指定的文件描述符文件状态flag
              获取的flag和我们通过open函数传递的flag是一个东西。

            - F_SETFL : 设置文件描述符文件状态flag
              必选项：O_RDONLY, O_WRONLY, O_RDWR 不可以被修改
              可选性：O_APPEND, O_NONBLOCK
                O_APPEND 表示追加数据
                NONBLOK 设置成非阻塞
        
        阻塞和非阻塞：描述的是函数调用的行为。
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 1.复制文件描述符</span>
    <span class="token comment">// int fd = open(&quot;1.txt&quot;, O_RDONLY);</span>
    <span class="token comment">// int ret = fcntl(fd, F_DUPFD);</span>

    <span class="token comment">// 2.修改或者获取文件状态flag</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取文件描述符状态flag</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fcntl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    flag <span class="token operator">|=</span> O_APPEND<span class="token punctuation">;</span>   <span class="token comment">// flag = flag | O_APPEND</span>

    <span class="token comment">// 修改文件描述符状态的flag，给flag加入O_APPEND这个标记</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fcntl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;nihao&quot;</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="进程概述" tabindex="-1"><a class="header-anchor" href="#进程概述"><span>进程概述</span></a></h1><h2 id="程序和进程" tabindex="-1"><a class="header-anchor" href="#程序和进程"><span>程序和进程</span></a></h2><ul><li><code>程序</code>是包含一系列<strong>信息</strong>的文件，这些信息描述了如何在运行时创建一个<code>进程</code><ul><li><strong>二进制格式标识</strong>：每个程序文件都包含用于描述可执行文件格式的元信息。内核利用此信息来解释文件中的其他信息，Linux中为ELF可执行连接格式</li><li><strong>机器语言指令</strong>：对程序算法进行编码</li><li><strong>程序入口地址</strong>：标识程序开始执行时的起始指令位置</li><li><strong>数据</strong>：程序文件包含的变量初始值和程序使用的字面量值（比如字符串）</li><li><strong>符号表及重定位表</strong>：描述程序中函数和变量的位置及名称。这些表格有多重用途，其中包括调试和运行时的符号解析（动态链接）</li><li><strong>共享库和动态链接信息</strong>：程序文件所包含的一些字段，列出了程序运行时需要使用的共享库，以及加载共享库的动态连接器的路径名</li><li>其他信息：程序文件还包含许多其他信息，用以描述如何创建进程</li></ul></li><li><strong><code>进程</code>是正在运行的<code>程序</code>的实例</strong>。是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元</li><li>可以用<strong>一个程序来创建多个进程</strong>，进程是由内核定义的抽象实体，并为该实体分配用以执行程序的各项系统资源。从内核的角度看，进程由用户内存空间和一系列内核数据结构组成，其中用户内存空间包含了程序代码及代码所使用的变量，而内核数据结构则用于维护进程状态信息。记录在内核数据结构中的信息包括许多与进程相关的标识号（IDs）、虚拟内存表、打开文件的描述符表、信号传递及处理的有关信息、进程资源使用及限制、当前工作目录和大量的其他信息</li></ul><h2 id="单道、多道程序设计" tabindex="-1"><a class="header-anchor" href="#单道、多道程序设计"><span>单道、多道程序设计</span></a></h2><ul><li><code>单道程序</code>，即在计算机内存中只允许一个的程序运行</li><li><code>多道程序</code>设计技术是在计算机内存中同时存放几道相互独立的程序，使它们<strong>在管理程序控制下，相互穿插运行</strong>，两个或两个以上程序在计算机系统中同处于开始到结束之间的状态，这些程序共享计算机系统资源。<strong>引入多道程序设计技术的根本目的是为了提高 CPU 的利用率</strong></li><li>对于一个<strong>单 CPU 系统</strong>来说，程序同时处于运行状态只是一种宏观上的概念，他们虽然都已经开始运行，但<strong>就微观而言，任意时刻，CPU 上运行的程序只有一个</strong></li><li>在多道程序设计模型中，多个进程轮流使用 CPU。而当下常见 <strong>CPU 为纳秒级</strong>，1秒可以执行大约 10 亿条指令。由于<strong>人眼的反应速度是毫秒级</strong>，所以看似同时在运行</li></ul><h2 id="时间片" tabindex="-1"><a class="header-anchor" href="#时间片"><span>时间片</span></a></h2><ul><li><code>时间片（timeslice）</code>又称为<code>量子（quantum）</code>或<code>处理器片（processor slice）</code>是操作系统分配给每个正在运行的进程微观上的一段 CPU 时间。事实上，虽然一台计算机通常可能有多个 CPU，但是同一个 CPU 永远不可能真正地同时运行多个任务。在只考虑一个 CPU 的情况下，这些进程“看起来像”同时运行的，实则是轮番穿插地运行，由于时间片通常很短（在 Linux 上为 <code>5ms－800ms</code>），用户不会感觉到</li><li><strong>时间片由操作系统内核的调度程序分配给每个进程</strong>。首先，内核会给每个进程分配相等的初始时间片，然后每个进程轮番地执行相应的时间，当所有进程都处于时间片耗尽的状态时，内核会重新为每个进程计算并分配时间片，如此往复</li></ul><h2 id="并行和并发" tabindex="-1"><a class="header-anchor" href="#并行和并发"><span>并行和并发</span></a></h2><ul><li><code>并行(parallel)</code>：指在同一时刻，有多条指令在多个处理器上同时执行</li><li><code>并发(concurrency)</code>：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210916215642423.png" alt="image-20210916215642423"></p><h2 id="进程控制块-pcb" tabindex="-1"><a class="header-anchor" href="#进程控制块-pcb"><span>进程控制块（PCB）</span></a></h2><ul><li><p>为了管理进程，内核必须对每个进程所做的事情进行清楚的描述。内核为每个进程分配一个<code>PCB(Processing Control Block)进程控制块</code>，维护进程相关的信息，Linux 内核的进程控制块是 <code>task_struct</code> 结构体</p></li><li><p>在 <code>/usr/src/linux-headers-xxx/include/linux/sched.h</code> 文件中可以查看 <code>struct task_struct</code> 结构体定义，其中<code>linux-headers-xxx</code>需要替换为该目录下相应的版本</p></li><li><p>需要掌握的<code>struct task_struct</code> 结构体成员</p><ul><li><p><strong>进程id</strong>：系统中每个进程有唯一的 id，用 <code>pid_t</code> 类型表示，其实就是一个非负整数</p></li><li><p><strong>进程的状态</strong>：有<code>就绪</code>、<code>运行</code>、<code>挂起</code>、<code>停止</code>等状态</p></li><li><p>进程切换时需要<strong>保存和恢复的一些CPU寄存器</strong></p></li><li><p>描述<strong>虚拟地址空间</strong>的信息</p></li><li><p>描述<strong>控制终端</strong>的信息</p></li><li><p>当前工作目录（Current Working Directory）</p></li><li><p><code>umask 掩码</code></p></li><li><p>文件描述符表，包含很多指向 file 结构体的指针</p></li><li><p>和信号相关的信息</p></li><li><p>用户 id 和组 id</p></li><li><p>会话（Session）和进程组</p></li><li><p>进程可以使用的资源上限（Resource Limit），在Linux中可用<code>ulimit -a</code>查看资源上限</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210916220259062.png" alt="image-20210916220259062"></p></li></ul></li></ul><h1 id="进程状态" tabindex="-1"><a class="header-anchor" href="#进程状态"><span>进程状态</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><ul><li>进程状态反映进程执行过程的变化，这些状态随着进程的执行和外界条件的变化而转换</li><li>分为<code>三态模型</code>和<code>五态模型</code></li></ul><h2 id="三态模型" tabindex="-1"><a class="header-anchor" href="#三态模型"><span>三态模型</span></a></h2><ul><li><code>运行态</code>：进程占有处理器正在运行</li><li><code>就绪态</code>：进程具备运行条件，等待系统分配处理器以便运行。当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行。在一个系统中处于就绪状态的进程可能有多个，通常将它们排成一个队列，称为就绪队列</li><li><code>阻塞态</code>：又称为等待(wait)态或睡眠(sleep)态，指进程不具备运行条件，正在等待某个事件的完成</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210916222221394.png" alt="image-20210916222221394"></p><h2 id="五态模型" tabindex="-1"><a class="header-anchor" href="#五态模型"><span>五态模型</span></a></h2><ul><li>除<code>新建态</code>和<code>终止态</code>，其余三个状态与<code>三态模型</code>一致</li><li><code>新建态</code>：进程刚被创建时的状态，尚未进入就绪队列</li><li><code>终止态</code>：进程完成任务到达正常结束点，或出现无法克服的错误而异常终止，或被操作系统及有终止权的进程所终止时所处的状态。进入终止态的进程以后不再执行，但依然保留在操作系统中等待善后。一旦其他进程完成了对终止态进程的信息抽取之后，操作系统将删除该进程</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210916222349607.png" alt="image-20210916222349607"></p><h2 id="进程相关命令" tabindex="-1"><a class="header-anchor" href="#进程相关命令"><span>进程相关命令</span></a></h2><h3 id="查看进程-静态" tabindex="-1"><a class="header-anchor" href="#查看进程-静态"><span>查看进程-静态</span></a></h3><ul><li><p><code>ps</code>命令用来查看进程（静态），可以使用<code>man ps</code>查看使用说明</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928203808470.png" alt="image-20210928203808470"></p></li><li><p>常用参数含义</p><ul><li>a：显示终端上的所有进程，包括其他用户的进程</li><li>u：显示进程的详细信息</li><li>x：显示没有控制终端的进程</li><li>j：列出与作业控制相关的信息</li></ul></li><li><p><code>ps -aux</code>或<code>ps aux</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928203512766.png" alt="image-20210928203512766"></p><ul><li><p><code>USER</code>：进程所属用户</p></li><li><p><code>PID</code>：进程ID</p></li><li><p><code>%CPU</code>：CPU使用占比</p></li><li><p><code>%MEM</code>：内存使用占比</p></li><li><p><code>TTY</code>：进程所属终端，在终端直接执行<code>tty</code>可查看当前<code>Terminal</code>所属终端（因为此时我还打开了另外两个终端）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928204341231.png" alt="image-20210928204341231"></p></li><li><p><code>STAT</code>：进程状态</p><ul><li>D ：不可中断 Uninterruptible（usually IO）</li><li>R：正在运行，或在队列中的进程</li><li>S(大写) ：处于休眠状态</li><li>T：停止或被追踪</li><li>Z：僵尸进程</li><li>W：进入内存交换（从内核2.6开始无效）</li><li>X：死掉的进程</li><li>&lt;：高优先级</li><li>N：低优先级</li><li>s：包含子进程</li><li>+：位于前台的进程组</li></ul></li><li><p><code>START</code>：进程开始执行时间</p></li><li><p><code>TIME</code>：进程执行持续时间</p></li><li><p><code>COMMAND</code>：进程执行命令</p></li></ul></li><li><p><code>ps -ajx</code>或<code>ps ajx</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928203535360.png" alt="image-20210928203535360"></p><ul><li><code>PPID</code>：该进程的父进程ID</li><li><code>PGID</code>：该进程所属组ID</li><li><code>SID</code>：该进程所属会话(session)ID，多个组构成会话</li></ul></li></ul><h3 id="查看进程-动态" tabindex="-1"><a class="header-anchor" href="#查看进程-动态"><span>查看进程-动态</span></a></h3><ul><li><p><code>top</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928205835614.png" alt="image-20210928205835614"></p></li><li><p>可以在使用 top 命令时加上 -d 来指定显示信息更新的时间间隔</p></li><li><p>在 top 命令执行后，可以按以下按键对显示的结果进行排序</p><ul><li>M：根据内存使用量排序</li><li>P：根据 CPU 占有率排序</li><li>T：根据进程运行时间长短排序</li><li>U：根据用户名来筛选进程</li><li>K：输入指定的 PID 杀死进程</li></ul></li></ul><h3 id="杀死进程" tabindex="-1"><a class="header-anchor" href="#杀死进程"><span>杀死进程</span></a></h3><ul><li><p><code>kill [-signal] pid</code></p></li><li><p><code>kill -l</code>：列出所有信号</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928210055119.png" alt="image-20210928210055119"></p></li><li><p><code>kill -9 进程ID</code>等价于<code>kill –SIGKILL 进程ID</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928210427167.png" alt="image-20210928210427167"></p></li><li><p><code>killall name</code>：根据进程名杀死进程</p></li></ul><h2 id="进程号和相关函数" tabindex="-1"><a class="header-anchor" href="#进程号和相关函数"><span>进程号和相关函数</span></a></h2><ul><li>每个进程都由进程号来标识，其类型为 <code>pid_t（整型）</code>，进程号的范围：<code>0～32767</code>。进程号总是唯一的，但可以重用。当一个进程终止后，其进程号就可以再次使用</li><li><strong>任何进程（除 init 进程）都是由另一个进程创建</strong>，该进程称为被创建进程的父进程，对应的进程号称为父进程号（PPID）</li><li><strong>进程组是一个或多个进程的集合</strong>。他们之间相互关联，进程组可以接收同一终端的各种信号，关联的进程有一个进程组号（PGID）。默认情况下，当前的进程号会当做当前的进程组号</li><li>进程号和进程组相关函数 <ul><li><code>pid_t getpid(void);</code>：获取进程ID</li><li><code>pid_t getppid(void);</code>：获取进程的父进程ID</li><li><code>pid_t getpgid(pid_t pid);</code>：获取进程的组ID</li></ul></li></ul><h1 id="进程创建" tabindex="-1"><a class="header-anchor" href="#进程创建"><span>进程创建</span></a></h1><h2 id="进程创建-fork" tabindex="-1"><a class="header-anchor" href="#进程创建-fork"><span>进程创建：fork</span></a></h2><ul><li><p>可通过<code>man 2 fork</code>查看帮助</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002151951979.png" alt="image-20211002151951979"></p></li><li><p><code>pid_t fork(void);</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;sys/types.h&gt;
    #include &lt;unistd.h&gt;

    pid_t fork(void);
        函数的作用：用于创建子进程。
        返回值：
            fork()的返回值会返回两次。一次是在父进程中，一次是在子进程中。
            在父进程中返回创建的子进程的ID,
            在子进程中返回0
            如何区分父进程和子进程：通过fork的返回值。
            在父进程中返回-1，表示创建子进程失败，并且设置errno
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断是父进程还是子进程</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pid : %d\\n&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果大于0，返回的是创建的子进程的进程号，当前是父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent num : %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent num += 10 : %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当前是子进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child num : %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child num += 100 : %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// for循环</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i : %d , pid : %d\\n&quot;</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20210928220107951.png" alt="image-20210928220107951"></p></li></ul><h2 id="fork工作原理" tabindex="-1"><a class="header-anchor" href="#fork工作原理"><span>fork工作原理</span></a></h2><ul><li><p>Linux 的 <code>fork()</code> 使用是通过<strong>写时拷贝 (copy- on-write) 实现</strong>。写时拷贝是一种可以推迟甚至避免拷贝数据的技术</p></li><li><p>内核此时并不复制整个进程的地址空间，而是让<strong>父子进程共享同一个地址空间</strong>，只有在<strong>需要写入的时候</strong>才会复制地址空间，从而使各个进程拥有各自的地址空间。即<strong>资源的复制是在需要写入的时候才会进行，在此之前，只有以只读方式共享</strong>（示例程序中<code>num</code>的作用）</p></li><li><p><strong>fork之后父子进程共享文件</strong>。fork产生的子进程与父进程<strong>有相同的文件描述符，指向相同的文件表</strong>，引用计数增加，共享文件偏移指针</p></li><li><p>使用<strong>虚拟地址空间</strong>，由于用的是<strong>写时拷贝 (copy- on-write) <strong>，下图</strong>不完全准确，但可帮助理解</strong></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001210207674.png" alt="image-20211001210207674"></p></li></ul><h2 id="父子进程关系" tabindex="-1"><a class="header-anchor" href="#父子进程关系"><span>父子进程关系</span></a></h2><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><ul><li><strong>fork()函数的返回值不同</strong>。父进程中: &gt;0 返回的是子进程的ID，子进程中: =0</li><li><strong>pcb中的一些数据不同</strong>。pcb中存的是<strong>当前进程的ID(pid)</strong>，<strong>当前进程的父ID(ppid)<strong>和</strong>信号集</strong></li></ul><h3 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点"><span>共同点</span></a></h3><ul><li>在某些状态下，即<strong>子进程刚被创建出来，还没有执行任何的写数据的操作</strong>。此时<strong>用户区的数据</strong>和<strong>文件描述符表</strong>父进程和子进程一样</li></ul><h3 id="父子进程对变量共享说明" tabindex="-1"><a class="header-anchor" href="#父子进程对变量共享说明"><span>父子进程对变量共享说明</span></a></h3><ul><li>刚开始的时候，是一样的，共享的。如果修改了数据，不共享了</li><li>读时共享（子进程被创建，两个进程没有做任何的写的操作），写时拷贝</li></ul><h2 id="gdb-多进程调试" tabindex="-1"><a class="header-anchor" href="#gdb-多进程调试"><span>GDB 多进程调试</span></a></h2><ul><li><p>在以下调试程序<strong>第10行</strong>及<strong>第20行</strong>打断点，后续说明都基于这两个断点</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001212316252.png" alt="image-20211001212316252"></p></li><li><p>打断点及查看</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001212346310.png" alt="image-20211001212346310"></p></li><li><p>使用 GDB 调试的时候，GDB 默认只能跟踪一个进程，可以在 fork 函数调用之前，通过指令设置 GDB 调试工具跟踪父进程或者是跟踪子进程，<strong>默认跟踪父进程</strong></p></li><li><p>查看当前跟踪的进程：<code>show follow-fork-mode</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001211945721.png" alt="image-20211001211945721"></p></li><li><p>设置调试父进程或者子进程：<code>set follow-fork-mode [parent（默认）| child]</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001212004830.png" alt="image-20211001212004830"></p><ul><li><p>调试父进程，子进程循环会自动执行，完毕后需要输入<code>n</code>继续执行父进程</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001213311443.png" alt="image-20211001213311443"></p></li><li><p>调试子进程，父进程循环会自动执行，完毕后需要输入<code>n</code>继续执行子进程</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001213147830.png" alt="image-20211001213147830"></p></li></ul></li><li><p>查看调试模式：<code>show detach-on-fork</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001212131057.png" alt="image-20211001212131057"></p></li><li><p>设置调试模式：<code>set detach-on-fork [on | off]</code></p><ul><li><p>默认为 on，表示调试当前进程的时候，其它的进程继续运行，如果为 off，调试当前进程的时候，其它进程被 GDB 挂起</p></li><li><p>注：在设置为<code>off</code>时，执行程序会报以下错误，原因是<strong>gdb 8.x版本存在bug</strong></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001212533538.png" alt="image-20211001212533538"></p></li><li><p>以下正常执行的<code>gdb</code>版本为<code>v7.11.1</code>（截图来源于视频），与设置为<code>on</code>的区别在于，<strong><code>for</code>循环是否打印</strong></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001213504787.png" alt="image-20211001213504787"></p></li></ul></li><li><p>查看调试的进程：<code>info inferiors</code>，此时调试进程为<code>parent</code>，需要执行后才会显示进程</p><ul><li><p>当<code>detach-on-fork</code>为<code>on</code>时，只会显示一个进程（==因为另一个进程已经执行完毕，销毁==，猜测）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001215254459.png" alt="image-20211001215254459"></p></li><li><p>当<code>detach-on-fork</code>为<code>off</code>时，会显示两个进程</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211001215414550.png" alt="image-20211001215414550"></p></li></ul></li><li><p>切换当前调试的进程：<code>inferior Num</code></p></li><li><p>使进程脱离 GDB 调试：<code>detach inferiors Num</code></p></li></ul><h1 id="exec函数族" tabindex="-1"><a class="header-anchor" href="#exec函数族"><span>exec函数族</span></a></h1><h2 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h2><ul><li><p>可通过<code>man 3 exec</code>查看帮助</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002092129575.png" alt="image-20211002092129575"></p></li><li><p><code>exec 函数族</code>的作用是根据指定的文件名找到可执行文件，并用它来取代调用进程的内容，换句话说，就是<strong>在调用进程内部执行一个可执行文件</strong></p></li><li><p>exec 函数族的函数执行成功后不会返回，因为调用进程的实体，包括代码段，数据段和堆栈等都已经被新的内容取代，只留下进程 ID 等一些表面上的信息仍保持原样，颇有些神似“三十六计”中的“金蝉脱壳”。看上去还是旧的躯壳，却已经注入了新的灵魂。只有调用失败了，它们才会返回 -1，从原程序的调用点接着往下执行</p></li><li><p>用户区替换为<code>a.out</code>的内容，内核区不变</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002090629048.png" alt="image-20211002090629048"></p></li></ul><h2 id="种类" tabindex="-1"><a class="header-anchor" href="#种类"><span>种类</span></a></h2><ul><li><p>基本组件为<code>exec</code>，后面跟不同参数，代表不同含义</p><ul><li><p><code>l(list) </code>：参数地址列表，以<strong>空指针结尾</strong></p></li><li><p><code>v(vector) </code>：存有各参数地址的指针数组的地址</p></li><li><p><code>p(path) </code>：按 PATH 环境变量指定的目录搜索可执行文件，可用<code>env</code>查看现有的环境变量</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002093521376.png" alt="image-20211002093521376"></p></li><li><p><code>e(environment)</code>：存有环境变量字符串地址的指针数组的地址，增加新的环境变量</p></li></ul></li><li><p>说明：下列示例程序除核心代码外，保持一致，初始包含文件有</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002091926160.png" alt="image-20211002091926160"></p></li><li><p><code>int execl(const char *path, const char *arg, .../* (char *) NULL */);</code></p><ul><li><p><code>path</code>：需要指定的执行的文件的路径或者名称</p></li><li><p><code>arg</code>：是执行可执行文件所需要的参数列表。第一个参数一般没有什么作用，为了方便，一般写的是执行的程序的名称，从第二个参数开始往后，就是程序执行所需要的的参数列表，参数最后需要以NULL结束（哨兵）</p></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


    <span class="token comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果不加这句，会存在孤儿进程，输出异常</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token comment">// 调用自己写的可执行程序</span>
        <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">&quot;/home/u/Desktop/Linux/hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用系统进程</span>
        <span class="token comment">// execl(&quot;/bin/ps&quot;, &quot;ps&quot;, &quot;aux&quot;, NULL);</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;execl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d, pid = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002092658778.png" alt="image-20211002092658778"></p></li><li><p>说明：可以看到，子进程的内容（用户区）被替换，打印的是<code>hello</code>中的内容</p></li></ul></li><li><p><code>int execlp(const char *file, const char *arg, ... /* (char *) NULL */);</code></p><ul><li><p>会到环境变量中查找指定的可执行文件，如果找到了就执行，找不到就执行不成功</p></li><li><p><code>file</code>：只需要提供名称（不需要提供路径）</p></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


    <span class="token comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aux&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d, pid = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002093005924.png" alt="image-20211002093005924"></p></li></ul></li><li><p><code>int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */);</code></p><ul><li><p><code>envp</code>：添加路径至环境变量，注意以<code>NULL</code>结尾，否则报<code>execle: Bad address</code></p></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


    <span class="token comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token comment">// 需要已NULL结尾，否则报 execle: Bad address 错误</span>
        <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/home/u/Desktop/Linux/&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">execle</span><span class="token punctuation">(</span><span class="token string">&quot;/home/u/Desktop/Linux/hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;execle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d, pid = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002095344859.png" alt="image-20211002095344859"></p></li></ul></li><li><p><code>int execv(const char *path, char *const argv[]);</code></p><ul><li><p><code>argv</code>：将运行参数都写在数组中</p></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


    <span class="token comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">&quot;/home/u/Desktop/Linux/hello&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;execv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d, pid = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002095544288.png" alt="image-20211002095544288"></p></li></ul></li><li><p><code> int execvp(const char *file, char *const argv[]);</code></p></li><li><p><code>int execvpe(const char *file, char *const argv[], char *const envp[]);</code></p></li><li><p><code>int execve(const char *filename, char *const argv[], char *const envp[]);</code></p></li></ul><h1 id="进程控制" tabindex="-1"><a class="header-anchor" href="#进程控制"><span>进程控制</span></a></h1><h2 id="进程退出" tabindex="-1"><a class="header-anchor" href="#进程退出"><span>进程退出</span></a></h2><ul><li><p>标准C库：<code>exit()</code></p></li><li><p>Linux系统：<code>_exit()</code></p></li><li><p>区别</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002102156043.png" alt="image-20211002102156043"></p></li><li><p>程序说明</p><ul><li><p><code>exit()</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002102546106.png" alt="image-20211002102546106"></p></li><li><p><code>_exit()</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002102641454.png" alt="image-20211002102641454"></p></li><li><p>原因：调用<code>_exit</code>时没有刷新缓冲区，所以<code>world</code>还留在缓冲区中，没有被输出，<code>\\n</code>会刷新缓冲区</p></li></ul></li></ul><h2 id="孤儿进程" tabindex="-1"><a class="header-anchor" href="#孤儿进程"><span>孤儿进程</span></a></h2><ul><li>父进程运行结束，但子进程还在运行（未运行结束），这样的子进程就称为<code>孤儿进程（Orphan Process）</code></li><li>每当出现一个孤儿进程的时候，内核就把孤儿进程的父进程设置为 init ，而 init 进程会循环地 wait() 它的已经退出的子进程。</li><li>孤儿进程并不会有什么危害</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是父进程还是子进程</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 当前是子进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// for循环</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i : %d , pid : %d\\n&quot;</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002105534145.png" alt="image-20211002105534145"></p><h2 id="僵尸进程" tabindex="-1"><a class="header-anchor" href="#僵尸进程"><span>僵尸进程</span></a></h2><ul><li><p>每个进程结束之后，都会释放自己地址空间中的用户区数据，内核区的 PCB 没有办法自己释放掉，需要父进程去释放</p></li><li><p>进程终止时，父进程尚未回收，子进程残留资源（PCB）存放于内核中，变成<code>僵尸（Zombie）进程</code></p></li><li><p><strong>僵尸进程不能被 <code>kill -9</code> 杀死</strong>，这样就会导致一个问题，如果父进程不调用 <code>wait()</code> 或 <code>waitpid()</code> 的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程，此即为僵尸进程的危害，应当避免</p></li><li><p>示例</p><ul><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断是父进程还是子进程</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当前是子进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d, ppid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
    <span class="token punctuation">}</span>

    <span class="token comment">// for循环</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i : %d , pid : %d\\n&quot;</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>僵尸进程ID：45161，可以通过杀死父进程45160，从而使僵尸进程变为孤儿进程，让init领养进行释放</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002110239941.png" alt="image-20211002110239941"></p></li><li><p>释放后</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002110519810.png" alt="image-20211002110519810"></p></li></ul></li></ul><h2 id="进程回收" tabindex="-1"><a class="header-anchor" href="#进程回收"><span>进程回收</span></a></h2><h3 id="基本概念-2" tabindex="-1"><a class="header-anchor" href="#基本概念-2"><span>基本概念</span></a></h3><ul><li>在每个进程退出的时候，内核释放该进程所有的资源、包括打开的文件、占用的内存等。但是仍然为其保留一定的信息，这些信息主要主要指进程控制块PCB的信息（包括进程号、退出状态、运行时间等）</li><li>父进程可以通过调用<code>wait</code>或<code>waitpid</code>得到它的退出状态同时彻底清除掉这个进程，查看帮助：<code>man 2 wait</code></li><li><code>wait()</code> 和 <code>waitpid()</code> 函数的功能一样，区别在于 <ul><li><code>wait()</code> 函数会阻塞</li><li><code>waitpid()</code> 可以设置是否阻塞，<code>waitpid()</code> 还可以指定等待哪个子进程结束</li></ul></li><li>注意：<strong>一次<code>wait</code>或<code>waitpid</code>调用只能清理一个子进程，清理多个子进程应使用循环</strong></li></ul><h3 id="退出信息相关宏函数" tabindex="-1"><a class="header-anchor" href="#退出信息相关宏函数"><span>退出信息相关宏函数</span></a></h3><ul><li><code>WIFEXITED(status)</code>：非0，进程正常退出</li><li><code>WEXITSTATUS(status)</code>：如果上宏为真，获取进程退出的状态（exit的参数）</li><li><code>WIFSIGNALED(status)</code>：非0，进程异常终止</li><li><code>WTERMSIG(status)</code>：如果上宏为真，获取使进程终止的信号编号</li><li><code>WIFSTOPPED(status)</code>：非0，进程处于暂停状态</li><li><code>WSTOPSIG(status)</code>：如果上宏为真，获取使进程暂停的信号的编号</li><li><code>WIFCONTINUED(status)</code>：非0，进程暂停后已经继续运行</li></ul><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait"><span>wait()</span></a></h3><ul><li><p>可通过<code>man 2 wait</code>查看帮助</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002152046247.png" alt="image-20211002152046247"></p></li><li><p><code>pid_t wait(int *wstatus);</code></p><ul><li><p>功能：等待任意一个子进程结束，如果任意一个子进程结束了，此函数会回收子进程的资源</p></li><li><p>参数</p><ul><li><code>int *wstatus</code>：进程退出时的状态信息，传入的是一个int类型的地址，传出参数。</li></ul></li><li><p>返回值</p><ul><li>成功：返回被回收的子进程的id</li><li>失败：-1 (所有的子进程都结束，调用函数失败)</li></ul></li></ul></li><li><p>其他说明</p><ul><li>调用wait函数的进程会被挂起（阻塞），直到它的一个子进程退出或者收到一个不能被忽略的信号时才被唤醒（相当于继续往下执行）</li><li>如果没有子进程了，函数立刻返回，返回-1；如果子进程都已经结束了，也会立即返回，返回-1</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 有一个父进程，创建5个子进程（兄弟）</span>
    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>

    <span class="token comment">// 创建5个子进程</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 避免嵌套重复生成子进程</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent, pid = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// int ret = wait(NULL);</span>
            <span class="token keyword">int</span> st<span class="token punctuation">;</span>
            <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 是不是正常退出</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;退出的状态码：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 是不是异常终止</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;被哪个信号干掉了：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child die, pid = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child, pid = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
         <span class="token punctuation">}</span>

        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// exit(0)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>程序开始执行</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002150658401.png" alt="image-20211002150658401"></p></li><li><p>通过命令杀死子进程：<code>kill -9 47548</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002150754497.png" alt="image-20211002150754497"></p></li></ul><h3 id="waitpid" tabindex="-1"><a class="header-anchor" href="#waitpid"><span>waitpid()</span></a></h3><ul><li><p>可通过<code>man 2 wait</code>查看帮助</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002152139398.png" alt="image-20211002152139398"></p></li><li><p><code>pid_t waitpid(pid_t pid, int *wstatus, int options);</code></p><ul><li>功能：回收指定进程号的子进程，可以设置是否阻塞</li><li>参数 <ul><li><code>pid</code><ul><li><code>pid &gt; 0</code> : 回收某个子进程的pid</li><li><code>pid = 0</code> : 回收当前进程组的所有子进程</li><li><code>pid = -1</code> : 回收所有的子进程，相当于 wait() （最常用）</li><li><code>pid &lt; -1</code> : 某个进程组的组id的绝对值，回收指定进程组中的子进程</li></ul></li><li>options：设置阻塞或者非阻塞 <ul><li>0 : 阻塞</li><li>WNOHANG : 非阻塞</li></ul></li><li>返回值 <ul><li>&gt; 0 : 返回子进程的id</li><li>0 : options=WNOHANG, 表示还有子进程活着</li><li>-1 ：错误，或者没有子进程了</li></ul></li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 有一个父进程，创建5个子进程（兄弟）</span>
    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>

    <span class="token comment">// 创建5个子进程</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent, pid = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> st<span class="token punctuation">;</span>
            <span class="token comment">// int ret = waitpid(-1, &amp;st, 0);</span>
            <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">,</span> WNOHANG<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 说明还有子进程存在</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 是不是正常退出</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;退出的状态码：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 是不是异常终止</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;被哪个信号干掉了：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child die, pid = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
           
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child, pid = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
         <span class="token punctuation">}</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002154934131.png" alt="image-20211002154934131"></p><h1 id="进程间通信之管道及内存映射" tabindex="-1"><a class="header-anchor" href="#进程间通信之管道及内存映射"><span>进程间通信之管道及内存映射</span></a></h1><h2 id="进程间通讯概念" tabindex="-1"><a class="header-anchor" href="#进程间通讯概念"><span>进程间通讯概念</span></a></h2><ul><li>进程是一个独立的资源分配单元，不同进程（这里所说的进程通常指的是用户进程）之间的资源是独立的，没有关联，不能在一个进程中直接访问另一个进程的资源</li><li>但是，进程不是孤立的，不同的进程需要进行信息的交互和状态的传递等，因此需要<code>进程间通信( IPC：Inter Processes Communication)</code></li><li>进程间通信的目的 <ul><li>数据传输：一个进程需要将它的数据发送给另一个进程</li><li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）</li><li>资源共享：多个进程之间共享同样的资源。为了做到这一点，需要内核提供互斥和同步机制</li><li>进程控制：有些进程希望完全控制另一个进程的执行（如 Debug 进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变</li></ul></li></ul><h2 id="linux-进程间通信的方式" tabindex="-1"><a class="header-anchor" href="#linux-进程间通信的方式"><span>Linux 进程间通信的方式</span></a></h2><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002162256108.png" alt="image-20211002162256108"></p><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h2><h3 id="管道特点" tabindex="-1"><a class="header-anchor" href="#管道特点"><span>管道特点</span></a></h3><ul><li>管道其实是一个在<strong>内核内存中维护的缓冲器</strong>，这个缓冲器的存储能力是有限的，不同的操作系统大小不一定相同</li><li>管道拥有文件的特质：读操作、写操作 <ul><li><strong>匿名管道</strong>没有文件实体</li><li><strong>有名管道</strong>有文件实体，但不存储数据。可以按照操作文件的方式对管道进行操作</li></ul></li><li><strong>一个管道是一个字节流</strong>，使用管道时不存在消息或者消息边界的概念，从管道读取数据的进程可以读取任意大小的数据块，而不管写入进程写入管道的数据块的大小是多少</li><li>通过管道传递的数据是顺序的，从管道中读取出来的字节的顺序和它们被写入管道的顺序是完全一样的</li><li>在管道中的数据的传递方向是单向的，一端用于写入，一端用于读取，管道是<strong>半双工</strong>的</li><li>从管道读数据是一次性操作，数据一旦被读走，它就从管道中被抛弃，释放空间以便写更多的数据，<strong>在管道中无法使用 lseek() 来随机的访问数据</strong></li><li><code>匿名管道</code>只能在<strong>具有公共祖先的进程（父进程与子进程，或者两个兄弟进程，具有亲缘关系）之间使用</strong></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002170404267.png" alt="image-20211002170404267"></p><h3 id="管道实现进程通信的原理" tabindex="-1"><a class="header-anchor" href="#管道实现进程通信的原理"><span>管道实现进程通信的原理</span></a></h3><ul><li>管道相当于<strong>一个中间媒介，共享数据</strong></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002170600779.png" alt="image-20211002170600779"></p><h3 id="管道的数据结构" tabindex="-1"><a class="header-anchor" href="#管道的数据结构"><span>管道的数据结构</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002170726732.png" alt="image-20211002170726732"></p><h3 id="匿名管道" tabindex="-1"><a class="header-anchor" href="#匿名管道"><span>匿名管道</span></a></h3><h4 id="概念及使用" tabindex="-1"><a class="header-anchor" href="#概念及使用"><span>概念及使用</span></a></h4><ul><li><code>管道</code>也叫<code>无名（匿名）管道</code>，它是是 UNIX 系统 IPC（进程间通信）的最古老形式，所有的 UNIX 系统都支持这种通信机制</li><li>统计一个目录中文件的数目命令：<code>ls | wc –l</code>，为了执行该命令，shell 创建了两个进程来分别执行 ls 和 wc</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002170052657.png" alt="image-20211002170052657"></p><ul><li><p>查看帮助：<code>man 2 pipe</code></p></li><li><p>创建匿名管道：<code>int pipe(int pipefd[2]);</code></p></li><li><p>查看管道缓冲大小命令：<code>ulimit –a </code>（共8个，每个521byte，即4k）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002183127455.png" alt="image-20211002183127455"></p></li><li><p>查看管道缓冲大小函数：<code>long fpathconf(int fd, int name);</code></p></li></ul><h4 id="创建匿名管道" tabindex="-1"><a class="header-anchor" href="#创建匿名管道"><span>创建匿名管道</span></a></h4><ul><li><p><code>int pipe(int pipefd[2])</code></p><ul><li>功能：创建一个匿名管道，用来进程间通信。</li><li>参数：<code>int pipefd[2]</code> 这个数组是一个传出参数。 <ul><li><code>pipefd[0]</code> 对应的是管道的读端</li><li><code>pipefd[1]</code> 对应的是管道的写端</li></ul></li><li>返回值：成功 0，失败 -1</li></ul></li><li><p>注意</p><ul><li>管道默认是阻塞的：如果管道中没有数据，read阻塞，如果管道满了，write阻塞</li><li>匿名管道只能用于具有关系的进程之间的通信（父子进程，兄弟进程）</li></ul></li><li><p>实现<strong>子进程发送数据给父进程，父进程读取到数据输出</strong></p><ul><li><p>管道应在子进程创建前生成，否则父子进程不一定对应同一个管道</p></li><li><p>单向发送时</p><ul><li>由于读写顺序不定，看起来像自己写自己读</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002184318546.png" alt="image-20211002184318546"></p><ul><li><p>解决方法：关闭不需要的端口（即代码中的<code>close(pipefd[1]);</code>）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002184931014.png" alt="image-20211002184931014"></p></li><li><p>实际在不加<code>sleep</code>运行时，会出现下列问题，原因是==写的速度过快，向管道连续写了好多次，才被读取到一次，父进程接收到过多的子进程信息是因为父进程每次读完管道中的数据，想要再次读取时就会因为管道为空而被阻塞。所以就造成了从效果上来看写的速度要比读的快==</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002184623154.png" alt="image-20211002184623154"></p></li></ul></li><li><p>注意双向发送时，注意父子进程的读写顺序（代码中注释段）</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    #include &lt;unistd.h&gt;
    int pipe(int pipefd[2]);
        功能：创建一个匿名管道，用来进程间通信。
        参数：int pipefd[2] 这个数组是一个传出参数。
            pipefd[0] 对应的是管道的读端
            pipefd[1] 对应的是管道的写端
        返回值：
            成功 0
            失败 -1

    管道默认是阻塞的：如果管道中没有数据，read阻塞，如果管道满了，write阻塞

    注意：匿名管道只能用于具有关系的进程之间的通信（父子进程，兄弟进程）
*/</span>

<span class="token comment">// 子进程发送数据给父进程，父进程读取到数据输出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 在fork之前创建管道</span>
    <span class="token keyword">int</span> pipefd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pipe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am parent process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭写端</span>
        <span class="token comment">// close(pipefd[1]);</span>
        
        <span class="token comment">// 从管道的读取端读取数据</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent recv : %s, pid : %d\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 向管道中写入数据</span>
            <span class="token comment">//char * str = &quot;hello,i am parent&quot;;</span>
            <span class="token comment">//write(pipefd[1], str, strlen(str));</span>
            <span class="token comment">//sleep(1);</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i am child process, pid : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭读端</span>
        <span class="token comment">// close(pipefd[0]);</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 向管道中写入数据</span>
            <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;hello,i am child&quot;</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// int len = read(pipefd[0], buf, sizeof(buf));</span>
            <span class="token comment">// printf(&quot;child recv : %s, pid : %d\\n&quot;, buf, getpid());</span>
            <span class="token comment">// bzero(buf, 1024);</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211002173606571.png" alt="image-20211002173606571"></p></li></ul><h4 id="实例-自建管道实现shell命令-ps-aux" tabindex="-1"><a class="header-anchor" href="#实例-自建管道实现shell命令-ps-aux"><span>实例：自建管道实现shell命令(<code>ps aux</code>)</span></a></h4><ul><li><p>思路</p><ul><li>子进程： 实现<code>ps aux</code>, 子进程结束后，将数据发送给父进程</li><li>父进程：获取到数据并打印</li><li><code>pipe()-&gt;fork()-&gt;execlp()&lt;在此之前，输出为文件描述符重定向&gt;-&gt;打印</code></li></ul></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    实现 ps aux | grep xxx 父子进程间通信
    
    子进程： ps aux, 子进程结束后，将数据发送给父进程
    父进程：获取到数据，过滤
    pipe()
    execlp()
    子进程将标准输出 stdout_fileno 重定向到管道的写端。  dup2
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wait.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 创建一个管道</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;pipe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token comment">// 关闭写端，必须要有，否则程序不会结束</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从管道中读取</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 过滤数据输出</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token comment">// 关闭读端</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 文件描述符的重定向 stdout_fileno -&gt; fd[1]</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行 ps aux</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aux&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;execlp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>==未解决：./ipc | wc - c 比 ps aux | wc -c 统计的进程数不同==</p></li></ul><h4 id="设置管道非阻塞" tabindex="-1"><a class="header-anchor" href="#设置管道非阻塞"><span>设置管道非阻塞</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取原来的flag</span>
flags <span class="token operator">|=</span> O_NONBLOCK<span class="token punctuation">;</span>            <span class="token comment">// 修改flag的值</span>
<span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置新的flag</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读写特点总结" tabindex="-1"><a class="header-anchor" href="#读写特点总结"><span>读写特点总结</span></a></h4><ul><li>读管道 <ul><li>管道中有数据，read返回实际读到的字节数</li><li>管道中无数据 <ul><li>写端被全部关闭，read返回0（相当于读到文件的末尾）</li><li>写端没有完全关闭，read阻塞等待</li></ul></li></ul></li><li>写管道 <ul><li>管道读端全部被关闭，进程异常终止（进程收到<code>SIGPIPE</code>信号）</li><li>管道读端没有全部关闭： <ul><li>管道已满，write阻塞</li><li>管道没有满，write将数据写入，并返回实际写入的字节数</li></ul></li></ul></li></ul><h3 id="有名管道" tabindex="-1"><a class="header-anchor" href="#有名管道"><span>有名管道</span></a></h3><h4 id="概念及使用-1" tabindex="-1"><a class="header-anchor" href="#概念及使用-1"><span>概念及使用</span></a></h4><ul><li><p>匿名管道，由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了<code>有名管道（FIFO）</code>，也叫<code>命名管道</code>、<code>FIFO文件</code></p></li><li><p><code>有名管道（FIFO）</code>不同于匿名管道之处在于它<strong>提供了一个路径名与之关联</strong>，以 <strong>FIFO 的文件形式存在于文件系统中</strong>，并且其打开方式与打开一个普通文件是一样的，这样即使与 <code>FIFO</code> 的创建进程不存在亲缘关系的进程，只要可以访问该路径，就能够彼此通过 <code>FIFO</code> 相互通信，因此，通过 <code>FIFO</code> 不相关的进程也能交换数据</p></li><li><p>一旦打开了 <code>FIFO</code>，就能在它上面使用与操作匿名管道和其他文件的系统调用一样的I/O系统调用了（如<code>read()</code>、<code>write()</code>和<code>close()</code>）。与管道一样，<code>FIFO</code> 也有一个写入端和读取端，并且从管道中读取数据的顺序与写入的顺序是一样的。FIFO 的名称也由此而来：先入先出</p></li><li><p><code>有名管道（FIFO)</code>和<code>匿名管道（pipe）</code>有一些特点是相同的，不一样的地方在于</p><ul><li><code>FIFO</code> 在文件系统中作为一个特殊文件存在，但 <code>FIFO</code> 中的<strong>内容却存放在内存中</strong></li><li>当使用 <code>FIFO</code> 的进程退出后，<code>FIFO</code> 文件将继续保存在文件系统中以便以后使用</li><li><code>FIFO</code> 有名字，不相关的进程可以通过打开有名管道进行通信</li></ul></li><li><p>可使用<code>man fifo</code>查看帮助</p></li></ul><h4 id="创建有名管道" tabindex="-1"><a class="header-anchor" href="#创建有名管道"><span>创建有名管道</span></a></h4><ul><li><p>shell命令创建：<code>mkfifo 文件名</code>，可通过<code>man 1 mkfifo</code>查看帮助</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003160648019.png" alt="image-20211003160648019"></p></li><li><p>函数创建：<code>int mkfifo(const char *pathname, mode_t mode);</code>，可通过<code>man 3 mkfifo</code>查看帮助</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 判断文件是否存在</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 不存在则创建</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;管道不存在，创建管道...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003161504190.png" alt="image-20211003161504190"></p></li></ul><h4 id="实例-两进程通过有名管道通信-单一发送" tabindex="-1"><a class="header-anchor" href="#实例-两进程通过有名管道通信-单一发送"><span>实例：两进程通过有名管道通信（单一发送）</span></a></h4><ul><li><p>写端</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token comment">// 向管道中写数据</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 1.判断文件是否存在</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;管道不存在，创建管道\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 2.创建管道文件</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>       

    <span class="token punctuation">}</span>

    <span class="token comment">// 3.以只写的方式打开管道</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 写数据</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;hello, %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;write data : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读端</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token comment">// 从管道中读取数据</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 1.打开管道文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 读数据</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里不能写strlen(buf) 因为这里的含义是每次按固定长度读取，最开始strlen(buf)=0</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;写端断开连接了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv buf : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行</p><ul><li><p>当写端开始写数据，但读端没有启动时，写端阻塞</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003164458310.png" alt="image-20211003164458310"></p></li><li><p>当读端开始读数据，但写端没有启动时，读端阻塞</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003164517651.png" alt="image-20211003164517651"></p></li><li><p>两端都启动时，正常输出（无关哪个先启动）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003164554381.png" alt="image-20211003164554381"></p><ul><li><p>先关闭读端</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003164654992.png" alt="image-20211003164654992"></p></li><li><p>先关闭写端<img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003164634420.png" alt="image-20211003164634420"></p></li></ul></li></ul></li></ul><h4 id="实例-简易版聊天功能-连续发送" tabindex="-1"><a class="header-anchor" href="#实例-简易版聊天功能-连续发送"><span>实例：简易版聊天功能（连续发送）</span></a></h4><ul><li><p>功能：两个进程相互发送数据及接收数据，能够连续发送及接收</p></li><li><p>思路</p><ul><li>由于两个进程并没有亲缘关系，所以只能使用有名管道实现</li><li>需要两个管道 <ul><li>一个管道用于进程A的写与进程B的读</li><li>一个管道用于进程B的写与进程A的读</li></ul></li><li>需要父子进程，实现连续发送及接收 <ul><li>父进程负责写入数据到管道</li><li>子进程负责从管道读取数据</li></ul></li></ul></li><li><p>流程（不包含父子进程，即下图所示流程不能实现连续发送功能）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003171227426.png" alt="image-20211003171227426"></p></li><li><p>进程A</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
chatA
1. 读、写数据分开，用两个管道
    1. fifo1用于进程A写及进程B读
    2. fifo2用于进程B写及进程A读
2. 连续发送及接收信息，使用两个进程
    1. 父进程用于写数据
    2. 子进程用于读数据
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 判断写管道是否存在，不存在则创建</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1不存在，创建...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 

    <span class="token comment">// 判断读管道是否存在，不存在则创建</span>
    ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2不存在，创建...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 创建进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token comment">// 打开写管道</span>
        <span class="token comment">// 打开一次，否则系统可能会崩</span>
        <span class="token keyword">int</span> fdw <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从键盘读取输入</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatA]please input: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>fdw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清空数组</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fdw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token comment">// 打开读管道</span>
        <span class="token comment">// 打开一次，否则系统可能会崩</span>
        <span class="token keyword">int</span> fdr <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fdr<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatA]写端断开连接了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatA]recv : %s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清空数组</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fdr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进程B</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
chatB
1. 读、写数据分开，用两个管道
    1. fifo1用于进程A写及进程B读
    2. fifo2用于进程B写及进程A读
2. 连续发送及接收信息，使用两个进程
    1. 父进程用于写数据
    2. 子进程用于读数据
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 判断写管道是否存在，不存在则创建</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1不存在，创建...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 

    <span class="token comment">// 判断读管道是否存在，不存在则创建</span>
    ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2不存在，创建...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mkfifo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 创建进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token comment">// 打开写管道</span>
        <span class="token comment">// 打开一次，否则系统可能会崩</span>
        <span class="token keyword">int</span> fdw <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;fifo2&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从键盘读取输入</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatB]please input: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>fdw<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清空数组</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fdw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token comment">// 打开读管道</span>
        <span class="token comment">// 打开一次，否则系统可能会崩</span>
        <span class="token keyword">int</span> fdr <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;fifo1&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fdr<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatB]写端断开连接了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[chatB]recv : %s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 清空数组</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fdr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行结果</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211003223202138.png" alt="image-20211003223202138"></p></li><li><p>==存在的问题==：</p><ul><li>乱码</li><li>一个进程结束后，另一个还未结束，需要手动关闭</li></ul></li></ul><h4 id="读写特点总结-1" tabindex="-1"><a class="header-anchor" href="#读写特点总结-1"><span>读写特点总结</span></a></h4><ul><li>读管道 <ul><li>管道中有数据，<code>read</code>返回实际读到的字节数</li><li>管道中无数据： <ul><li>管道写端被全部关闭，<code>read</code>返回0，（相当于读到文件末尾）</li><li>写端没有全部被关闭，<code> read</code>阻塞等待</li></ul></li></ul></li><li>写管道 <ul><li>管道读端被全部关闭，进行异常终止（收到一个<code>SIGPIP</code>信号）</li><li>管道读端没有全部关闭： <ul><li>管道已经满了，<code>write</code>会阻塞</li><li>管道没有满，<code>write</code>将数据写入，并返回实际写入的字节数</li></ul></li></ul></li></ul><h2 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射"><span>内存映射</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><ul><li><p><code>内存映射（Memory-mapped I/O）</code>是将<strong>磁盘文件的数据映射到内存</strong>，用户通过修改内存就能修改磁盘文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004093620731.png" alt="image-20211004093620731"></p></li><li><p>内存映射相关系统调用，使用<code>man 2 mmap</code>查看帮助</p><ul><li><code>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);</code><ul><li>功能：将一个文件或者设备的数据映射到内存中</li><li>参数 <ul><li><code>addr</code>：设置为 NULL时, 由内核指定（推荐做法）</li><li><code>length</code> : 要映射的数据的长度，这个值<strong>不能为0。建议使用文件的长度</strong>，获取文件的长度：<code>stat </code>，<code>lseek</code></li><li><code>prot</code> : 对申请的内存映射区的操作权限 <ul><li><code>PROT_EXEC</code> ：可执行的权限</li><li><code>PROT_READ</code> ：读权限</li><li><code>PROT_WRITE</code> ：写权限</li><li><code>PROT_NONE</code> ：没有权限</li></ul></li><li><code>flags</code><ul><li><code>MAP_SHARED</code> : 映射区的数据会自动和磁盘文件进行同步，进程间通信，必须要设置这个选项</li><li><code>MAP_PRIVATE</code> ：不同步，内存映射区的数据改变了，对原来的文件不会修改，会重新创建一个新的文件。（<code>copy on write</code>）</li></ul></li><li><code>fd</code>: 需要映射的那个文件的文件描述符，通过<code>open</code>得到，<code>open</code>的是一个磁盘文件</li><li><code>offset</code>：偏移量，一般进行特殊指定（指定为0即可），如果使用必须指定的是 <code>4k</code> 的整数倍，0表示不偏移</li></ul></li><li>返回值：返回创建的内存的首地址。失败返回<code>MAP_FAILED(即(void *) -1)</code></li></ul></li><li><code>int munmap(void *addr, size_t length);</code><ul><li>功能：释放内存映射</li><li>参数 <ul><li><code>addr</code> : 要释放的内存的首地址</li><li><code>length</code> : 要释放的内存的大小，要和<code>mmap</code>函数中的length参数的值一样</li></ul></li></ul></li></ul></li></ul><h3 id="进程间通信种类" tabindex="-1"><a class="header-anchor" href="#进程间通信种类"><span>进程间通信种类</span></a></h3><ul><li>有关系的进程（父子进程） <ul><li>还没有子进程的时候，通过唯一的父进程，先创建内存映射区</li><li>有了内存映射区以后，创建子进程</li><li>父子进程共享创建的内存映射区</li></ul></li><li>没有关系的进程间通信 <ul><li>准备一个大小不是0的磁盘文件</li><li>进程1 通过磁盘文件创建内存映射区，得到一个操作这块内存的指针</li><li>进程2 通过磁盘文件创建内存映射区，得到一个操作这块内存的指针</li><li>使用内存映射区通信</li></ul></li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><p>要操作映射内存，<strong>必须要有读的权限</strong>，即权限为<code>PROT_READ</code>或<code>PROT_READ|PROT_WRITE</code></p></li><li><p>在使用<strong>内存映射</strong>通信时，使用文件的大小不能为0，<strong><code>open</code>指定的权限不能和<code>prot</code>参数有冲突</strong></p><table><thead><tr><th style="text-align:center;"><code>prot</code></th><th style="text-align:center;"><code>open</code></th></tr></thead><tbody><tr><td style="text-align:center;"><code>PROT_READ</code></td><td style="text-align:center;"><code>O_RDONLY</code> 或<code>O_RDWR</code></td></tr><tr><td style="text-align:center;">\`PROT_READ</td><td style="text-align:center;">PROT_WRITE\`</td></tr></tbody></table></li><li><p>内存映射区通信，是非阻塞</p></li><li><p>一个文件对应一个内存映射区</p></li><li><p>如果对<code>mmap</code>的返回值(<code>ptr</code>)做<code>++操作(ptr++)</code>, <code>munmap</code>是否能够成功?</p><ul><li>不能成功，因为回收资源时，需要传递指针，如果变化，将会回收失败</li></ul></li><li><p>如果<code>open</code>时<code>O_RDONLY</code>, <code>mmap</code>时<code>prot</code>参数指定<code>PROT_READ | PROT_WRITE</code>会怎样?</p><ul><li>错误，返回<code>MAP_FAILED</code>，<code>open()</code>函数中的权限建议和<code>prot</code>参数的权限保持一致</li></ul></li><li><p>如果文件偏移量为1000会怎样?</p><ul><li>偏移量必须是<code>4K</code>的整数倍，返回<code>MAP_FAILED</code></li></ul></li><li><p><code>mmap</code>什么情况下会调用失败?</p><ul><li>第二个参数：length = 0</li><li>第三个参数：<code>prot</code><ul><li>只指定写权限</li><li><code>prot</code>和<code>open()</code>两者的权限不匹配</li></ul></li></ul></li><li><p>可以open的时候<code>O_CREAT</code>一个新文件来创建映射区吗?</p><ul><li>可以的，但是创建的文件的大小如果为0的话，肯定不行(因为<code>mmap</code>调用时，长度不允许为0)</li></ul></li><li><p><code>mmap</code>后关闭文件描述符，对<code>mmap</code>映射有没有影响？</p><ul><li>映射区还存在，创建映射区的<code>fd</code>被关闭，没有任何影响</li></ul></li><li><p>对<code>ptr</code>越界操作会怎样？</p><ul><li>越界操作操作的是非法的内存 -&gt; 段错误</li></ul></li></ul><h3 id="实例-父子进程通信" tabindex="-1"><a class="header-anchor" href="#实例-父子进程通信"><span>实例：父子进程通信</span></a></h3><ul><li><p>思路</p><ol><li>打开指定文件并获取文件长度</li><li>创建内存映射区</li><li>父子进程功能，父进程负责收数据，子进程负责发数据</li><li>回收资源</li></ol></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 打开指定文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;ipc.txt&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取给定文件长度</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建内存映射区</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mmap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建子进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程，用于读取数据</span>
        <span class="token comment">// 回收子进程</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 接收数据并打印</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 类型需要强转</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程，用于发送数据</span>
        <span class="token comment">// 类型需要强转</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">&quot;hello, i am child process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭内存映射区</span>
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭文件</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意：程序执行后，文件大小不改变，那么子进程写入的数据会被截断，==原因未知==</p><ul><li><p>执行前</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004111150651.png" alt="image-20211004111150651"></p></li><li><p>执行后</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004111241118.png" alt="image-20211004111241118"></p></li></ul></li></ul><h3 id="实例-文件拷贝" tabindex="-1"><a class="header-anchor" href="#实例-文件拷贝"><span>实例：文件拷贝</span></a></h3><ul><li><p>思路</p><ol><li>需要两个文件，一个是有内容的文件（待拷贝文件），一个是空文件</li><li>由于有两个文件，需要两个内存映射区</li><li>然后将文件A的内存映射区内容拷贝给文件B的内存映射区</li><li>回收资源</li></ol></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 打开源文件，获取文件长度并创建对应内存映射区</span>
    <span class="token keyword">int</span> fdSource <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;source.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fdSource<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptrSource <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fdSource<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptrSource <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mmap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 打开目标文件，并创建对应内存映射区</span>
    <span class="token keyword">int</span> fdTarget <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;target.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于目标文件是通过创建得到，所以需要扩展长度与源文件保持一致</span>
    <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&quot;target.txt&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果不加，扩展可能失败（保险起见）</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fdTarget<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptrTarget <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fdTarget<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptrTarget <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mmap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 内存拷贝</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptrTarget<span class="token punctuation">,</span> ptrSource<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 回收资源</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fdTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fdSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptrTarget<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptrSource<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><ul><li><p>执行前</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004144251533.png" alt="image-20211004144251533"></p></li><li><p>执行后</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004144319921.png" alt="image-20211004144319921"></p></li></ul></li></ul><h3 id="实例-匿名内存映射" tabindex="-1"><a class="header-anchor" href="#实例-匿名内存映射"><span>实例：匿名内存映射</span></a></h3><ul><li><p>思路</p><ol><li>匿名内存映射不存在文件实体，那么只能通过父子进程实现</li><li>父子进程操作同一块区域，重点在于内存映射区在创建时新增flags参数<code>MAP_ANONYMOUS</code></li><li>父进程读，子进程写</li></ol></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;mmap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">&quot;i am a message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 释放资源</span>
    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>output</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211004145355131.png" alt="image-20211004145355131"></p></li></ul><h1 id="进程间通信之信号" tabindex="-1"><a class="header-anchor" href="#进程间通信之信号"><span>进程间通信之信号</span></a></h1><h2 id="基本概念-3" tabindex="-1"><a class="header-anchor" href="#基本概念-3"><span>基本概念</span></a></h2><ul><li><p>信号是 Linux 进程间通信的最古老的方式之一，是事件发生时对进程的通知机制，有时也称之为软件中断，它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式。信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件</p></li><li><p>发往进程的诸多信号，通常都是源于内核。引发内核为进程产生信号的各类事件如下</p><ul><li>对于前台进程，用户可以通过输入特殊的终端字符来给它发送信号。比如输入 <code>Ctrl+C</code> 通常会给进程发送一个中断信号</li><li>硬件发生异常，即硬件检测到一个错误条件并通知内核，随即再由内核发送相应信号给相关进程。比如执行一条异常的机器语言指令，诸如被 0 除，或者引用了无法访问的内存区域</li><li>系统状态变化，比如 alarm 定时器到期将引起 <code>SIGALRM</code> 信号，进程执行的 CPU 时间超限，或者该进程的某个子进程退出</li><li>运行 kill 命令或调用 kill 函数</li></ul></li><li><p>使用信号的两个主要目的是</p><ul><li>让进程知道已经发生了一个特定的事情</li><li>强迫进程执行它自己代码中的信号处理程序</li></ul></li><li><p>信号的特点</p><ul><li>简单</li><li>不能携带大量信息</li><li>满足某个特定条件才发送</li><li>优先级比较高</li></ul></li><li><p>查看系统定义的信号列表：<code>kill –l</code>，前 31 个信号为常规信号，其余为实时信号</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005171111124.png" alt="image-20211005171111124"></p></li></ul><h2 id="信号一览表及特点" tabindex="-1"><a class="header-anchor" href="#信号一览表及特点"><span>信号一览表及特点</span></a></h2><ul><li>可通过<code>man 7 signal</code>查看帮助</li><li>信号的 5 中默认处理动作 <ul><li><code>Term</code>：终止进程</li><li><code>Ign</code>：当前进程忽略掉这个信号</li><li><code>Core</code>：终止进程，并生成一个Core文件</li><li><code>Stop</code>：暂停当前进程</li><li><code>Cont</code>：继续执行当前被暂停的进程</li></ul></li><li>信号的几种状态：<code>产生</code>、<code>未决</code>、<code>递达</code></li><li><code>SIGKILL</code> 和 <code>SIGSTOP</code> 信号不能被捕捉、阻塞或者忽略，只能执行默认动作</li><li>红色标记代表需要熟练掌握</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005171208319.png" alt="image-20211005171208319"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005171224233.png" alt="image-20211005171224233"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005171241921.png" alt="image-20211005171241921"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005171255782.png" alt="image-20211005171255782"></p><h2 id="信号相关的函数" tabindex="-1"><a class="header-anchor" href="#信号相关的函数"><span>信号相关的函数</span></a></h2><h3 id="core文件生成及调试" tabindex="-1"><a class="header-anchor" href="#core文件生成及调试"><span>core文件生成及调试</span></a></h3><ul><li><p>当进程异常终止时，会生成<code>core</code>文件（需要进行相应设置），可以通过<code>gdb</code>调试查看错误，调试以下程序</p></li><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;core test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成调试<code>core</code>文件需要做以下几步</p><ol><li><p>使用<code>ulimit -a</code>查看资源上限</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005172308679.png" alt="image-20211005172308679"></p></li><li><p>修改<code>core size</code>：<code>ulimit -c core-size</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005172341481.png" alt="image-20211005172341481"></p></li><li><p>在编译运行程序时加上<code>-g</code>选项使得能够被<code>gdb</code>调试，运行后生成<code>core</code>文件</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005172805479.png" alt="image-20211005172805479"></p></li><li><p>调试<code>core</code>程序：<code>gdb test</code>进入<code>gdb</code>终端，使用<code>core-file core</code>可以查看<code>core</code>定位错误</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005172951704.png" alt="image-20211005172951704"></p></li></ol></li></ul><h3 id="kill-raise-abort" tabindex="-1"><a class="header-anchor" href="#kill-raise-abort"><span>kill &amp; raise &amp; abort</span></a></h3><ul><li><code>int kill(pid_t pid, int sig);</code><ul><li>使用<code>man 2 kill</code>查看帮助</li><li>功能：给<strong>任何的进程或者进程组</strong><code>pid</code>，发送<strong>任何的信号</strong> <code>sig</code></li><li>参数 <ul><li><code>pid</code><ul><li><code>&gt; 0</code> : 将信号发送给指定的进程</li><li><code>= 0</code> : 将信号发送给当前的进程组</li><li><code>= -1</code> : 将信号发送给每一个有权限接收这个信号的进程</li><li><code>&lt; -1</code> : 这个<code>pid=某个进程组的ID取反</code></li></ul></li><li><code>sig</code> : 需要发送的信号的编号或者是宏值，0表示不发送任何信号</li></ul></li><li>返回值：0成功，-1失败</li></ul></li><li><code>int raise(int sig);</code><ul><li>使用<code>man 3 raise</code>查看帮助</li><li>功能：给<strong>当前进程</strong>发送信号</li><li>参数：<code>sig</code> : 要发送的信号</li><li>返回值：0成功，非0失败</li></ul></li><li><code>void abort(void);</code><ul><li>使用<code>man 3 abort</code>查看帮助</li><li>功能： 发送<code>SIGABRT</code>信号给当前的进程，<strong>杀死当前进程</strong></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child process\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;kill child process now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005190402848.png" alt="image-20211005190402848"></p><h3 id="alarm-setitimer" tabindex="-1"><a class="header-anchor" href="#alarm-setitimer"><span>alarm &amp; setitimer</span></a></h3><ul><li><p>区别：<code>alarm</code>只能定一次时，<code>setitimer</code>可以周期性定时</p></li><li><p><code>unsigned int alarm(unsigned int seconds);</code></p><ul><li>使用<code>man 2 alarm</code>查看帮助</li><li>功能：设置定时器（闹钟）。函数调用，开始倒计时，当倒计时为0的时候，函数会给当前的进程发送一个信号：<code>SIGALARM</code></li><li>参数：<code>seconds</code>，倒计时的时长，单位：秒。如果参数为0，定时器无效（不进行倒计时，不发信号）</li><li>取消一个定时器，通过<code>alarm(0)</code></li><li>返回值 <ul><li>之前没有定时器，返回0</li><li>之前有定时器，返回之前的定时器剩余的时间</li></ul></li></ul></li><li><p><code>SIGALARM</code> ：默认终止<strong>当前的进程</strong>，每一个进程都有且只有唯一的一个定时器</p></li><li><p>定时器，与进程的状态无关（自然定时法）。无论进程处于什么状态，alarm都会计时，即<strong>函数不阻塞</strong></p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;seconds = %d\\n&quot;</span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    seconds <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不阻塞</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;seconds = %d\\n&quot;</span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211005200623331.png" alt="image-20211005200623331"></p><ul><li><p><code>int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value);</code></p><ul><li>使用<code>man 2 setitimer</code>查看帮助</li><li>功能：设置定时器（闹钟）。可以替代alarm函数。精度微妙us，可以实现周期性定时</li><li>参数 <ul><li><code>which</code> : 定时器以什么时间计时 <ul><li><code>ITIMER_REAL</code>: 真实时间，时间到达，发送 <code>SIGALRM</code> (常用)</li><li><code>ITIMER_VIRTUAL</code>: 用户时间，时间到达，发送 <code>SIGVTALRM</code></li><li><code>ITIMER_PROF</code>: 以该进程在用户态和内核态下所消耗的时间来计算，时间到达，发送 <code>SIGPROF</code></li></ul></li><li><code>new_value</code>: 设置定时器的属性</li><li><code>old_value</code> ：记录上一次的定时的时间参数，一般不使用，指定NULL</li></ul></li><li>返回值：成功 0，失败 -1 并设置错误号</li></ul></li><li><p><code>struct itimerval</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token punctuation">{</span>      <span class="token comment">// 定时器的结构体</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_interval<span class="token punctuation">;</span>  <span class="token comment">// 每个阶段的时间，间隔时间</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_value<span class="token punctuation">;</span>     <span class="token comment">// 延迟多长时间执行定时器</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">{</span>        <span class="token comment">// 时间的结构体</span>
    <span class="token class-name">time_t</span>      tv_sec<span class="token punctuation">;</span>     <span class="token comment">//  秒数     </span>
    <span class="token class-name">suseconds_t</span> tv_usec<span class="token punctuation">;</span>    <span class="token comment">//  微秒    </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 过it_value秒后，每隔it_interval秒定时一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现<strong>过3秒以后，每隔2秒钟定时一次</strong>=&gt;因为没有<strong>信号捕捉</strong>，所以还没有实现这样的效果</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token comment">// 过3秒以后，每隔2秒钟定时一次</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> new_value<span class="token punctuation">;</span>

    <span class="token comment">// 设置间隔的时间</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置延迟的时间,3秒之后开始第一次定时</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_value<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非阻塞的</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;定时器开始了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;setitimer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006091442998.png" alt="image-20211006091442998"></p></li></ul><h2 id="信号捕捉函数" tabindex="-1"><a class="header-anchor" href="#信号捕捉函数"><span>信号捕捉函数</span></a></h2><h3 id="signal" tabindex="-1"><a class="header-anchor" href="#signal"><span>signal</span></a></h3><ul><li><p><code>sighandler_t signal(int signum, sighandler_t handler);</code></p><ul><li>使用<code>man 2 signal</code>查看帮助</li><li>功能：设置某个信号的捕捉行为</li><li>参数 <ul><li><code>signum</code>: 要捕捉的信号</li><li><code>handler</code>: 捕捉到信号要如何处理 <ul><li><code>SIG_IGN</code> ： 忽略信号</li><li><code>SIG_DFL</code> ： 使用信号默认的行为</li><li><code>自定义回调函数</code></li></ul></li><li>返回值 <ul><li>成功，返回上一次注册的信号处理函数的地址。第一次调用返回NULL</li><li>失败，返回SIG_ERR，设置错误号</li><li>注意：返回值定义在宏<code>__USE_GNU</code>中，需要指定或者直接在程序中使用<code>typedef __sighandler_t sighandler_t;</code></li></ul></li><li><code>SIGKILL</code>和<code>SIGSTOP</code>不能被捕捉，不能被忽略</li></ul></li></ul></li><li><p>完善<strong>过3秒以后，每隔2秒钟定时一次的定时器功能</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">myalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;捕捉到了信号的编号是：%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxx\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 过3秒以后，每隔2秒钟定时一次</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>

    <span class="token comment">// 注册信号捕捉</span>
    <span class="token comment">// signal(SIGALRM, SIG_IGN);</span>
    <span class="token comment">// signal(SIGALRM, SIG_DFL);</span>
    <span class="token comment">// void (*sighandler_t)(int); 函数指针，int类型的参数表示捕捉到的信号的值</span>
    <span class="token comment">// 捕捉的信号右定时器发出</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> myalarm<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> new_value<span class="token punctuation">;</span>

    <span class="token comment">// 设置间隔的时间</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置延迟的时间,3秒之后开始第一次定时</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_value<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非阻塞的</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;定时器开始了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;setitimer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006100149339.png" alt="image-20211006100149339"></p></li></ul><h3 id="sigaction" tabindex="-1"><a class="header-anchor" href="#sigaction"><span>sigaction</span></a></h3><ul><li><p><code>int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);</code></p><ul><li>使用<code>man 2 sigaction</code>查看帮助</li><li>功能：检查或者改变信号的处理，即信号捕捉</li><li>参数 <ul><li><code>signum</code> : 需要捕捉的信号的编号或者宏值（信号的名称）</li><li><code>act</code> ：捕捉到信号之后的处理动作</li><li><code>oldact</code> : 上一次对信号捕捉相关的设置，一般不使用，设置为NULL</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><p><code>struct sigaction</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token punctuation">{</span>
    <span class="token comment">// 函数指针，指向的函数就是信号捕捉到之后的处理函数</span>
    <span class="token keyword">void</span>     <span class="token punctuation">(</span><span class="token operator">*</span>sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 不常用</span>
    <span class="token keyword">void</span>     <span class="token punctuation">(</span><span class="token operator">*</span>sa_sigaction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 临时阻塞信号集，在信号捕捉函数执行过程中，临时阻塞某些信号。</span>
    <span class="token class-name">sigset_t</span>   sa_mask<span class="token punctuation">;</span>
    <span class="token comment">// 使用哪一个信号处理对捕捉到的信号进行处理</span>
    <span class="token comment">// 这个值可以是0，表示使用sa_handler,也可以是SA_SIGINFO表示使用sa_sigaction</span>
    <span class="token keyword">int</span>        sa_flags<span class="token punctuation">;</span>
    <span class="token comment">// 被废弃掉了</span>
    <span class="token keyword">void</span>     <span class="token punctuation">(</span><span class="token operator">*</span>sa_restorer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">myalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;捕捉到了信号的编号是：%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxx\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 过3秒以后，每隔2秒钟定时一次</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> myalarm<span class="token punctuation">;</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清空临时阻塞信号集</span>
   
    <span class="token comment">// 注册信号捕捉</span>
    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> new_value<span class="token punctuation">;</span>

    <span class="token comment">// 设置间隔的时间</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置延迟的时间,3秒之后开始第一次定时</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    new_value<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_value<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非阻塞的</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;定时器开始了...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;setitimer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getchar();</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006234920154.png" alt="image-20211006234920154"></p><h3 id="signal和sigaction区别" tabindex="-1"><a class="header-anchor" href="#signal和sigaction区别"><span>signal和sigaction区别</span></a></h3><ul><li>参数区别</li><li>版本区别，<code>signal</code>在不同版本Linux中，行为不一致，所以推荐使用<code>sigaction</code>（<code>ubutun</code>下两者一致）</li></ul><h3 id="内核实现信号捕捉的过程" tabindex="-1"><a class="header-anchor" href="#内核实现信号捕捉的过程"><span>内核实现信号捕捉的过程</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006235431837.png" alt="image-20211006235431837"></p><h3 id="未解决" tabindex="-1"><a class="header-anchor" href="#未解决"><span>==未解决==</span></a></h3><ul><li><code>signal</code>中可以使用一个<code>getchar()</code>阻塞信号，而<code>sigaction</code>中调用几次回调函数，就要使用多少个<code>getchar()</code></li></ul><h2 id="信号集" tabindex="-1"><a class="header-anchor" href="#信号集"><span>信号集</span></a></h2><h3 id="基本概念-4" tabindex="-1"><a class="header-anchor" href="#基本概念-4"><span>基本概念</span></a></h3><ul><li><p>使用<code>man 3 sigset</code>查看帮助</p></li><li><p>许多信号相关的系统调用都需要能表示一组不同的信号，多个信号可使用一个称之为信号集的数据结构来表示，其系统数据类型为 <code>sigset_t</code></p></li><li><p>在 PCB 中有两个非常重要的信号集。一个称之为 <code>阻塞信号集</code> ，另一个称之为<code>未决信号集</code>。这两个信号集都是<strong>内核使用位图机制来实现</strong>的。但操作系统不允许我们直接对这两个信号集进行位操作。而需自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改</p></li><li><p>信号的 <code>未决</code> 是一种状态，指的是<strong>从信号的产生到信号被处理前的这一段时间</strong></p></li><li><p>信号的 <code>阻塞</code> 是一个开关动作，指的是<strong>阻止信号被处理，但不是阻止信号产生</strong>。信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感的操作</p></li></ul><h3 id="阻塞信号集与非阻塞信号集说明" tabindex="-1"><a class="header-anchor" href="#阻塞信号集与非阻塞信号集说明"><span>阻塞信号集与非阻塞信号集说明</span></a></h3><ol><li>用户通过键盘 <code>Ctrl + C</code>, 产生2号信号 <code>SIGINT</code> (信号被创建)</li><li>信号产生但是没有被处理 （未决） <ul><li>在内核中将所有的没有被处理的信号存储在一个集合中 （未决信号集）</li><li><code>SIGINT</code>信号状态被存储在第二个标志位上 <ul><li>这个标志位的值为0， 说明信号不是未决状态</li><li>这个标志位的值为1， 说明信号处于未决状态</li></ul></li></ul></li><li>这个未决状态的信号，需要被处理，处理之前需要和另一个信号集（阻塞信号集），进行比较 <ul><li>阻塞信号集默认不阻塞任何的信号</li><li>如果想要阻塞某些信号需要用户调用系统的API</li></ul></li><li>在处理的时候和阻塞信号集中的标志位进行查询，看是不是对该信号设置阻塞了 <ul><li>如果没有阻塞，这个信号就被处理</li><li>如果阻塞了，这个信号就继续处于未决状态，直到阻塞解除，这个信号就被处理</li></ul></li></ol><h3 id="操作自定义信号集函数-sigemptyset等" tabindex="-1"><a class="header-anchor" href="#操作自定义信号集函数-sigemptyset等"><span>操作自定义信号集函数(sigemptyset等)</span></a></h3><ul><li>使用<code>man 3 sigemptyset</code>查看帮助</li><li><code>int sigemptyset(sigset_t *set);</code><ul><li>功能：清空信号集中的数据，将信号集中的所有的标志位置为0</li><li>参数：<code>set</code>，传出参数，需要操作的信号集</li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><code>int sigfillset(sigset_t *set);</code><ul><li>功能：将信号集中的所有的标志位置为1</li><li>参数：<code>set</code>，传出参数，需要操作的信号集</li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><code>int sigaddset(sigset_t *set, int signum);</code><ul><li>功能：设置信号集中的某一个信号对应的标志位为1，表示阻塞这个信号</li><li>参数 <ul><li><code>set</code>：传出参数，需要操作的信号集</li><li><code>signum</code>：需要设置阻塞的那个信号</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><code>int sigdelset(sigset_t *set, int signum);</code><ul><li>功能：设置信号集中的某一个信号对应的标志位为0，表示不阻塞这个信号</li><li>参数 <ul><li><code>set</code>：传出参数，需要操作的信号集</li><li><code>signum</code>：需要设置不阻塞的那个信号</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><code>int sigismember(const sigset_t *set, int signum);</code><ul><li>功能：判断某个信号是否阻塞</li><li>参数 <ul><li><code>set</code>：传入参数，需要操作的信号集</li><li><code>signum</code>：需要判断的那个信号</li></ul></li><li>返回值 <ul><li>1 ： <code>signum</code>被阻塞</li><li>0 ： <code>signum</code>不阻塞</li><li>-1 ： 失败</li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个信号集</span>
    <span class="token class-name">sigset_t</span> set<span class="token punctuation">;</span>

    <span class="token comment">// 清空信号集的内容</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断 SIGINT 是否在信号集 set 里</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGINT 不阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGINT 阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 添加几个信号到信号集中</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断SIGINT是否在信号集中</span>
    ret <span class="token operator">=</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGINT 不阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGINT 阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断SIGQUIT是否在信号集中</span>
    ret <span class="token operator">=</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGQUIT 不阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGQUIT 阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 从信号集中删除一个信号</span>
    <span class="token function">sigdelset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断SIGQUIT是否在信号集中</span>
    ret <span class="token operator">=</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGQUIT 不阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SIGQUIT 阻塞\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006123209575.png" alt="image-20211006123209575"></p><h3 id="操作内核信号集函数-sigprocmask-sigpending" tabindex="-1"><a class="header-anchor" href="#操作内核信号集函数-sigprocmask-sigpending"><span>操作内核信号集函数(sigprocmask &amp; sigpending)</span></a></h3><ul><li><code>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);</code><ul><li>使用<code>man 2 sigprocmask</code>查看帮助</li><li>功能：将自定义信号集中的数据设置到内核中（设置阻塞，解除阻塞，替换）</li><li>参数 <ul><li><code>how</code> : 如何对内核阻塞信号集进行处理 <ul><li><code>SIG_BLOCK</code>: 将用户设置的阻塞信号集添加到内核中，内核中原来的数据不变。假设内核中默认的阻塞信号集是mask， 相当于<code>mask | set</code></li><li><code>SIG_UNBLOCK</code>: 根据用户设置的数据，对内核中的数据进行解除阻塞。相当于<code>mask &amp;= ~set</code></li><li><code>SIG_SETMASK</code>：覆盖内核中原来的值</li></ul></li><li><code>set</code> ：已经初始化好的用户自定义的信号集</li><li><code>oldset</code> : 保存设置之前的内核中的阻塞信号集的状态，一般不使用，设置为 NULL 即可</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul></li><li><code>int sigpending(sigset_t *set);</code><ul><li>使用<code>man 2 sigpending</code>查看帮助</li><li>功能：获取内核中的未决信号集</li><li>参数：set，传出参数，保存的是内核中的未决信号集中的信息</li><li>返回值：成功返回0， 失败返回-1</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 设置自定义信号集</span>
    <span class="token class-name">sigset_t</span> set<span class="token punctuation">;</span>
    <span class="token comment">// 清空信号集</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置2 3号信号阻塞</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改内核中的阻塞信号集</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环获取当前的未决信号集的数据</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计数，用以退出循环</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">sigset_t</span> pendingset<span class="token punctuation">;</span>
        <span class="token comment">// 清空</span>
        <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendingset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取当前的未决信号集的数据</span>
        <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendingset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历前32位</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendingset<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendingset<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sigismember&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解除阻塞</span>
            <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_UNBLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006131223858.png" alt="image-20211006131223858"></p><h2 id="sigchld信号" tabindex="-1"><a class="header-anchor" href="#sigchld信号"><span>SIGCHLD信号</span></a></h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h3><ul><li>作用：解决<strong>僵尸进程问题</strong>，能够在不阻塞父进程的情况下，回收子进程的资源</li></ul><h3 id="实例-僵尸问题解决" tabindex="-1"><a class="header-anchor" href="#实例-僵尸问题解决"><span>实例：僵尸问题解决</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">myalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;捕捉到了信号的编号是：%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回收子进程PCB的资源</span>
    <span class="token comment">// 因为可能多个子进程同时死了，所以使用while循环</span>
    <span class="token comment">// 不使用wait是因为会造成阻塞，父进程不能继续</span>
    <span class="token comment">// 使用waitpid可以设置非阻塞</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> WNOHANG<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回收一个子进程</span>
           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child die , pid = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 说明还有子进程活着</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 没有子进程</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 提前设置好阻塞信号集，阻塞SIGCHLD，因为有可能子进程很快结束，父进程还没有注册完信号捕捉</span>
    <span class="token class-name">sigset_t</span> set<span class="token punctuation">;</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
    <span class="token comment">// 创建一些子进程</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果是子进程，不在作为父进程继续创建子进程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 子进程先结束，父进程循环=&gt;产生僵尸进程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父进程</span>
        <span class="token comment">// 使用sigaction捕捉子进程死亡时发送的SIGCHLD信号</span>
        <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
        act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> myalarm<span class="token punctuation">;</span>
        <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册完信号捕捉以后，解除阻塞</span>
        <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_UNBLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;parent process : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子进程</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child process : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ul><li><p>可能会出现段错误（不一定能复现）</p><ul><li><p>原因：在捕获信号注册前，子进程已经执行完</p><blockquote><p>如果从开始注册信号到注册成功这段时间里，有n个SIGCHID信号产生的话，那么第一个产生的SIGCHID会抢先将未决位置为1，余下的n-1个SIGCHID被丢弃，然后当阻塞解除之后，信号处理函数发现这时候对应信号的未决位为1，继而执行函数处理该信号，处理函数中的while循环顺带将其他n-1子进程也一网打尽了，在这期间未决位的状态只经历了两次变化，即0-&gt;1-&gt;0</p></blockquote></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211010104606565.png" alt="image-20211010104606565"></p></li><li><p>捕捉一次可能会回收多个子进程</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211010105106921.png" alt="image-20211010105106921"></p></li></ul><h1 id="进程间通信之共享内存" tabindex="-1"><a class="header-anchor" href="#进程间通信之共享内存"><span>进程间通信之共享内存</span></a></h1><h2 id="基本概念-5" tabindex="-1"><a class="header-anchor" href="#基本概念-5"><span>基本概念</span></a></h2><ul><li><strong>共享内存允许两个或者多个进程共享物理内存的同一块区域（通常被称为段）</strong>。由于一个共享内存段会称为一个进程用户空间的一部分，因此这种 <code>IPC</code> 机制无需内核介入。所有需要做的就是让一个进程将数据复制进共享内存中，并且这部分数据会对其他所有共享同一个段的进程可用</li><li>与管道等要求发送进程将数据从用户空间的缓冲区复制进内核内存和接收进程将数据从内核内存复制进用户空间的缓冲区的做法相比，这种 <code>IPC</code> 技术的速度更快</li></ul><h2 id="共享内存使用步骤" tabindex="-1"><a class="header-anchor" href="#共享内存使用步骤"><span>共享内存使用步骤</span></a></h2><ol><li>调用 <code>shmget()</code> 创建一个新共享内存段或取得一个既有共享内存段的标识符（即由其他进程创建的共享内存段）。这个调用将返回后续调用中需要用到的共享内存标识符</li><li>使用 <code>shmat()</code>来附上共享内存段，即使该段成为调用进程的虚拟内存的一部分</li><li>此刻在程序中可以像对待其他可用内存那样对待这个共享内存段。为引用这块共享内存，程序需要使用由 <code>shmat()</code> 调用返回的 <code>addr</code> 值，它是一个指向进程的虚拟地址空间中该共享内存段的起点的指针</li><li>调用 <code>shmdt()</code> 来分离共享内存段。在这个调用之后，进程就无法再引用这块共享内存了。这一步是可选的，并且在进程终止时会自动完成这一步</li><li>调用 <code>shmctl()</code> 来删除共享内存段。只有当当前所有附加内存段的进程都与之分离之后内存段才会销毁。只有一个进程需要执行这一步</li></ol><h2 id="共享内存操作函数" tabindex="-1"><a class="header-anchor" href="#共享内存操作函数"><span>共享内存操作函数</span></a></h2><ul><li><p><code>int shmget(key_t key, size_t size, int shmflg);</code></p><ul><li>使用<code>man 2 shmget</code>查看帮助</li><li>功能：创建一个新的共享内存段（新创建的内存段中的数据都会被初始化为0），或者获取一个既有的共享内存段的标识</li><li>参数 <ul><li><code>key</code>：<code>key_t</code>类型是一个整形，通过这个找到或者创建一个共享内存。一般使用<strong>16进制</strong>表示，非0值</li><li><code>size</code>：共享内存的大小</li><li><code>shmflg</code>：属性 <ul><li>访问权限</li><li>附加属性：创建/判断共享内存是不是存在 <ul><li>创建：<code>IPC_CREAT</code></li><li>判断共享内存是否存在： <code>IPC_EXCL</code> , 需要和<code>IPC_CREAT</code>一起使用，即<code>IPC_CREAT | IPC_EXCL | 0664</code></li></ul></li></ul></li></ul></li><li>返回值 <ul><li>失败：-1 并设置错误号</li><li>成功：&gt;0 返回共享内存的引用的ID，后面操作共享内存都是通过这个值</li></ul></li></ul></li><li><p><code>void *shmat(int shmid, const void *shmaddr, int shmflg);</code></p><ul><li>使用<code>man 2 shmat</code>查看帮助</li><li>功能：和当前的进程进行关联</li><li>参数 <ul><li><code>shmid</code> : 共享内存的标识（ID），由<code>shmget</code>返回值获取</li><li><code>shmaddr</code>: 申请的共享内存的起始地址，设置为NULL，表示由内核指定</li><li><code>shmflg</code> : 对共享内存的操作 <ul><li>读 ： <code>SHM_RDONLY</code>，必须要有读权限</li><li>读写： 指定为0即为有读写权限</li></ul></li></ul></li><li>返回值：成功：返回共享内存的首（起始）地址。 失败<code>(void *) -1</code></li></ul></li><li><p><code>int shmdt(const void *shmaddr);</code></p><ul><li>使用<code>man 2 shmdt</code>查看帮助</li><li>功能：解除当前进程和共享内存的关联</li><li>参数：<code>shmaddr</code>：共享内存的首地址</li><li>返回值：成功 0， 失败 -1</li></ul></li><li><p><code>int shmctl(int shmid, int cmd, struct shmid_ds *buf);</code></p><ul><li>使用<code>man 2 shmctl</code>查看帮助</li><li>功能：对共享内存进行操作。删除共享内存，共享内存要删除才会消失，创建共享内存的进程被销毁了对共享内存是没有任何影响</li><li>参数 <ul><li><code>shmid</code>：共享内存的ID</li><li><code>cmd</code> : 要做的操作 <ul><li><code>IPC_STAT</code>：获取共享内存的当前的状态</li><li><code>IPC_SET</code>：设置共享内存的状态</li><li><code>IPC_RMID</code>：标记共享内存被销毁</li></ul></li><li>buf：需要设置或者获取的共享内存的属性信息 <ul><li><code>IPC_STAT</code>：<code>buf</code>存储数据</li><li><code>IPC_SET</code>：<code>buf</code>中需要初始化数据，设置到内核中</li><li><code>IPC_RMID</code>：没有用，设置为NULL</li></ul></li></ul></li></ul></li><li><p><code>key_t ftok(const char *pathname, int proj_id);</code></p><ul><li>使用<code>man 3 ftok</code>查看帮助</li><li>功能：根据指定的路径名，和int值，生成一个共享内存的key</li><li>参数 <ul><li><code>pathname</code>：指定一个<strong>存在的路径</strong></li><li><code>proj_id</code>：int类型的值，但是系统调用只会使用其中的1个字节，范围 ： 0-255 一般指定一个字符 <code>&#39;a&#39;</code></li></ul></li><li>返回值：<code>shmget</code>中用到的<code>key</code></li></ul></li></ul><h2 id="共享内存操作命令" tabindex="-1"><a class="header-anchor" href="#共享内存操作命令"><span>共享内存操作命令</span></a></h2><h3 id="ipcs" tabindex="-1"><a class="header-anchor" href="#ipcs"><span>ipcs</span></a></h3><ul><li><code>ipcs -a</code>：打印当前系统中<strong>所有的</strong>进程间通信方式的信息</li><li><code>ipcs -m</code>：打印出<strong>使用共享内存</strong>进行进程间通信的信息</li><li><code>ipcs -q</code>：打印出<strong>使用消息队列</strong>进行进程间通信的信息</li><li><code>ipcs -s</code>：打印出<strong>使用信号</strong>进行进程间通信的信息</li></ul><h3 id="ipcrm" tabindex="-1"><a class="header-anchor" href="#ipcrm"><span>ipcrm</span></a></h3><ul><li><code>ipcrm -M shmkey</code>：移除用<code>shmkey</code>创建的<strong>共享内存段</strong></li><li><code>ipcrm -m shmid</code>：移除用<code>shmid</code>标识的<strong>共享内存段</strong></li><li><code>ipcrm -Q msgkey</code>：移除用<code>msqkey</code>创建的<strong>消息队列</strong></li><li><code>ipcrm -q msqid</code>：移除用<code>msqid</code>标识的<strong>消息队列</strong></li><li><code>ipcrm -S semkey</code>：移除用<code>semkey</code>创建的<strong>信号</strong></li><li><code>ipcrm -s semid</code>：移除用<code>semid</code>标识的<strong>信号</strong></li></ul><h2 id="实例-进程间通信-注意" tabindex="-1"><a class="header-anchor" href="#实例-进程间通信-注意"><span>实例：进程间通信（注意）</span></a></h2><h3 id="写端" tabindex="-1"><a class="header-anchor" href="#写端"><span>写端</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创新新共享内存</span>
    <span class="token comment">// key不能随意指定，比如用key=100时会产生段错误</span>
    <span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 将进程与共享内存关联</span>
    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">shmat</span><span class="token punctuation">(</span>shmId<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 往共享内存中写数据</span>
    <span class="token comment">// 操作内存只能使用memcpy，使用strcpy会产生段错误</span>
    <span class="token comment">// strcpy((char*)addr, &quot;hello, world&quot;);</span>
    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;send : %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 包含结束符&#39;\\0&#39;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 为了程序不被直接停掉，如果停掉，那么共享内存不复存在</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;按任意键继续\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 分离内存段</span>
    <span class="token function">shmdt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 删除共享内存段（标记删除）</span>
    <span class="token function">shmctl</span><span class="token punctuation">(</span>shmId<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读端" tabindex="-1"><a class="header-anchor" href="#读端"><span>读端</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 判断并获取共享内存</span>
    <span class="token comment">// 注意IPC_EXCL只能在创建共享内存时使用</span>
    <span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664);</span>
    <span class="token comment">// 2. 将进程与共享内存关联</span>
    <span class="token keyword">void</span><span class="token operator">*</span> addr <span class="token operator">=</span> <span class="token function">shmat</span><span class="token punctuation">(</span>shmId<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 从共享内存中读数据</span>
    <span class="token comment">// 此时字符串内存即为共享内存内容</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv : %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 为了程序不被直接停掉，如果停掉，那么共享内存不复存在</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;按任意键继续\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 分离内存段</span>
    <span class="token function">shmdt</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 删除共享内存段（标记删除）</span>
    <span class="token function">shmctl</span><span class="token punctuation">(</span>shmId<span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1"><span>注意</span></a></h3><h4 id="虚拟机和实体机" tabindex="-1"><a class="header-anchor" href="#虚拟机和实体机"><span>虚拟机和实体机</span></a></h4><ol><li><p>虚拟机在启动情况下，有默认共享内存，而实体机（服务器）没有</p><ul><li><p>虚拟机</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023212105306.png" alt="image-20211023212105306"></p></li><li><p>实体机</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023212132287.png" alt="image-20211023212132287"></p></li></ul></li></ol><h4 id="执行顺序与代码-注意" tabindex="-1"><a class="header-anchor" href="#执行顺序与代码-注意"><span>执行顺序与代码（注意）</span></a></h4><ol><li><p><strong>先执行读端，再执行写端</strong>，且关键代码如下时，此时<strong>读端读到空数据，写端会先输出内容然后产生段错误</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// write</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// read</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023212353103.png" alt="image-20211023212353103"></p></li><li><p><strong>先执行写端，再执行读端</strong>，且关键代码如下时，此时<strong>写端正常写数据，读端会产生段错误</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// write</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// read</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023212610468.png" alt="image-20211023212610468"></p></li><li><p><strong>先执行读端，再执行写端</strong>，且关键代码如下时，此时<strong>读端产生段错误，写端会先输出内容然后产生段错误且当前key=100（十六进制为64）被占用，按先写后读顺序时，需要手动回收内存，否则不能继续该块内存</strong>，如下图所示</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// write</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// read</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023212851187.png" alt="image-20211023212851187"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023213017484.png" alt="image-20211023213017484"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023213335145.png" alt="image-20211023213335145"></p></li><li><p><strong>先执行写端，再执行读端</strong>，且关键代码如下时，正常执行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// write</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> IPC_EXCL <span class="token operator">|</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// read</span>
<span class="token keyword">int</span> shmId <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023213450784.png" alt="image-20211023213450784"></p></li><li><p>出现的原因</p><ul><li>当先执行读端时，此时共享内存中没有内容或者没有创建</li></ul></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h3><ul><li>操作系统如何知道一块共享内存被多少个进程关联？ <ul><li>共享内存维护了一个结构体<code>struct shmid_ds</code>，这个结构体中有一个成员 <code>shm_nattch</code></li><li><code>shm_nattach</code> 记录了关联的进程个数</li></ul></li><li>可不可以对共享内存进行多次删除 <code>shmctl</code><ul><li>可以，因为执行<code>shmctl</code> 表示<strong>标记删除共享内存（key变为0），不是直接删除</strong>。当和共享内存关联的进程数为0的时候，就真正被删除</li><li>如果一个进程和共享内存取消关联，那么这个进程就不能继续操作这个共享内存</li></ul></li></ul><h3 id="共享内存与内存映射区别" tabindex="-1"><a class="header-anchor" href="#共享内存与内存映射区别"><span>共享内存与内存映射区别</span></a></h3><ul><li><strong>共享内存</strong>可以直接创建，<strong>内存映射</strong>需要磁盘文件（匿名映射除外）</li><li>共享内存效率更高</li><li><strong>共享内存</strong>所有的进程操作的是同一块共享内存，<strong>内存映射</strong>，每个进程在自己的虚拟地址空间中有一个独立的内存</li><li>数据安全 <ul><li>进程突然退出：<strong>共享内存</strong>还存在，<strong>内存映射区</strong>消失</li><li>运行进程的电脑死机(宕机)：<strong>共享内存</strong>中的数据消失，内存映射区的数据也消失 ，但由于磁盘文件中的数据还在，所以<strong>可以说内存映射区的数据还存在</strong></li></ul></li><li>生命周期 <ul><li>共享内存 <ul><li>进程退出时共享内存还在，只会标记删除</li><li>只有当所有的关联的进程数为0或者关机时，才会真正删除</li><li>如果一个进程退出，会自动和共享内存进行取消关联</li></ul></li><li>内存映射区：进程退出，内存映射区销毁</li></ul></li></ul><h1 id="守护进程" tabindex="-1"><a class="header-anchor" href="#守护进程"><span>守护进程</span></a></h1><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识"><span>前置知识</span></a></h2><h3 id="终端" tabindex="-1"><a class="header-anchor" href="#终端"><span>终端</span></a></h3><ul><li>在 <code>UNIX</code> 系统中，用户通过终端登录系统后得到一个 <code>shell</code> 进程，这个终端成为 shell 进程的<code>控制终端（Controlling Terminal）</code>，进程中，控制终端是保存在 PCB 中的信息，而 fork() 会复制 PCB 中的信息，因此由 shell 进程启动的其它进程的控制终端也是这个终端</li><li>默认情况下（没有重定向），每个进程的标准输入、标准输出和标准错误输出都指向控制终端 <ul><li>进程从标准输入读也就是读用户的键盘输入</li><li>进程往标准输出或标准错误输出写也就是输出到显示器上</li></ul></li><li>在控制终端输入一些特殊的控制键可以给前台进程发信号，例如 <code>Ctrl + C</code> 会产生 <code>SIGINT</code> 信号，<code>Ctrl + \\</code> 会产生 <code>SIGQUIT</code> 信号</li></ul><h3 id="进程组" tabindex="-1"><a class="header-anchor" href="#进程组"><span>进程组</span></a></h3><ul><li><strong>进程组</strong>和<strong>会话</strong>在进程之间形成了一种两级层次关系 <ul><li>进程组是一组相关进程的集合，会话是一组相关进程组的集合</li><li>进程组和会话是为支持 shell 作业控制而定义的抽象概念，用户通过 shell 能够交互式地在前台或后台运行命令</li></ul></li><li>进程组由一个或多个共享同一进程组标识符（<code>PGID</code>）的进程组成</li><li><strong>一个进程组拥有一个进程组首进程，该进程是创建该组的进程，其进程 ID 为该进程组的 ID，新进程会继承其父进程所属的进程组 ID</strong></li><li>进程组拥有一个生命周期，其<strong>开始时间为首进程创建组的时刻</strong>，<strong>结束时间为最后一个成员进程退出组的时刻</strong></li><li>一个进程可能会因为终止而退出进程组，也可能会因为加入了另外一个进程组而退出进程组</li><li>进程组首进程无需是最后一个离开进程组的成员</li></ul><h3 id="会话" tabindex="-1"><a class="header-anchor" href="#会话"><span>会话</span></a></h3><ul><li><strong>会话</strong>是一组进程组的集合</li><li><strong>会话首进程是创建该新会话的进程，其进程 ID 会成为会话 ID。新进程会继承其父进程的会话 ID</strong></li><li>一个会话中的所有进程共享单个控制终端。控制终端会在会话首进程首次打开一个终端设备时被建立</li><li><strong>一个终端最多可能会成为一个会话的控制终端</strong></li><li><strong>在任一时刻，会话中的其中一个进程组会成为终端的前台进程组，其他进程组会成为后台进程组</strong>。只有前台进程组中的进程才能从控制终端中读取输入。当用户在控制终端中输入终端字符生成信号后，该信号会被发送到前台进程组中的所有成员</li><li>当控制终端的连接建立起来之后，会话首进程会成为该终端的控制进程</li></ul><h3 id="进程组、会话、控制终端之间的关系" tabindex="-1"><a class="header-anchor" href="#进程组、会话、控制终端之间的关系"><span>进程组、会话、控制终端之间的关系</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023224430993.png" alt="image-20211023224430993"></p><h3 id="进程组、会话操作函数" tabindex="-1"><a class="header-anchor" href="#进程组、会话操作函数"><span>进程组、会话操作函数</span></a></h3><ul><li><code>pid_t getpgrp(void);</code></li><li><code>pid_t getpgid(pid_t pid);</code></li><li><code>int setpgid(pid_t pid, pid_t pgid);</code></li><li><code> pid_t getsid(pid_t pid);</code></li><li><code>pid_t setsid(void);</code></li></ul><h2 id="守护进程概念" tabindex="-1"><a class="header-anchor" href="#守护进程概念"><span>守护进程概念</span></a></h2><ul><li><code>守护进程（Daemon Process）</code>，也就是通常说的 Daemon 进程（精灵进程），是Linux 中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。一般采用以 d 结尾的名字</li><li>守护进程特征 <ul><li>生命周期很长，守护进程会在系统启动的时候被创建并一直运行直至系统被关闭</li><li>它在后台运行并且不拥有控制终端。没有控制终端确保了内核永远不会为守护进程自动生成任何控制信号以及终端相关的信号（如 <code>SIGINT</code>、<code>SIGQUIT</code>）</li></ul></li><li>Linux 的大多数服务器就是用守护进程实现的。比如，Internet 服务器 <code>inetd</code>，Web 服务器 <code>httpd</code> 等</li></ul><h2 id="守护进程的创建步骤" tabindex="-1"><a class="header-anchor" href="#守护进程的创建步骤"><span>守护进程的创建步骤</span></a></h2><ol><li>执行一个 <code>fork()</code>，之后父进程退出，子进程继续执行</li><li>子进程调用 <code>setsid()</code> 开启一个新会话</li><li>清除进程的 <code>umask</code> 以确保当守护进程创建文件和目录时拥有所需的权限</li><li>修改进程的当前工作目录，通常会改为根目录（<code>/</code>）</li><li>关闭守护进程从其父进程继承而来的所有打开着的文件描述符</li><li>在关闭了文件描述符0、1、2之后，守护进程通常会打开<code>/dev/null</code> 并使用<code>dup2()</code> 使所有这些描述符指向这个设备</li><li>核心业务逻辑</li></ol><h2 id="实例-守护进程实现每隔两秒获取时间并写入磁盘" tabindex="-1"><a class="header-anchor" href="#实例-守护进程实现每隔两秒获取时间并写入磁盘"><span>实例：守护进程实现每隔两秒获取时间并写入磁盘</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
    写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 捕捉到信号之后，获取系统时间，写入磁盘文件</span>
    <span class="token class-name">time_t</span> tm <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span> loc <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">asctime</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;time.txt&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_APPEND<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd <span class="token punctuation">,</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. fork产生子进程，并退出父进程</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 子进程调用 setsid() 开启一个新会话</span>
    <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 设置掩码</span>
    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">022</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 修改进程的当前工作目录，通常设为/，这里应该是权限不够，所以改为当前目录</span>
    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">&quot;/home/u/Desktop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 关闭、重定向文件描述符</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/null&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> STDERR_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6. 业务逻辑</span>
    <span class="token comment">// 捕捉定时信号</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> myWork<span class="token punctuation">;</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置定时器</span>
    <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> val<span class="token punctuation">;</span>
    val<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    val<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    val<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    val<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 不让进程结束</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211023231303430.png" alt="image-20211023231303430"></p><h1 id="实用技巧" tabindex="-1"><a class="header-anchor" href="#实用技巧"><span>实用技巧</span></a></h1><h2 id="后台运行进程" tabindex="-1"><a class="header-anchor" href="#后台运行进程"><span>后台运行进程</span></a></h2><ul><li><p>code</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进程切换到后台运行：<code>./test &amp;</code>，切换到后台后，当前终端可以使用其他命令，此时无法通过<code>CTRL C</code>终止</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211006125801381.png" alt="image-20211006125801381"></p></li><li><p>后台进程切换到前台：<code>fg</code>，切换后，可以通过<code>CTRL C</code>终止</p></li></ul><h1 id="线程基础" tabindex="-1"><a class="header-anchor" href="#线程基础"><span>线程基础</span></a></h1><h2 id="线程概述" tabindex="-1"><a class="header-anchor" href="#线程概述"><span>线程概述</span></a></h2><h3 id="基本概念-6" tabindex="-1"><a class="header-anchor" href="#基本概念-6"><span>基本概念</span></a></h3><ul><li>与<code>进程（process）</code>类似，<code>线程（thread）</code>是允许应用程序<strong>并发执行多个任务</strong>的一种机制</li><li>一个进程可以包含多个线程</li><li>同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。（传统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程）</li><li><strong>进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位</strong></li><li>线程是轻量级的进程（<code>LWP：Light Weight Process</code>），在 Linux 环境下线程的本质仍是进程</li><li>查看指定进程的 <code>LWP</code> 号：<code>ps –Lf pid</code>，其中<code>pid</code>可以由<code>ps aux</code>得到</li><li>一般情况下，<code>main函数</code>所在的线程我们称之为<code>主线程（main线程）</code>，其余创建的线程称为<code>子线程</code><ul><li>程序中默认只有一个进程，<code>fork()</code>函数调用，2进程（父子进程）</li><li>程序中默认只有一个线程，<code>pthread_create()</code>函数调用，2个线程（主线程和子线程）</li></ul></li></ul><h3 id="线程和进程区别" tabindex="-1"><a class="header-anchor" href="#线程和进程区别"><span>线程和进程区别</span></a></h3><ul><li><strong>进程间的信息难以共享</strong>。由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程间通信方式，在进程间进行信息交换</li><li>调用 <code>fork()</code> 来创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符表之类的多种进程属性，这意味着 <code>fork()</code> 调用在时间上的开销依然不菲</li><li>线程之间能够方便、快速地共享信息。只需<strong>将数据复制到共享（全局或堆）变量</strong>中即可</li><li>创建线程比创建进程通常要快 10 倍甚至更多。线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表</li></ul><h3 id="线程之间共享和非共享资源" tabindex="-1"><a class="header-anchor" href="#线程之间共享和非共享资源"><span>线程之间共享和非共享资源</span></a></h3><h4 id="共享资源" tabindex="-1"><a class="header-anchor" href="#共享资源"><span>共享资源</span></a></h4><ul><li>进程 ID 和父进程 ID</li><li>进程组 ID 和会话 ID</li><li>用户 ID 和 用户组 ID</li><li>文件描述符表</li><li>信号处置</li><li>文件系统的相关信息：文件权限掩码（<code>umask</code>）、当前工作目录</li><li>虚拟地址空间（<strong>除栈、.text</strong>）</li></ul><h4 id="非共享资源" tabindex="-1"><a class="header-anchor" href="#非共享资源"><span>非共享资源</span></a></h4><ul><li>线程 ID</li><li>信号掩码</li><li>线程特有数据</li><li>error 变量</li><li>实时调度策略和优先级</li><li>栈，本地变量和函数的调用链接信息</li></ul><h3 id="nptl" tabindex="-1"><a class="header-anchor" href="#nptl"><span>NPTL</span></a></h3><ul><li><p>当 Linux 最初开发时，在内核中并不能真正支持线程。但是它的确可以通过 <code>clone()</code> 系统调用将进程作为可调度的实体。这个调用创建了调用进程（calling process）的一个拷贝，这个拷贝与调用进程共享相同的地址空间。<code>LinuxThreads</code> 项目使用这个调用来完成在用户空间模拟对线程的支持。不幸的是，这种方法有一些缺点，尤其是在信号处理、调度和进程间同步等方面都存在问题。另外，这个线程模型也不符合 <code>POSIX</code> 的要求</p></li><li><p>要改进 <code>LinuxThreads</code>，需要内核的支持，并且重写线程库。有两个相互竞争的项目开始来满足这些要求</p><ul><li>一个包括 IBM 的开发人员的团队开展了 <code>NGPT（Next-Generation POSIX Threads）</code>项目</li><li>同时，Red Hat 的一些开发人员开展了 <code>NPTL</code> 项目</li><li><code>NGPT</code> 在 2003 年中期被放弃了，把这个领域完全留给了 <code>NPTL</code></li></ul></li><li><p><code>NPTL</code>，或称为 <code>Native POSIX Thread Library</code>，是 Linux 线程的一个新实现，它克服了 <code>LinuxThreads </code>的缺点，同时也符合 <code>POSIX</code> 的需求。与 <code>LinuxThreads</code> 相比，它在性能和稳定性方面都提供了重大的改进</p></li><li><p>查看当前 <code>pthread</code> 库版本：<code>getconf GNU_LIBPTHREAD_VERSION</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024092845797.png" alt="image-20211024092845797"></p></li></ul><h3 id="注意-2" tabindex="-1"><a class="header-anchor" href="#注意-2"><span>注意</span></a></h3><ul><li><p>由于<code>pthread</code>属于第三方库，所以在编译时需要加上参数<code>-pthread</code>或<code>-lpthread</code>即指定包路径，如果不加报以下错误（执行程序为线程创建）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024094053228.png" alt="image-20211024094053228"></p></li></ul><h2 id="线程操作函数" tabindex="-1"><a class="header-anchor" href="#线程操作函数"><span>线程操作函数</span></a></h2><ul><li><p>获取当前的线程的线程ID：<code>pthread_t pthread_self(void);</code></p></li><li><p>比较两个线程ID是否相等：<code>int pthread_equal(pthread_t t1, pthread_t t2);</code></p><blockquote><p>不同的操作系统，<code>pthread_t</code>类型的实现不一样，有的是无符号的长整型，有的是使用结构体去实现的</p></blockquote></li><li><p>线程创建：<code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);</code></p></li><li><p>线程终止：<code>void pthread_exit(void *retval);</code></p></li></ul><h2 id="线程创建" tabindex="-1"><a class="header-anchor" href="#线程创建"><span>线程创建</span></a></h2><ul><li><code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);</code><ul><li>通过<code>man 3 pthread_create</code>查看帮助</li><li>功能：创建一个子线程</li><li>参数 <ul><li><code>thread</code>：传出参数，线程创建成功后，子线程的线程ID被写到该变量中</li><li><code>attr</code> : 设置线程的属性，一般使用默认值，NULL</li><li><code>start_routine</code> : 函数指针，这个函数是子线程需要处理的逻辑代码</li><li><code>arg</code> : 给第三个参数(<code>start_routine</code>)使用，传参</li></ul></li><li>返回值 <ul><li>成功：0</li><li>失败：返回错误号。这个错误号和之前<code>errno</code>不太一样。获取错误号的信息： <code>char * strerror(int errnum);</code></li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 防止子线程没有抢占到CPU且此时主线程已经执行完并退出</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024094256740.png" alt="image-20211024094256740"></p><h2 id="线程终止" tabindex="-1"><a class="header-anchor" href="#线程终止"><span>线程终止</span></a></h2><ul><li><code>void pthread_exit(void *retval);</code><ul><li>通过<code>man 3 pthread_exit</code>查看帮助</li><li>功能：终止一个线程，在哪个线程中调用，就表示终止哪个线程</li><li>参数：<code>retval</code>，需要传递一个指针，作为一个返回值，可以在<code>pthread_join()</code>中获取到</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid : %ld, main thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> tid <span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 让主线程退出，当主线程退出时，不会影响其他正常运行的线程</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面程序已经不能被执行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test message\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024100756859.png" alt="image-20211024100756859"></p><h2 id="线程连接" tabindex="-1"><a class="header-anchor" href="#线程连接"><span>线程连接</span></a></h2><ul><li><code>int pthread_join(pthread_t thread, void **retval);</code><ul><li>通过<code>man 3 pthread_join</code>查看帮助</li><li>功能：和一个已经终止的线程进行连接。回收子线程的资源，这个函数是阻塞函数，调用一次只能回收一个子线程，一般在主线程中使用</li><li>参数 <ul><li><code>thread</code>：需要回收的子线程的ID</li><li><code>retval</code>：接收子线程退出时的返回值</li></ul></li><li>返回值 <ul><li>成功：0</li><li>失败：返回错误号。这个错误号和之前<code>errno</code>不太一样。获取错误号的信息： <code>char * strerror(int errnum);</code></li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    val<span class="token operator">++</span><span class="token punctuation">;</span>
    
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 等价于return (void*)&amp;val;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;init val : %d\\n&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid : %ld, main thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> tid <span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 主线程调用pthread_join()回收子线程的资源</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> thread_retval<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>thread_retval<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;exit data : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>thread_retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;回收子线程资源成功！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 让主线程退出，当主线程退出时，不会影响其他正常运行的线程</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面程序已经不能被执行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test message\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024102827228.png" alt="image-20211024102827228"></p><h2 id="线程分离" tabindex="-1"><a class="header-anchor" href="#线程分离"><span>线程分离</span></a></h2><ul><li><code>int pthread_detach(pthread_t thread);</code><ul><li>通过<code>man 3 pthread_detach</code>查看帮助</li><li>功能：分离一个线程。被分离的线程在终止的时候，会自动释放资源返回给系统 <ul><li>不能多次分离，会产生不可预料的行为</li><li>不能去连接一个已经分离的线程，会报错</li></ul></li><li>参数：需要分离的线程的ID</li><li>返回值 <ul><li>成功：0</li><li>失败：返回错误号。这个错误号和之前<code>errno</code>不太一样。获取错误号的信息： <code>char * strerror(int errnum);</code></li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;chid thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error1 : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 输出主线程和子线程的id</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid : %ld, main thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> tid<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置子线程分离,子线程分离后，子线程结束时对应的资源就不需要主线程释放</span>
    ret <span class="token operator">=</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error2 : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置分离后，对分离的子线程进行连接 pthread_join()</span>
    <span class="token comment">// ret = pthread_join(tid, NULL);</span>
    <span class="token comment">// if(ret != 0) {</span>
    <span class="token comment">//     char * errstr = strerror(ret);</span>
    <span class="token comment">//     printf(&quot;error3 : %s\\n&quot;, errstr);</span>
    <span class="token comment">// }</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024112014474.png" alt="image-20211024112014474"></p><h2 id="线程取消" tabindex="-1"><a class="header-anchor" href="#线程取消"><span>线程取消</span></a></h2><ul><li><code>int pthread_cancel(pthread_t thread);</code><ul><li>通过<code>man 3 pthread_cancel</code>查看帮助</li><li>功能：取消线程（让线程终止）。取消某个线程，可以终止某个线程的运行， 但是并不是立马终止，而是当子线程执行到一个<strong>取消点</strong>，线程才会终止</li><li><strong>取消点</strong>：系统规定好的一些系统调用，我们可以粗略的理解为从用户区到内核区切换的位置，可以通过<code>man pthreads</code>查看取消点</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;chid thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error1 : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 线程取消</span>
    <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;main: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 输出主线程和子线程的id</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid : %ld, main thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> tid<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>以上代码在不同机器可能无法触发线程取消，每次执行结果也不一定相同=&gt;==猜测由于速度过快==</p><ul><li><p>虚拟机</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024141255941.png" alt="image-20211024141255941"></p></li><li><p>实体机</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024140914892.png" alt="image-20211024140914892"></p></li></ul></li></ul><h2 id="线程属性" tabindex="-1"><a class="header-anchor" href="#线程属性"><span>线程属性</span></a></h2><h3 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api"><span>常用API</span></a></h3><ul><li>线程属性类型：<code>pthread_attr_t</code></li><li>初始化线程属性变量：<code>int pthread_attr_init(pthread_attr_t *attr);</code></li><li>释放线程属性的资源：<code>int pthread_attr_destroy(pthread_attr_t *attr);</code></li><li>获取线程分离的状态属性：<code>int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);</code></li><li>设置线程分离的状态属性：<code>int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);</code></li></ul><h3 id="设置步骤" tabindex="-1"><a class="header-anchor" href="#设置步骤"><span>设置步骤</span></a></h3><ol><li>创建一个线程属性变量</li><li>初始化属性变量</li><li>设置属性</li><li>释放线程属性资源</li></ol><h3 id="实例-通过设置线程属性实现线程分离" tabindex="-1"><a class="header-anchor" href="#实例-通过设置线程属性实现线程分离"><span>实例：通过设置线程属性实现线程分离</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myWork</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;chid thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建一个线程属性变量</span>
    <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span>
    <span class="token comment">// 2. 初始化属性变量</span>
    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 设置属性-线程分离</span>
    <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_CREATE_DETACHED<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个子线程</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myWork<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span> errstr <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error1 : %s\\n&quot;</span><span class="token punctuation">,</span> errstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取线程的栈的大小</span>
    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>
    <span class="token function">pthread_attr_getstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread stack size : %ld\\n&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出主线程和子线程的id</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tid : %ld, main thread id : %ld\\n&quot;</span><span class="token punctuation">,</span> tid<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 释放线程属性资源</span>
    <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024143206510.png" alt="image-20211024143206510"></p><h1 id="线程同步" tabindex="-1"><a class="header-anchor" href="#线程同步"><span>线程同步</span></a></h1><h2 id="疑问" tabindex="-1"><a class="header-anchor" href="#疑问"><span>==疑问==</span></a></h2><p>什么时候加锁合适？不同时机加锁可能会导致不一样的结果</p><h2 id="出现的原因" tabindex="-1"><a class="header-anchor" href="#出现的原因"><span>出现的原因</span></a></h2><ul><li>假设我有100张票，有三个窗口同时在售卖，那么</li><li>如果<code>ticket</code>为局部变量，那么每个窗口都是从100开始售卖=&gt;执行<code>test1()</code></li><li>如果<code>ticket</code>为全局变量，那么不同窗口可能因为抢占资源而同时开始售卖，导致出现同时在卖同一张票（可能出现负数票）=&gt;执行<code>test2()</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">selltickets1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tickets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;线程%ld 正在售卖第%d张票\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tickets<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建三个线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid2<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid3<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 线程连接，回收子线程的资源，阻塞</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> total_tickets <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">selltickets2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>total_tickets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;线程%ld 正在售卖第%d张票\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>
        total_tickets<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建三个线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid2<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid3<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 线程连接，回收子线程的资源，阻塞</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 退出main进程</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>执行<code>test1</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024145941102.png" alt="image-20211024145941102"></p></li><li><p>执行<code>test2</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024145916760.png" alt="image-20211024145916760"></p></li></ul><h2 id="线程同步概念" tabindex="-1"><a class="header-anchor" href="#线程同步概念"><span>线程同步概念</span></a></h2><ul><li>线程的主要优势在于，<strong>能够通过全局变量来共享信息</strong>。不过，这种便捷的共享是有代价的：必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量</li><li><code>临界区</code>是指访问某一共享资源的代码片段，并且这段代码的执行应为<code>原子操作</code>，也就是同时访问同一共享资源的其他线程不应终端该片段的执行</li><li><code>线程同步</code>：即<strong>当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作，而其他线程则处于等待状态</strong></li></ul><h2 id="互斥量-互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥量-互斥锁"><span>互斥量/互斥锁</span></a></h2><h3 id="基本概念-7" tabindex="-1"><a class="header-anchor" href="#基本概念-7"><span>基本概念</span></a></h3><ul><li><p>为避免线程更新共享变量时出现问题，可以使用<code>互斥量（mutex 是 mutual exclusion的缩写）</code>来确保同时仅有一个线程可以访问某项共享资源。使用<strong>互斥量能保证对任意共享资源的原子访问</strong></p></li><li><p>互斥量有两种状态：<code>已锁定（locked）</code>和<code>未锁定（unlocked）</code>。任何时候，<strong>至多只有一个线程可以锁定该互斥量</strong>。试图对已经锁定的某一互斥量再次加锁，将可能阻塞线程或者报错失败，具体取决于加锁时使用的方法</p></li><li><p>一旦线程锁定互斥量，随即成为该互斥量的所有者，<strong>只有所有者才能给互斥量解锁</strong>。一般情况下，对每一共享资源（可能由多个相关变量组成）会使用不同的互斥量，每一线程在访问同一资源时将采用如下协议</p><ul><li>针对共享资源锁定互斥量</li><li>访问共享资源</li><li>对互斥量解锁</li></ul></li><li><p>如果多个线程试图执行这一块代码（一个临界区），事实上只有一个线程能够持有该互斥量（其他线程将遭到阻塞），即同时只有一个线程能够进入这段代码区域，如下</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024153557069.png" alt="image-20211024153557069"></p></li></ul><h3 id="互斥量相关操作函数" tabindex="-1"><a class="header-anchor" href="#互斥量相关操作函数"><span>互斥量相关操作函数</span></a></h3><ul><li><p>互斥量的类型：<code>pthread_mutex_t</code></p></li><li><p>初始化互斥量：<code>int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);</code></p><ul><li>参数 <ul><li><code>mutex</code> ： 需要初始化的互斥量变量</li><li><code>attr</code> ： 互斥量相关的属性，设置为NULL，由内核指定</li></ul></li><li><code>restrict</code> : C语言的修饰符，被修饰的指针，不能由另外的一个指针进行操作</li></ul></li><li><p>释放互斥量的资源：<code>int pthread_mutex_destroy(pthread_mutex_t *mutex);</code></p></li><li><p>加锁：<code>int pthread_mutex_lock(pthread_mutex_t *mutex);</code></p></li><li><p>尝试加锁：<code>int pthread_mutex_trylock(pthread_mutex_t *mutex);</code></p></li><li><p>解锁：<code>int pthread_mutex_unlock(pthread_mutex_t *mutex);</code></p></li></ul><h3 id="实例-互斥锁实现进程同步售票" tabindex="-1"><a class="header-anchor" href="#实例-互斥锁实现进程同步售票"><span>实例：互斥锁实现进程同步售票</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token comment">// 全局变量创建互斥量，保证所有线程都能访问</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>

<span class="token keyword">int</span> total_tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">selltickets</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加锁</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>total_tickets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 访问共享变量</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;线程%ld 正在售卖第%d张票\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>
            total_tickets<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解锁</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 解锁</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥量</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建三个线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid2<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> tid3<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> selltickets<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 线程连接，回收子线程的资源，阻塞</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 退出main进程</span>

    <span class="token comment">// 释放互斥量资源</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024154443063.png" alt="image-20211024154443063"></p><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h2><h3 id="基本概念-8" tabindex="-1"><a class="header-anchor" href="#基本概念-8"><span>基本概念</span></a></h3><ul><li>一个线程需要同时访问两个或更多不同的共享资源，而每个资源又都由不同的互斥量管理。当超过一个线程加锁同一组互斥量时，就有可能发生<code>死锁</code></li><li>两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁</li></ul><h3 id="死锁的几种场景" tabindex="-1"><a class="header-anchor" href="#死锁的几种场景"><span>死锁的几种场景</span></a></h3><h4 id="忘记释放锁" tabindex="-1"><a class="header-anchor" href="#忘记释放锁"><span>忘记释放锁</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 全局变量，所有的线程都共享这一份资源。</span>
<span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">sellticket</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 卖票</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加锁</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>tickets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld 正在卖第 %d 张门票\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tickets<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解锁</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥量</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建3个子线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">,</span> tid3<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回收子线程的资源,阻塞</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 退出主线程</span>

    <span class="token comment">// 释放互斥量资源</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重复加锁" tabindex="-1"><a class="header-anchor" href="#重复加锁"><span>重复加锁</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 全局变量，所有的线程都共享这一份资源。</span>
<span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">sellticket</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 卖票</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 加锁</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>tickets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld 正在卖第 %d 张门票\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tickets<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解锁</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 解锁</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 初始化互斥量</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建3个子线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">,</span> tid3<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sellticket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回收子线程的资源,阻塞</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 退出主线程</span>

    <span class="token comment">// 释放互斥量资源</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多线程多锁-抢占锁资源" tabindex="-1"><a class="header-anchor" href="#多线程多锁-抢占锁资源"><span>多线程多锁，抢占锁资源</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024162356465.png" alt="image-20211024162356465"></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 创建2个互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex1<span class="token punctuation">,</span> mutex2<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">workA</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;workA....\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">workB</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;workB....\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 初始化互斥量</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建2个子线程</span>
    <span class="token class-name">pthread_t</span> tid1<span class="token punctuation">,</span> tid2<span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> workA<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> workB<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回收子线程资源</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 释放互斥量资源</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁"><span>读写锁</span></a></h2><h3 id="基本概念-9" tabindex="-1"><a class="header-anchor" href="#基本概念-9"><span>基本概念</span></a></h3><ul><li>当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞住。但是考虑一种情形，当前持有互斥锁的线程只是要读访问共享资源，而同时有其它几个线程也想读取这个共享资源，但是由于互斥锁的排它性，所有其它线程都无法获取锁，也就无法读访问共享资源了，但是实际上多个线程同时读访问共享资源并不会导致问题</li><li>在对数据的读写操作中，<strong>更多的是读操作，写操作较少</strong>，例如对数据库数据的读写应用。为了满足当前能够允许多个读出，但只允许一个写入的需求，线程提供了读写锁来实现</li><li>读写锁的特点 <ul><li>如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作</li><li>如果有其它线程写数据，则其它线程都不允许读、写操作</li><li>写是独占的，写的优先级高</li></ul></li></ul><h3 id="读写锁相关操作函数" tabindex="-1"><a class="header-anchor" href="#读写锁相关操作函数"><span>读写锁相关操作函数</span></a></h3><ul><li><p>读写锁的类型：<code>pthread_rwlock_t</code></p></li><li><p>初始化读写锁：<code>int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);</code></p></li><li><p>释放互斥量的资源：<code>int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);</code></p></li><li><p>读操作加锁：<code>int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);</code></p></li><li><p>读操作尝试加锁：<code>int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);</code></p></li><li><p>写操作加锁：<code>int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);</code></p></li><li><p>写操作尝试加锁：<code>int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);</code></p></li><li><p>解锁：<code>int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);</code></p></li></ul><h3 id="实例-读写锁实现读线程数量大于写线程数量" tabindex="-1"><a class="header-anchor" href="#实例-读写锁实现读线程数量大于写线程数量"><span>实例：读写锁实现读线程数量大于写线程数量</span></a></h3><ul><li>8个线程操作同一个全局变量。3个线程不定时写这个全局变量，5个线程不定时的读这个全局变量</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 创建读写锁</span>
<span class="token class-name">pthread_rwlock_t</span> rwlock<span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">workA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加写锁</span>
        <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;++write, tid : %ld, num : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解锁</span>
        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">workB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加读锁</span>
        <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;===read, tid : %ld, num : %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解锁</span>
        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化读写锁</span>
    <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建8个线程，3个写线程，5个读线程</span>
    <span class="token class-name">pthread_t</span> wtids<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rtids<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wtids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> workA<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rtids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> workB<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分离，回收资源</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>wtids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>rtids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 回收读写锁</span>
    <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rwlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回收主线程</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024164409909.png" alt="image-20211024164409909"></p><h2 id="生产者和消费者" tabindex="-1"><a class="header-anchor" href="#生产者和消费者"><span>生产者和消费者</span></a></h2><h3 id="关系模型" tabindex="-1"><a class="header-anchor" href="#关系模型"><span>关系模型</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024172038707.png" alt="image-20211024172038707"></p><h3 id="存在问题" tabindex="-1"><a class="header-anchor" href="#存在问题"><span>存在问题</span></a></h3><ol><li>当容器满时，无法继续生产</li><li>当容器空时，无法继续消费</li><li>多个生产者或消费者时，会出现线程同步问题</li></ol><h3 id="实例-简易版多生产者多消费者-互斥量-存在未解决问题" tabindex="-1"><a class="header-anchor" href="#实例-简易版多生产者多消费者-互斥量-存在未解决问题"><span>实例：简易版多生产者多消费者（互斥量，==存在未解决问题==）</span></a></h3><ul><li><p>说明</p><ul><li>当在删除节点时，加锁时机不同可能会导致段错误</li><li>产生错误版在虚拟机下无法产生<code>core</code>文件，以下截图来自服务器，是否使用<code>-g</code>参数都能生成<code>core</code>文件，==可能是线程函数自带能够生成？==</li><li>虚拟机版在<strong>释放互斥锁前添加while死循环</strong>即可正常生成<code>core</code>文件，所以不产生<code>core</code>文件的原因可能是==线程还在运行而互斥锁提前被释放了==</li></ul></li><li><p>正常执行版</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 链表作为容器</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 头结点</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">// 互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>

<span class="token comment">// 头插法增加元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">producter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;add node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> newNode<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 头删法减少元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// 当链表不为空时，才能删除</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;del node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥锁</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建5个生产者线程，和5个消费者线程</span>
    <span class="token class-name">pthread_t</span> products<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> consumes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> producter<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> consumer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分离，回收线程资源</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 回收互斥锁</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 回收主线程</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024183604991.png" alt="image-20211024183604991"></p></li><li><p>产生错误版（==原因还不清晰，后续再看==）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 链表作为容器</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 头结点</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">// 互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>

<span class="token comment">// 头插法增加元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">producter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;add node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> newNode<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 头删法减少元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果只在头结点不为空的情况下使用互斥锁会产生段错误，暂未找到原因</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>
            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;del node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥锁</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建5个生产者线程，和5个消费者线程</span>
    <span class="token class-name">pthread_t</span> products<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> consumes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> producter<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> consumer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分离，回收线程资源</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// 加while循环即可在虚拟机中生成core文件</span>
    <span class="token comment">// while (1) {</span>
    <span class="token comment">//     sleep(10);</span>
    <span class="token comment">// }</span>
    <span class="token comment">// 回收互斥锁</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 回收主线程</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>服务器</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024190914068.png" alt="image-20211024190914068"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024191441756.png" alt="image-20211024191441756"></p></li><li><p>虚拟机</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024192925831.png" alt="image-20211024192925831"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024192944475.png" alt="image-20211024192944475"></p></li></ul></li></ul><h2 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量"><span>条件变量</span></a></h2><h3 id="条件变量相关操作函数" tabindex="-1"><a class="header-anchor" href="#条件变量相关操作函数"><span>条件变量相关操作函数</span></a></h3><ul><li>当满足条件时，才执行，不是锁，配合互斥量使用</li><li>条件变量的类型：<code>pthread_cond_t</code></li><li>初始化：<code>int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);</code></li><li>回收：<code>int pthread_cond_destroy(pthread_cond_t *cond);</code></li><li>等待，调用了该函数，线程会阻塞：<code>int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);</code></li><li>等待多长时间，调用了这个函数，线程会阻塞，直到指定的时间结束：<code>int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);</code></li><li>唤醒一个或者多个等待的线程：<code>int pthread_cond_signal(pthread_cond_t *cond);</code></li><li>唤醒所有的等待的线程：<code>int pthread_cond_broadcast(pthread_cond_t *cond);</code></li></ul><h3 id="实例-条件变量下的多生产者多消费者" tabindex="-1"><a class="header-anchor" href="#实例-条件变量下的多生产者多消费者"><span>实例：条件变量下的多生产者多消费者</span></a></h3><ul><li>当有生产者生产时，通知消费者消费，否则等待</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token comment">// 链表作为容器</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 头结点</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">// 互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>
<span class="token comment">// 条件变量</span>
<span class="token class-name">pthread_cond_t</span> cond<span class="token punctuation">;</span>

<span class="token comment">// 头插法增加元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">producter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;add node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> newNode<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 只要生产了一个，就通知消费者消费</span>
        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 头删法减少元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// 当链表不为空时，才能删除</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;del node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有数据，需要等待</span>
            <span class="token comment">// 当这个函数调用阻塞的时候，会对互斥锁进行解锁，当不阻塞的，继续向下执行，会重新加锁。</span>
            <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥锁</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化条件变量</span>
    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建5个生产者线程，和5个消费者线程</span>
    <span class="token class-name">pthread_t</span> products<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> consumes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> producter<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> consumer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分离，回收线程资源</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 回收条件变量</span>
    <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回收互斥锁</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 回收主线程</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211024204722129.png" alt="image-20211024204722129"></p><h2 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量"><span>信号量</span></a></h2><h3 id="信号量相关操作函数" tabindex="-1"><a class="header-anchor" href="#信号量相关操作函数"><span>信号量相关操作函数</span></a></h3><ul><li>信号量的类型：<code>sem_t</code></li><li><code>int sem_init(sem_t *sem, int pshared, unsigned int value);</code><ul><li>功能：初始化信号量</li><li>参数 <ul><li><code>sem</code>：信号量变量的地址</li><li><code>pshared</code>：0 用在线程间 ，非0 用在进程间</li><li><code>value </code>：信号量中的值，代表容器大小</li></ul></li></ul></li><li><code>int sem_destroy(sem_t *sem);</code><ul><li>功能：释放资源</li></ul></li><li><code>int sem_wait(sem_t *sem);</code><ul><li>功能：对信号量加锁，调用一次对信号量的值-1，如果值为0，就阻塞</li></ul></li><li><code>int sem_trywait(sem_t *sem);</code></li><li><code>int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);</code></li><li><code>int sem_post(sem_t *sem);</code><ul><li>功能：对信号量解锁，调用一次对信号量的值+1</li></ul></li><li><code>int sem_getvalue(sem_t *sem, int *sval);</code></li></ul><h3 id="实例-信号量下的多生产者多消费者" tabindex="-1"><a class="header-anchor" href="#实例-信号量下的多生产者多消费者"><span>实例：信号量下的多生产者多消费者</span></a></h3><ul><li>不需要单独判断<code>容器</code>为空的情况</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span></span>

<span class="token comment">// 链表作为容器</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 头结点</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">// 互斥量</span>
<span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span>
<span class="token comment">// 信号量</span>
<span class="token class-name">sem_t</span> psem<span class="token punctuation">;</span>
<span class="token class-name">sem_t</span> csem<span class="token punctuation">;</span>

<span class="token comment">// 头插法增加元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">producter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;add node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> newNode<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>csem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 头删法减少元素</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>csem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// 当链表不为空时，才能删除</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;del node, num : %d, tid : %ld\\n&quot;</span><span class="token punctuation">,</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化互斥锁</span>
    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化信号量</span>
    <span class="token comment">// 最多生产8个</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始没有东西可以消费</span>
    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>csem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建5个生产者线程，和5个消费者线程</span>
    <span class="token class-name">pthread_t</span> products<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> consumes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> producter<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> consumer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分离，回收线程资源</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>consumes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 回收信号量</span>
    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>csem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回收互斥锁</span>
    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 回收主线程</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="网络基础" tabindex="-1"><a class="header-anchor" href="#网络基础"><span>网络基础</span></a></h1><h2 id="网络结构模式" tabindex="-1"><a class="header-anchor" href="#网络结构模式"><span>网络结构模式</span></a></h2><h3 id="c-s结构" tabindex="-1"><a class="header-anchor" href="#c-s结构"><span>C/S结构</span></a></h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h4><ul><li><p>服务器 - 客户机，即 <code>Client - Server（C/S）</code>结构。C/S 结构通常采取两层结构。服务器负责数据的管理，客户机负责完成与用户的交互任务。客户机是因特网上访问别人信息的机器，服务器则是提供信息供人访问的计算机。</p></li><li><p>客户机通过局域网与服务器相连，接受用户的请求，并通过网络向服务器提出请求，对数据库进行操作。服务器接受客户机的请求，将数据提交给客户机，客户机将数据进行计算并将结果呈现给用户。服务器还要提供完善安全保护及对数据完整性的处理等操作，并允许多个客户机同时访问服务器，这就对服务器的硬件处理数据能力提出了很高的要求。</p></li><li><p>在C/S结构中，应用程序分为两部分：服务器部分和客户机部分。服务器部分是多个用户共享的信息与功能，执行后台服务，如控制共享数据库的操作等；客户机部分为用户所专有，负责执行前台功能，在出错提示、在线帮助等方面都有强大的功能，并且可以在子程序间自由切换。</p></li></ul><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>能充分发挥客户端 PC 的处理能力，很多工作可以在客户端处理后再提交给服务器，所以 C/S 结构客户端响应速度快</li><li>操作界面漂亮、形式多样，可以充分满足客户自身的个性化要求</li><li>C/S 结构的管理信息系统具有较强的事务处理能力，能实现复杂的业务流程</li><li>安全性较高，C/S 一般面向相对固定的用户群，程序更加注重流程，它可以对权限进行多层次校验，提供了更安全的存取模式，对信息安全的控制能力很强，一般高度机密的信息系统采用 C/S 结构适宜</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>客户端需要安装专用的客户端软件。首先涉及到安装的工作量，其次任何一台电脑出问题，如病毒、硬件损坏，都需要进行安装或维护。系统软件升级时，每一台客户机需要重新安装，其维护和升级成本非常高</li><li>对客户端的操作系统一般也会有限制，不能够跨平台</li></ul><h3 id="b-s结构" tabindex="-1"><a class="header-anchor" href="#b-s结构"><span>B/S结构</span></a></h3><h4 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1"><span>简介</span></a></h4><ul><li><p><code>B/S 结构（Browser/Server，浏览器/服务器模式）</code>，是 WEB 兴起后的一种网络结构模式，WEB浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。</p></li><li><p>客户机上只要安装一个浏览器，如 Firefox 或 InternetExplorer，服务器安装 SQL Server、Oracle、MySQL 等数据库。浏览器通过 Web Server 同数据库进行数据交互</p></li></ul><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ul><li>B/S 架构最大的优点是总体拥有成本低、维护方便、 分布性强、开发简单，可以不用安装任何专门的软件就能实现在任何地方进行操作，客户端零维护，系统的扩展非常容易，只要有一台能上网的电脑就能使用</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ul><li>通信开销大、系统和数据的安全性较难保障</li><li>个性特点明显降低，无法实现具有个性化的功能要求</li><li>协议一般是固定的：http/https</li><li>客户端服务器端的交互是请求-响应模式，通常动态刷新页面，响应速度明显降低</li></ul><h2 id="mac地址" tabindex="-1"><a class="header-anchor" href="#mac地址"><span>MAC地址</span></a></h2><h3 id="网卡" tabindex="-1"><a class="header-anchor" href="#网卡"><span>网卡</span></a></h3><ul><li><p><code>网卡</code>是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件，又称为<code>网络适配器</code>或<code>网络接口卡NIC</code>。其拥有 MAC 地址，属于 <code>OSI</code> 模型的第 2 层，它使得用户可以通过电缆或无线相互连接。</p></li><li><p>每一个网卡都有一个被称为 MAC 地址的独一无二的 <strong>48 位串行号</strong></p></li><li><p>网卡的主要功能：1.数据的封装与解封装、2.链路管理、3.数据编码与译码</p></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211027130051135.png" alt="image-20211027130051135"></p><h3 id="mac地址-1" tabindex="-1"><a class="header-anchor" href="#mac地址-1"><span>MAC地址</span></a></h3><ul><li><p><code>MAC 地址（Media Access Control Address）</code>，直译为媒体存取控制位址，也称为局域网地址、以太网地址、物理地址或硬件地址，它是一个用来确认网络设备位置的位址，由网络设备制造商生产时烧录在网卡中</p></li><li><p>在 <code>OSI</code> 模型中，<strong>第三层网络层负责 IP 地址</strong>，<strong>第二层数据链路层则负责 MAC位址</strong></p></li><li><p>MAC 地址用于在网络中唯一标识一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的 MAC 地址</p></li></ul><h2 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址"><span>IP地址</span></a></h2><h3 id="简介-2" tabindex="-1"><a class="header-anchor" href="#简介-2"><span>简介</span></a></h3><ul><li><p><code>IP 协议</code>是为计算机网络相互连接进行通信而设计的协议。在因特网中，它是<strong>能使连接到网上的所有计算机网络实现相互通信的一套规则，规定了计算机在因特网上进行通信时应当遵守的规则</strong>。任何厂家生产的计算机系统，只要遵守 <code>IP 协议</code>就可以与因特网互连互通。各个厂家生产的网络系统和设备，如以太网、分组交换网等，它们相互之间不能互通，<strong>不能互通的主要原因是因为它们所传送数据的基本单元（技术上称之为“帧”）的格式不同</strong></p></li><li><p><code>IP 协议</code>实际上是一套由软件程序组成的协议软件，它把各种不同“帧”统一转换成<code>IP 数据报</code>格式，这种转换是因特网的一个最重要的特点，使所有各种计算机都能在因特网上实现互通，即具有“开放性”的特点。正是因为有了 IP 协议，因特网才得以迅速发展成为世界上最大的、开放的计算机通信网络。因此，IP 协议也可以叫做“因特网协议”</p></li><li><p>IP 地址（Internet Protocol Address）是指互联网协议地址，又译为网际协议地址。</p></li><li><p>IP 地址是 IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异</p></li><li><p><strong>IP 地址是一个 32 位的二进制数，通常被分割为 4 个“ 8 位二进制数”（也就是 4 个字节）</strong></p></li><li><p>IP 地址通常用<code>点分十进制</code>表示成（<code>a.b.c.d</code>）的形式，其中，a,b,c,d都是 0~255 之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是 32 位二进制数（01100100.00000100.00000101.00000110）</p></li></ul><h3 id="ip-地址编址方式" tabindex="-1"><a class="header-anchor" href="#ip-地址编址方式"><span><strong>IP</strong> 地址编址方式</span></a></h3><ul><li><p>最初设计互联网络时，<strong>为了便于寻址以及层次化构造网络，每个 IP 地址包括两个标识码（ID）</strong>，即<code>网络ID</code> 和<code>主机 ID</code>。同一个物理网络上的所有主机都使用同一个网络 ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机 ID 与其对应</p></li><li><p>Internet 委员会定义了 5 种 IP 地址类型以适合不同容量的网络，即 A 类~ E 类</p></li><li><p>其中 A、B、C 3类（如下表格）由 InternetNIC 在全球范围内统一分配，D、E 类为特殊地址</p><ul><li>A类最高位不能为1，所以是$2^7$</li><li>主机数要减去2是因为去掉<code>x.x.x.0</code>和<code>x.x.x.255</code>这两个特殊的地址</li></ul></li></ul><table><thead><tr><th style="text-align:center;">类别</th><th style="text-align:center;">最大网络数</th><th style="text-align:center;">IP地址范围</th><th style="text-align:center;">单个网段最大主机数</th><th style="text-align:center;">私有IP地址范围</th></tr></thead><tbody><tr><td style="text-align:center;">A</td><td style="text-align:center;">126($2^7-1$)</td><td style="text-align:center;">1.0.0.1~126.255.255.254</td><td style="text-align:center;">16777214($2^{24}-2$)</td><td style="text-align:center;">10.0.0.0~10.255.255.255</td></tr><tr><td style="text-align:center;">B</td><td style="text-align:center;">16384($2^{14}$)</td><td style="text-align:center;">128.0.0.1~191.255.255.254</td><td style="text-align:center;">65534($2^{16}-2$)</td><td style="text-align:center;">172.16.0.0~172.31.255.255</td></tr><tr><td style="text-align:center;">C</td><td style="text-align:center;">2097152($2^{21}$)</td><td style="text-align:center;">192.0.0.1~223.255.255.254</td><td style="text-align:center;">254($2^8-2$)</td><td style="text-align:center;">192.168.0.0~192.168.255.255</td></tr></tbody></table><h3 id="a类ip地址" tabindex="-1"><a class="header-anchor" href="#a类ip地址"><span>A类IP地址</span></a></h3><ul><li><p>一个 A 类 IP 地址是指， 在 IP 地址的四段号码中，<strong>第一段号码为网络号码，剩下的三段号码为本地计算机的号码</strong></p></li><li><p>如果用二进制表示 IP 地址的话，A 类 IP 地址就由 1 字节的网络地址和 3 字节主机地址组成，<strong>网络地址的最高位必须是<code>0</code></strong></p></li><li><p>A 类 IP 地址中网络的标识长度为 8 位，主机标识的长度为 24 位，A类网络地址数量较少，有 126 个网络，每个网络可以容纳主机数达 1600 多万台</p></li><li><p>A 类 IP 地址 地址范围 <code>1.0.0.1 - 126.255.255.254</code>（二进制表示为：<code>00000001 00000000 00000000 00000001 - 01111111 11111111 11111111 11111110</code>），最后一个是广播地址</p></li><li><p>A 类 IP 地址的子网掩码为 255.0.0.0，每个网络支持的最大主机数为$2^{24}-2$</p></li></ul><h3 id="b类ip地址" tabindex="-1"><a class="header-anchor" href="#b类ip地址"><span>B类IP地址</span></a></h3><ul><li>一个 B 类 IP 地址是指，在 IP 地址的四段号码中，<strong>前两段号码为网络号码，剩下的两段号码为本地计算机的号码</strong></li><li>如果用二进制表示 IP 地址的话，B 类 IP 地址就由 2 字节的网络地址和 2 字节主机地址组成，<strong>网络地址的最高位必须是<code>10</code></strong></li><li>B 类 IP地址中网络的标识长度为 16 位，主机标识的长度为 16 位，B 类网络地址适用于中等规模的网络，有16384 个网络，每个网络所能容纳的计算机数为 6 万多台</li><li>B 类 IP 地址地址范围 <code>128.0.0.1 - 191.255.255.254</code> （二进制表示为：<code>10000000 00000000 00000000 00000001 - 10111111 11111111 11111111 11111110</code>）， 最后一个是广播地址</li><li>B 类 IP 地址的子网掩码为 255.255.0.0，每个网络支持的最大主机数为$2^{16}-2$</li></ul><h3 id="c类ip地址" tabindex="-1"><a class="header-anchor" href="#c类ip地址"><span>C类IP地址</span></a></h3><ul><li>一个 C 类 IP 地址是指，在 IP 地址的四段号码中，<strong>前三段号码为网络号码，剩下的一段号码为本地计算机的号码</strong></li><li>如果用二进制表示 IP 地址的话，C 类 IP 地址就由 3 字节的网络地址和 1 字节主机地址组成，<strong>网络地址的最高位必须是<code>110</code></strong></li><li>C 类 IP 地址中网络的标识长度为 24 位，主机标识的长度为 8 位，C 类网络地址数量较多，有 209 万余个网络。适用于小规模的局域网络，每个网络最多只能包含254台计算机</li><li>C 类 IP 地址范围 <code>192.0.0.1-223.255.255.254</code> （二进制表示为: <code>11000000 00000000 00000000 00000001 - 11011111 11111111 11111111 11111110</code>），最后一个是广播地址</li><li>C类IP地址的子网掩码为 255.255.255.0，每个网络支持的最大主机数为$2^8-2$</li></ul><h3 id="d类ip地址" tabindex="-1"><a class="header-anchor" href="#d类ip地址"><span>D类IP地址</span></a></h3><ul><li><p>D 类 IP 地址在历史上被叫做<code>多播地址（multicast address）</code>，即<code>组播地址</code></p></li><li><p>在以太网中，多播地址命名了一组应该在这个网络中应用接收到一个分组的站点。多播地址的最高位必须是 <code>1110</code>，范围从<code>224.0.0.0 - 239.255.255.255</code></p></li><li><p>划分</p><table><thead><tr><th style="text-align:center;">IP地址</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">224.0.0.0~224.0.0.255</td><td style="text-align:center;">局部链接多播地址：是为路由协议和其它用途保留的地址，路由器并不转发属于此范围的IP包</td></tr><tr><td style="text-align:center;">224.0.1.0~224.0.1.255</td><td style="text-align:center;">预留多播地址：公用组播地址，可用于Internet；使用前需要申请</td></tr><tr><td style="text-align:center;">224.0.2.0~238.255.255.255</td><td style="text-align:center;">预留多播地址：用户可用组播地址(临时组地址)，全网范围内有效</td></tr><tr><td style="text-align:center;">239.0.0.0~239.255.255.255</td><td style="text-align:center;">本地管理组播地址，可供组织内部使用，类似于私有 IP 地址，不能用于 Internet，可限制多播范围</td></tr></tbody></table></li></ul><h3 id="特殊的网址" tabindex="-1"><a class="header-anchor" href="#特殊的网址"><span>特殊的网址</span></a></h3><ul><li><p>每一个字节都为 0 的地址（ <code>0.0.0.0</code> ）对应于<strong>当前主机</strong></p></li><li><p>IP 地址中的每一个字节都为 1 的 IP 地址（ <code>255.255.255.255</code> ）是<strong>当前子网的广播地址</strong></p></li><li><p>IP 地址中凡是以 <code>11110</code> 开头的 E 类 IP 地址都保留用于将来和实验使用</p></li><li><p>IP地址中<strong>不能以十进制 <code>127</code> 作为开头</strong>，该类地址中数字 <code>127.0.0.1 ~ 127.255.255.255</code> 用于回路测试，如：<code>127.0.0.1</code>可以代表<strong>本机IP地址</strong></p></li></ul><h3 id="子网掩码" tabindex="-1"><a class="header-anchor" href="#子网掩码"><span>子网掩码</span></a></h3><ul><li><code>子网掩码（subnet mask）</code>又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个 IP 地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码</li><li>子网掩码不能单独存在，它必须结合 IP 地址一起使用</li><li>子网掩码只有一个作用，就是将某个 IP 地址划分成<code>网络地址</code>和<code>主机地址</code>两部分</li><li>子网掩码是一个 <strong>32 位地址</strong>，用于屏蔽 IP 地址的一部分以区别网络标识和主机标识，并说明该 IP地址是在局域网上，还是在广域网上</li></ul><blockquote><p>子网掩码是在 IPv4 地址资源紧缺的背景下为了解决 lP 地址分配而产生的虚拟 lP 技术，通过子网掩码将A、B、C 三类地址划分为若干子网，从而显著提高了 IP 地址的分配效率，有效解决了 IP 地址资源紧张的局面。另一方面，在企业内网中为了更好地管理网络，网管人员也利用子网掩码的作用，人为地将一个较大的企业内部网络划分为更多个小规模的子网，再利用三层交换机的路由功能实现子网互联，从而有效解决了网络广播风暴和网络病毒等诸多网络管理方面的问题</p><p>在大多数的网络教科书中，一般都将子网掩码的作用描述为通过逻辑运算，将 IP 地址划分为网络标识(Net.ID) 和主机标识(Host.ID)，只有网络标识相同的两台主机在无路由的情况下才能相互通信</p><p>根据 RFC950 定义，子网掩码是一个 32 位的 2 进制数， 其对应网络地址的所有位都置为 1，对应于主机地址的所有位置都为 0。子网掩码告知路由器，地址的哪一部分是网络地址，哪一部分是主机地址，使路由器正确判断任意 IP 地址是否是本网段的，从而正确地进行路由。网络上，数据从一个地方传到另外一个地方，是依靠 IP 寻址。从逻辑上来讲，是两步的。第一步，从 IP 中找到所属的网络，好比是去找这个人是哪个小区的；第二步，再从 IP 中找到主机在这个网络中的位置，好比是在小区里面找到这个人</p><p>子网掩码的设定必须遵循一定的规则。与二进制 IP 地址相同，子网掩码由 1 和 0 组成，且 1 和 0 分别连续。子网掩码的长度也是 32 位，左边是网络位，用二进制数字 “1” 表示，1 的数目等于网络位的长度；右边是主机位，用二进制数字 “0” 表示，0 的数目等于主机位的长度。这样做的目的是为了让掩码与 IP 地址做按位与运算时用 0 遮住原主机数，而不改变原网络段数字，而且很容易通过 0 的位数确定子网的主机数（ 2 的主机位数次方 - 2，因为主机号全为 1 时表示该网络广播地址，全为 0 时表示该网络的网络号，这是两个特殊地址）。通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作</p></blockquote><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口"><span>端口</span></a></h2><h3 id="简介-3" tabindex="-1"><a class="header-anchor" href="#简介-3"><span>简介</span></a></h3><ul><li><p><code>端口</code> 是英文 port 的意译，可以认为是设备与外界通讯交流的出口</p></li><li><p>端口可分为<code>虚拟端口</code>和<code>物理端口</code></p><ul><li>虚拟端口指计算机内部或交换机路由器内的端口，不可见，是特指TCP/IP协议中的端口，是逻辑意义上的端口，例如计算机中的 80 端口、21 端口、23 端口等</li><li>物理端口又称为接口，是可见端口，计算机背板的 RJ45 网口，交换机路由器集线器等 RJ45 端口。电话使用 RJ11 插口也属于物理端口的范畴</li></ul></li><li><p>端口是通过端口号来标记的，端口号只有整数，范围是从 0 到65535（$2^{16}$）</p></li></ul><h3 id="端口类型" tabindex="-1"><a class="header-anchor" href="#端口类型"><span>端口类型</span></a></h3><h4 id="周知端口-well-known-ports" tabindex="-1"><a class="header-anchor" href="#周知端口-well-known-ports"><span>周知端口（Well Known Ports）</span></a></h4><ul><li><p>周知端口是众所周知的端口号，也叫知名端口、公认端口或者常用端口，<strong>范围从 0 到 1023</strong>，它们紧密绑定于一些特定的服务，例如 80 端口分配给 WWW 服务，21 端口分配给 FTP 服务，23 端口分配给Telnet服务等等</p></li><li><p>我们在 IE 的地址栏里输入一个网址的时候是不必指定端口号的，因为在默认情况下WWW 服务的端口是 “80”</p></li><li><p>网络服务是可以使用其他端口号的，如果不是默认的端口号则应该在地址栏上指定端口号，方法是<strong>在地址后面加上冒号“:”（半角），再加上端口号</strong>。比如使用 “8080” 作为 WWW服务的端口，则需要在地址栏里输入<code>网址:8080</code></p></li><li><p>有些系统协议使用固定的端口号，它是不能被改变的，比如 139 端口专门用于 NetBIOS 与 TCP/IP 之间的通信，不能手动改变</p></li></ul><h4 id="注册端口-registered-ports" tabindex="-1"><a class="header-anchor" href="#注册端口-registered-ports"><span>注册端口（Registered Ports）</span></a></h4><ul><li><strong>端口号从 1024 到 49151</strong>，它们松散地绑定于一些服务，分配给用户进程或应用程序，这些进程主要是用户选择安装的一些应用程序，而不是已经分配好了公认端口的常用程序。这些端口在没有被服务器资源占用的时候，可以用用户端动态选用为源端口</li></ul><h4 id="动态端口-私有端口-dynamic-ports-private-ports" tabindex="-1"><a class="header-anchor" href="#动态端口-私有端口-dynamic-ports-private-ports"><span>动态端口 / 私有端口（Dynamic Ports / Private Ports）</span></a></h4><ul><li>动态端口的范围是从 <strong>49152 到 65535</strong>，之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配</li></ul><h2 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型"><span>网络模型</span></a></h2><h3 id="osi七层参考模型" tabindex="-1"><a class="header-anchor" href="#osi七层参考模型"><span>OSI七层参考模型</span></a></h3><ul><li>七层模型，亦称 <code>OSI（Open System Interconnection）参考模型</code>，即<code>开放式系统互联</code>。参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系，一般称为 OSI 参考模型或七层模型</li><li>它是一个七层的、抽象的模型体，不仅包括一系列抽象的术语或概念，也包括具体的协议</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113162413475.png" alt="image-20211113162413475"></p><ul><li><strong>物理层</strong>：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的<strong>主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输，到达目的地后再转化为1、0，也就是我们常说的数模转换与模数转换）</strong>。这一层的数据叫做<strong>比特</strong></li><li><strong>数据链路层</strong>：建立<strong>逻辑连接</strong>、进行<strong>硬件地址寻址</strong>、<strong>差错校验</strong>等功能。定义了如何让格式化数据<strong>以帧为单位</strong>进行传输，以及如何让控制对物理介质的访问。<strong>将比特组合成字节进而组合成帧，用MAC地址访问介质</strong></li><li><strong>网络层</strong>：进行<strong>逻辑地址寻址</strong>，在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层</li><li><strong>传输层</strong>：<strong>定义了一些传输数据的协议和端口号</strong>（ WWW 端口 80 等），如：<strong>TCP</strong>（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），<strong>UDP</strong>（用户数据报协议，与TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段</li><li><strong>会话层</strong>：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求</li><li><strong>表示层</strong>：数据的表示、安全、压缩。主要是<strong>进行对接收的数据进行解释、加密与解密、压缩与解压缩</strong>等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等）</li><li><strong>应用层</strong>：网络服务与最终用户的一个接口。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务</li></ul><h3 id="tcp-ip四层模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip四层模型"><span>TCP/IP四层模型</span></a></h3><h4 id="简介-图可能有错误" tabindex="-1"><a class="header-anchor" href="#简介-图可能有错误"><span>简介（==图可能有错误==）</span></a></h4><ul><li>现在 Internet（因特网）使用的主流协议族是 <strong>TCP/IP 协议族</strong>，它是一个分层、多协议的通信体系。TCP/IP协议族是一个四层协议系统，自底而上分别是<code>数据链路层</code>、<code>网络层</code>、<code>传输层</code>和<code>应用层</code>。每一层完成不同的功能，且通过若干协议来实现，上层协议使用下层协议提供的服务</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113170131416.png" alt="image-20211113170131416"></p><h4 id="osi七层与tcp-ip四层" tabindex="-1"><a class="header-anchor" href="#osi七层与tcp-ip四层"><span>OSI七层与TCP/IP四层</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113170257066.png" alt="image-20211113170257066"></p><h4 id="四层介绍" tabindex="-1"><a class="header-anchor" href="#四层介绍"><span>四层介绍</span></a></h4><ul><li><code>应用层</code>：应用层是 TCP/IP 协议的第一层，是直接为应用进程提供服务的 <ul><li>对不同种类的应用程序它们会根据自己的需要来使用应用层的不同协议，邮件传输应用使用了 SMTP 协议、万维网应用使用了 HTTP 协议、远程登录服务应用使用了有 TELNET 协议</li><li>应用层还能加密、解密、格式化数据</li><li>应用层可以建立或解除与其他节点的联系，这样可以充分节省网络资源</li></ul></li><li><code>传输层</code>：作为 TCP/IP 协议的第二层，运输层在整个 TCP/IP 协议中起到了中流砥柱的作用。且在运输层中， TCP 和 UDP 也同样起到了中流砥柱的作用</li><li><code>网络层</code>：网络层在 TCP/IP 协议中的位于第三层。在 TCP/IP 协议中网络层可以进行网络连接的建立和终止以及 IP 地址的寻找等功能</li><li><code>网络接口层</code>：在 TCP/IP 协议中，网络接口层位于第四层。由于网络接口层兼并了物理层和数据链路层所以，网络接口层既是传输数据的物理媒介，也可以为网络层提供一条准确无误的线路</li></ul><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议"><span>协议</span></a></h2><h3 id="简介-4" tabindex="-1"><a class="header-anchor" href="#简介-4"><span>简介</span></a></h3><ul><li><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：<code>语法</code>、<code>语义</code>、<code>时序</code></p></li><li><p>为了使数据在网络上从源到达目的，网络通信的参与方必须遵循相同的规则，这套规则称为<code>协议（protocol）</code>，它最终体现为在网络上传输的数据包的格式</p></li><li><p>协议往往分成几个层次进行定义，分层定义是为了使某一层协议的改变不影响其他层次的协议</p></li></ul><h3 id="常见协议" tabindex="-1"><a class="header-anchor" href="#常见协议"><span>常见协议</span></a></h3><ul><li>应用层协议 <ul><li>FTP协议（File Transfer Protocol 文件传输协议）</li><li>HTTP协议（Hyper Text Transfer Protocol 超文本传输协议）</li><li>NFS（Network File System 网络文件系统）</li></ul></li><li>传输层协议 <ul><li>TCP协议（Transmission Control Protocol 传输控制协议）</li><li>UDP协议（User Datagram Protocol 用户数据报协议）</li></ul></li><li>网络层协议 <ul><li>IP 协议（Internet Protocol 因特网互联协议）</li><li>ICMP 协议（Internet Control Message Protocol 因特网控制报文协议）</li><li>IGMP 协议（Internet Group Management Protocol 因特网组管理协议）。</li></ul></li><li>网络接口层协议 <ul><li>ARP协议（Address Resolution Protocol 地址解析协议）</li><li>RARP协议（Reverse Address Resolution Protocol 反向地址解析协议）</li></ul></li></ul><h3 id="udp协议" tabindex="-1"><a class="header-anchor" href="#udp协议"><span>UDP协议</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113201253530.png" alt="image-20211113201253530"></p><ul><li>源端口号：发送方端口号</li><li>目的端口号：接收方端口号</li><li>长度：UDP用户数据报的长度，最小值是8（仅有首部）</li><li>校验和：检测UDP用户数据报在传输中是否有错，有错就丢弃</li></ul><h3 id="tcp协议" tabindex="-1"><a class="header-anchor" href="#tcp协议"><span>TCP协议</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113201404105.png" alt="image-20211113201404105"></p><ul><li>源端口号：发送方端口号</li><li>目的端口号：接收方端口号</li><li>序号：本报文段的数据的第一个字节的序号</li><li>确认号：期望收到对方下一个报文段的第一个数据字节的序号</li><li>头部长度（数据偏移）：TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远，即首部长度。==单位：32位，即以 4 字节为计算单位==？？？</li><li>保留：占 6 位，保留为今后使用，目前应置为 0</li><li>紧急 <code>URG</code> ：此位置 1 ，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应尽快传送</li><li>确认 <code>ACK</code>：仅当 ACK=1 时确认号字段才有效，TCP 规定，在连接建立后所有传达的报文段都必须把 ACK 置1</li><li>推送 <code>PSH</code>：当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能够收到对方的响应。在这种情况下，TCP 就可以使用推送（push）操作，这时，发送方TCP 把 PSH 置 1，并立即创建一个报文段发送出去，接收方收到 PSH = 1 的报文段，就尽快地（即“推送”向前）交付给接收应用进程，而不再等到整个缓存都填满后再向上交付</li><li>复位 <code>RST</code>：用于复位相应的 TCP 连接</li><li>同步 <code>SYN</code>：仅在三次握手建立 TCP 连接时有效。当 SYN = 1 而 ACK = 0 时，表明这是一个连接请求报文段，对方若同意建立连接，则应在相应的报文段中使用 SYN = 1 和 ACK = 1。因此，SYN 置1 就表示这是一个连接请求或连接接受报文</li><li>终止 <code>FIN</code>：用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放运输连接</li><li>窗口：指发送本报文段的一方的接收窗口（而不是自己的发送窗口）</li><li>校验和：校验和字段检验的范围包括首部和数据两部分，在计算校验和时需要加上 12 字节的伪头部</li><li>紧急指针：仅在 URG = 1 时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据），即指出了紧急数据的末尾在报文中的位置，注意：即使窗口为零时也可发送紧急数据</li><li>选项：长度可变，最长可达 40 字节，当没有使用选项时，TCP 首部长度是 20 字节</li></ul><h3 id="ip协议" tabindex="-1"><a class="header-anchor" href="#ip协议"><span>IP协议</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211113205020978.png" alt="image-20211113205020978"></p><ul><li>版本号：IP 协议的版本。通信双方使用过的 IP 协议的版本必须一致，目前最广泛使用的 IP 协议版本号为 4（即IPv4)</li><li>头部长度：单位是 32 位（4 字节）</li><li>服务类型：一般不适用，取值为 0</li><li>总长度：指首部加上数据的总长度，单位为字节</li><li>标识（identification）：IP 软件在存储器中维持一个计数器，每产生一个数据报，计数器就加 1，并将此值赋给标识字段</li><li>标志（flag）：目前只有两位有意义 <ul><li>标志字段中的最低位记为 MF。MF = 1 即表示后面“还有分片”的数据报。MF = 0 表示这已是若干数据报片中的最后一个</li><li>标志字段中间的一位记为 DF，意思是“不能分片”，只有当 DF = 0 时才允许分片</li></ul></li><li>片偏移：指出较长的分组在分片后，某片在源分组中的相对位置，也就是说，相对于用户数据段的起点，该片从何处开始。片偏移以 8 字节为偏移单位</li><li>生存时间：TTL，表明是数据报在网络中的寿命，即为<code>跳数限制</code>，由发出数据报的源点设置这个字段。路由器在转发数据之前就把 TTL 值减一，当 TTL 值减为零时，就丢弃这个数据报，常见为<strong>64和128</strong></li><li>协议：指出此数据报携带的数据时使用何种协议，以便使目的主机的 IP 层知道应将数据部分上交给哪个处理过程，常用的 ICMP(1)，IGMP(2)，TCP(6)，UDP(17)，IPv6（41）</li><li>首部校验和：只校验数据报的首部，不包括数据部分</li><li>源地址：发送方 IP 地址</li><li>目的地址：接收方 IP 地址</li></ul><h3 id="以太网帧协议" tabindex="-1"><a class="header-anchor" href="#以太网帧协议"><span>以太网帧协议</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211116222906658.png" alt="image-20211116222906658"></p><ul><li>类型 <ul><li>0x800表示 IP</li><li>0x806表示 ARP</li><li>0x835表示 RARP</li></ul></li></ul><h3 id="arp协议" tabindex="-1"><a class="header-anchor" href="#arp协议"><span>ARP协议</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211116222942537.png" alt="image-20211116222942537"></p><ul><li>硬件类型：1 表示 MAC 地址</li><li>协议类型：0x800 表示 IP 地址</li><li>硬件地址长度：6</li><li>协议地址长度：4</li><li>操作 <ul><li>1 表示 ARP 请求</li><li>2 表示 ARP 应答</li><li>3 表示 RARP 请求</li><li>4 表示 RARP 应答</li></ul></li></ul><h2 id="网络通信流程" tabindex="-1"><a class="header-anchor" href="#网络通信流程"><span>网络通信流程</span></a></h2><h3 id="封装与分用" tabindex="-1"><a class="header-anchor" href="#封装与分用"><span>封装与分用</span></a></h3><ul><li><p><strong>发送端</strong>通过TCP/IP中每一层时需要将消息<code>封装</code>对应信息，然后<strong>接收端</strong>通过过TCP/IP中每一层时需要将消息<code>分用（解封装）</code>对应信息</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117123435389.png" alt="image-20211117123435389"></p></li><li><p>封装</p><blockquote><p>上层协议是如何使用下层协议提供的服务的呢？其实这是通过封装（encapsulation）实现的。应用程序数据在发送到物理网络上之前，将沿着协议栈从上往下依次传递。每层协议都将在上层数据的基础上加上自己的头部信息（有时还包括尾部信息），以实现该层的功能，这个过程就称为封装</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117123350798.png" alt="image-20211117123350798"></p></li><li><p>分用</p><blockquote><p>当帧到达目的主机时，将沿着协议栈自底向上依次传递。各层协议依次处理帧中本层负责的头部数据，以获取所需的信息，并最终将处理后的帧交给目标应用程序。这个过程称为分用（demultiplexing）。分用是依靠头部信息中的类型字段实现的</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117123420044.png" alt="image-20211117123420044"></p></li></ul><h3 id="实例-qq发送消息简易流程" tabindex="-1"><a class="header-anchor" href="#实例-qq发送消息简易流程"><span>实例：QQ发送消息简易流程</span></a></h3><ul><li>存在的问题：在数据链路层封装以太网帧时，怎么知道目标机器的MAC地址？=&gt;通过<code>arp协议</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117123812988.png" alt="image-20211117123812988"></p><h3 id="arp协议-1" tabindex="-1"><a class="header-anchor" href="#arp协议-1"><span>ARP协议</span></a></h3><ul><li>arp协议通过IP地址找到MAC地址，通过<strong>广播arp请求找到</strong>，局域网内根据信息解析得到<code>arp应答</code></li><li>rarp协议通过MAC地址找IP地址</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117125629434.png" alt="image-20211117125629434"></p><h1 id="socket通信" tabindex="-1"><a class="header-anchor" href="#socket通信"><span>socket通信</span></a></h1><h2 id="socket介绍" tabindex="-1"><a class="header-anchor" href="#socket介绍"><span>socket介绍</span></a></h2><ul><li><p><code>socket（套接字）</code>，就是对网络中<strong>不同主机</strong>上的应用进程之间进行<strong>双向通信</strong>的端点的抽象</p><blockquote><p>一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口</p></blockquote></li><li><p>socket 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念</p><blockquote><p>它是网络环境中进程间通信的 API，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 socket 中，该 socket 通过与网络接口卡（NIC）相连的传输介质将这段信息送到另外一台主机的 socket 中，使对方能够接收到这段信息。socket 是由 IP 地址和端口结合的，提供向应用层进程传送数据包的机制</p></blockquote></li><li><p>socket 本身有“插座”的意思，在 Linux 环境下，用于表示进程间网络通信的特殊文件类型。<strong>本质为内核借助缓冲区形成的伪文件</strong></p><blockquote><p>既然是文件，那么理所当然的，我们可以使用文件描述符引用套接字。与管道类似的，Linux 系统将其封装成文件的目的是为了统一接口，使得读写套接字和读写文件的操作一致。区别是管道主要应用于本地进程间通信，而套接字多应用于网络进程间数据的传递</p></blockquote></li><li><p>套接字通信分两部分</p><ul><li>服务器端：被动接受连接，一般不会主动发起连接</li><li>客户端：主动向服务器发起连接</li></ul></li><li><p>socket是一套通信的接口，Linux 和 Windows 都有，但是有一些细微的差别</p></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117194644130.png" alt="image-20211117194644130"></p><h2 id="字节序" tabindex="-1"><a class="header-anchor" href="#字节序"><span>字节序</span></a></h2><h3 id="简介-5" tabindex="-1"><a class="header-anchor" href="#简介-5"><span>简介</span></a></h3><ul><li><code>字节序</code>，顾名思义字节的顺序，就是<strong>大于一个字节类型的数据在内存中的存放顺序</strong>(一个字节的数据当然就无需谈顺序的问题了)</li><li>字节序分为<code>大端字节序（Big-Endian）</code> 和<code>小端字节序（Little-Endian）</code><ul><li><strong>大端字节序</strong>：指一个整数的最高位字节（23 ~ 31 bit）存储在内存的低地址处，低位字节（0 ~ 7 bit）存储在内存的高地址处</li><li><strong>小端字节序</strong>：指整数的高位字节存储在内存的高地址处，而低位字节则存储在内存的低地址处</li></ul></li></ul><blockquote><p>现代 CPU 的累加器一次都能装载（至少）4 字节（这里考虑 32 位机），即一个整数。那么这 4字节在内存中排列的顺序将影响它被累加器装载成的整数的值，这就是字节序问题</p><p>在各种计算机体系结构中，对于字节、字等的存储机制有所不同，因而引发了计算机通信领域中一个很重要的问题，即通信双方交流的信息单元（比特、字节、字、双字等等）应该以什么样的顺序进行传送。如果不达成一致的规则，通信双方将无法进行正确的编码/译码从而导致通信失败</p></blockquote><h3 id="字节序举例" tabindex="-1"><a class="header-anchor" href="#字节序举例"><span>字节序举例</span></a></h3><ul><li><p>大端字节序</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117200601434.png" alt="image-20211117200601434"></p></li><li><p>小端字节序</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117200550220.png" alt="image-20211117200550220"></p></li></ul><h3 id="查看机器字节序" tabindex="-1"><a class="header-anchor" href="#查看机器字节序"><span>查看机器字节序</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">union</span><span class="token punctuation">{</span>
        <span class="token keyword">short</span> value<span class="token punctuation">;</span>                <span class="token comment">// 两字节</span>
        <span class="token keyword">char</span> bytes<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 两字节</span>
    <span class="token punctuation">}</span>test<span class="token punctuation">;</span>
    
    test<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0x0102</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;大端机器\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> test<span class="token punctuation">.</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;小端机器\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;未知\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117201645270.png" alt="image-20211117201645270"></p><h3 id="字节序转换函数" tabindex="-1"><a class="header-anchor" href="#字节序转换函数"><span>字节序转换函数</span></a></h3><ul><li><p>当格式化的数据在两台使用不同字节序的主机之间直接传递时，接收端必然错误的解释之。解决问题的方法是：<strong>发送端总是把要发送的数据转换成大端字节序数据后再发送</strong>，而接收端知道对方传送过来的数据总是采用大端字节序，所以接收端可以根据自身采用的字节序决定是否对接收到的数据进行转换（小端机转换，大端机不转换）</p></li><li><p><strong>网络字节顺序</strong>是 TCP/IP 中规定好的一种数据表示格式，它与具体的 CPU 类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释，网络字节顺序采用大端排序方式</p></li><li><p>BSD Socket提供了封装好的转换接口，方便程序员使用</p><ul><li>从主机字节序到网络字节序的转换函数：<code>htons</code>、<code>htonl</code></li><li>从网络字节序到主机字节序的转换函数：<code>ntohs</code>、<code>ntohl</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>h  <span class="token operator">-</span> host 主机，主机字节序 
to <span class="token operator">-</span> 转换成什么 
n  <span class="token operator">-</span> network 网络字节序 
s  <span class="token operator">-</span> <span class="token keyword">short</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> 
l  <span class="token operator">-</span> <span class="token keyword">long</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span> </span>
<span class="token comment">// 转换端口 </span>
<span class="token class-name">uint16_t</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> hostshort<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机字节序 =&gt; 网络字节序 </span>
<span class="token class-name">uint16_t</span> <span class="token function">ntohs</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> netshort<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机字节序 =&gt; 网络字节序 </span>
<span class="token comment">// 转IP </span>
<span class="token class-name">uint32_t</span> <span class="token function">htonl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> hostlong<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机字节序 =&gt; 网络字节序 </span>
<span class="token class-name">uint32_t</span> <span class="token function">ntohl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> netlong<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机字节序 =&gt; 网络字节序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实例：模拟主机与网络IP及端口转换（本机为小端机器）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 主机字节序转网络字节序</span>
    <span class="token comment">// IP转换</span>
    <span class="token keyword">char</span> ip1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ip1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> convet1 <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>convet1<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p1 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 端口转换</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port1 <span class="token operator">=</span> <span class="token number">0x0102</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> conv_port1 <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;port1: %x\\n&quot;</span><span class="token punctuation">,</span> port1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;conv_port1: %x\\n&quot;</span><span class="token punctuation">,</span> conv_port1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;====================\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 网络字节序转主机字节序</span>
    <span class="token comment">// IP转换</span>
    <span class="token keyword">char</span> ip2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ip2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> convet2 <span class="token operator">=</span> <span class="token function">ntohl</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>convet2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p2 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 端口转换</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port2 <span class="token operator">=</span> <span class="token number">0x0201</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> conv_port2 <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;port2: %x\\n&quot;</span><span class="token punctuation">,</span> port2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;conv_port2: %x\\n&quot;</span><span class="token punctuation">,</span> conv_port2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117210302318.png" alt="image-20211117210302318"></p></li></ul><h2 id="socket地址" tabindex="-1"><a class="header-anchor" href="#socket地址"><span>socket地址</span></a></h2><h3 id="简介-6" tabindex="-1"><a class="header-anchor" href="#简介-6"><span>简介</span></a></h3><ul><li>socket地址其实是一个<code>结构体</code>，<strong>封装端口号和IP等信息</strong></li><li>后面的socket相关的api中需要使用到这个 socket地址</li></ul><h3 id="通用-socket-地址" tabindex="-1"><a class="header-anchor" href="#通用-socket-地址"><span><strong>通用</strong> <strong>socket</strong> 地址</span></a></h3><ul><li><p>socket 网络编程接口中表示 socket 地址的是结构体 <code>sockaddr</code>，其定义如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/socket.h&gt;</span> </span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span> 
    <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token class-name">sa_family_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>sa_family</code></p><ul><li><code>sa_family</code> 成员是地址族类型（<code>sa_family_t</code>）的变量</li><li><code>地址族类型</code>通常与<code>协议族类型</code>对应</li><li>宏 <code>PF_*</code> 和 <code>AF_*</code> 都定义在 <code>bits/socket.h</code> 头文件中，且后者与前者有完全相同的值，所以二者通常混用</li></ul><table><thead><tr><th style="text-align:center;">协议族</th><th style="text-align:center;">地址族</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">PF_UNIX</td><td style="text-align:center;">AF_UNIX</td><td style="text-align:center;">UNIX本地域协议族</td></tr><tr><td style="text-align:center;">PF_INET</td><td style="text-align:center;">AF_INET</td><td style="text-align:center;">TCP/IPv4协议族</td></tr><tr><td style="text-align:center;">PF_INET6</td><td style="text-align:center;">AF_INET6</td><td style="text-align:center;">TCP/IPv6协议族</td></tr></tbody></table></li><li><p><code>sa_data</code></p><ul><li><code>sa_data</code> 成员用于存放 socket 地址值，不同的协议族的地址值具有不同的含义和长度</li></ul><table><thead><tr><th style="text-align:center;">协议族</th><th style="text-align:center;">地址值含义和长度</th></tr></thead><tbody><tr><td style="text-align:center;">PF_UNIX</td><td style="text-align:center;">文件的路径名，长度可达到108字节</td></tr><tr><td style="text-align:center;">PF_INET</td><td style="text-align:center;">16 bit 端口号和 32 bit IPv4 地址，共 6 字节</td></tr><tr><td style="text-align:center;">PF_INET6</td><td style="text-align:center;">16 bit 端口号，32 bit 流标识，128 bit IPv6 地址，32 bit 范围 ID，共 26 字节</td></tr></tbody></table><ul><li><p>由上表可知，14 字节的 sa_data 根本无法容纳多数协议族的地址值。因此，Linux 定义了下面这个新的通用的 socket 地址结构体，这个结构体不仅提供了足够大的空间用于存放地址值，而且是内存对齐的</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/socket.h&gt;</span> </span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> __ss_align<span class="token punctuation">;</span> 
    <span class="token keyword">char</span> __ss_padding<span class="token punctuation">[</span> <span class="token number">128</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>__ss_align<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token class-name">sa_family_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="专用socket地址" tabindex="-1"><a class="header-anchor" href="#专用socket地址"><span>专用socket地址</span></a></h3><h4 id="简介-7" tabindex="-1"><a class="header-anchor" href="#简介-7"><span>简介</span></a></h4><ul><li><p>很多网络编程函数诞生早于 IPv4 协议，那时候都使用的是 <code>struct sockaddr</code> 结构体，为了向前兼容，现在<code>sockaddr</code> 退化成了（void *）的作用，传递一个地址给函数，至于这个函数是 <code>sockaddr_in</code> 还是<code>sockaddr_in6</code>，由地址族确定，然后函数内部再强制类型转化为所需的地址类型</p></li><li><p>不同socket地址对比图</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117213426327.png" alt="image-20211117213426327"></p></li><li><p>所有专用 socket 地址（以及 sockaddr_storage）类型的变量在实际使用时都需要转化为通用 socket 地址类型 sockaddr（强制转化即可），因为所有 socket 编程接口使用的地址参数类型都是 sockaddr</p></li></ul><h4 id="unix-本地域协议族" tabindex="-1"><a class="header-anchor" href="#unix-本地域协议族"><span>UNIX 本地域协议族</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span> </span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span> 
    <span class="token keyword">char</span> sun_path<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tcp-ip协议族" tabindex="-1"><a class="header-anchor" href="#tcp-ip协议族"><span>TCP/IP协议族</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// IPV4</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span> </span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span> <span class="token comment">/* __SOCKADDR_COMMON(sin_) */</span> 
    <span class="token class-name">in_port_t</span> sin_port<span class="token punctuation">;</span> <span class="token comment">/* Port number. */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span> <span class="token comment">/* Internet address. */</span> 
    <span class="token comment">/* Pad to size of \`struct sockaddr&#39;. */</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token punctuation">)</span> <span class="token operator">-</span> __SOCKADDR_COMMON_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">in_port_t</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span> 
    <span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// IPV6</span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in6</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sin6_family<span class="token punctuation">;</span> 
    <span class="token class-name">in_port_t</span> sin6_port<span class="token punctuation">;</span> <span class="token comment">/* Transport layer port # */</span> 
    <span class="token class-name">uint32_t</span> sin6_flowinfo<span class="token punctuation">;</span> <span class="token comment">/* IPv6 flow information */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">in6_addr</span> sin6_addr<span class="token punctuation">;</span> <span class="token comment">/* IPv6 address */</span> 
    <span class="token class-name">uint32_t</span> sin6_scope_id<span class="token punctuation">;</span> <span class="token comment">/* IPv6 scope-id */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 相关定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token class-name">uint16_t</span><span class="token punctuation">;</span> 
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">uint32_t</span><span class="token punctuation">;</span> 
<span class="token keyword">typedef</span> <span class="token class-name">uint16_t</span> <span class="token class-name">in_port_t</span><span class="token punctuation">;</span> 
<span class="token keyword">typedef</span> <span class="token class-name">uint32_t</span> <span class="token class-name">in_addr_t</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SOCKADDR_COMMON_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ip地址转换" tabindex="-1"><a class="header-anchor" href="#ip地址转换"><span>IP地址转换</span></a></h2><ul><li><p><code>点分十进制</code>IP地址与<code>网络字节序整数</code>IP地址相互转换</p><blockquote><p>通常，人们习惯用可读性好的字符串来表示 IP 地址，比如用点分十进制字符串表示 IPv4 地址，以及用十六进制字符串表示 IPv6 地址。但编程中我们需要先把它们转化为整数（二进制数）方能使用。而记录日志时则相反，我们要把整数表示的 IP 地址转化为可读的字符串</p></blockquote></li><li><p>旧版（已弃用）：只适用于IPV4间的转换</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span> </span>
<span class="token class-name">in_addr_t</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token function">inet_aton</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span>inp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新版：同时适用于IPV4和IPV6</p><ul><li>字母含义 <ul><li><code>p</code>：点分十进制的IP字符串</li><li><code>n</code>：表示network，网络字节序的整数</li></ul></li><li><code>int inet_pton(int af, const char *src, void *dst); </code><ul><li>使用<code>man inet_pton</code>查看帮助</li><li>功能：将点分十进制的IP地址字符串，转换成网络字节序的整数</li><li>参数 <ul><li><code>af</code>：地址族 <ul><li>IPV4：<code>AF_INET</code></li><li>IPV6：<code>AF_INET6(IPV6)</code></li></ul></li><li><code>src</code>：需要转换的点分十进制的IP字符串</li><li><code>dst</code>：转换后的结果保存在这个里面</li></ul></li><li>返回值 <ul><li>1：成功</li><li>0：源IP地址有误</li><li>-1：地址族包含不可用的地址协议</li></ul></li></ul></li><li><code>const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);</code><ul><li>使用<code>man inet_ntop</code>查看帮助</li><li>功能：将网络字节序的整数，转换成点分十进制的IP地址字符串</li><li>参数 <ul><li><code>af</code>：地址族 <ul><li>IPV4：<code>AF_INET</code></li><li>IPV6：<code>AF_INET6(IPV6)</code></li></ul></li><li><code>src</code>：要转换的ip的整数的地址</li><li><code>dst</code>：转换成IP地址字符串保存的地方</li><li><code>size</code>：第三个参数的大小（数组的大小）</li></ul></li><li>返回值：返回转换后的数据的地址（字符串），和 dst 是一样的</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 创建一个ip字符串,点分十进制的IP地址字符串</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;192.168.1.4&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 将点分十进制的IP字符串转换成网络字节序的整数</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// 将网络字节序的IP整数转换成点分十进制的IP字符串</span>
    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span>  <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str : %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip : %s\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211117221901175.png" alt="image-20211117221901175"></p></li></ul><h2 id="tcp与udp区别" tabindex="-1"><a class="header-anchor" href="#tcp与udp区别"><span>TCP与UDP区别</span></a></h2><h3 id="简介-8" tabindex="-1"><a class="header-anchor" href="#简介-8"><span>简介</span></a></h3><ul><li><code>UDP</code>：用户数据报协议，面向无连接，可以单播，多播，广播， 面向数据报，不可靠</li><li><code>TCP</code>：传输控制协议，面向连接的，可靠的，基于字节流，仅支持单播传输</li></ul><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">UDP</th><th style="text-align:center;">TCP</th></tr></thead><tbody><tr><td style="text-align:center;">是否创建连接</td><td style="text-align:center;">无连接</td><td style="text-align:center;">面向连接</td></tr><tr><td style="text-align:center;">是否可靠</td><td style="text-align:center;">不可靠</td><td style="text-align:center;">可靠的</td></tr><tr><td style="text-align:center;">连接的对象个数</td><td style="text-align:center;">一对一、一对多、多对一、多对多</td><td style="text-align:center;">仅支持一对一</td></tr><tr><td style="text-align:center;">传输的方式</td><td style="text-align:center;">面向数据报</td><td style="text-align:center;">面向字节流</td></tr><tr><td style="text-align:center;">首部开销</td><td style="text-align:center;">8个字节</td><td style="text-align:center;">最少20个字节</td></tr><tr><td style="text-align:center;">适用场景</td><td style="text-align:center;">实时应用（视频会议，直播）</td><td style="text-align:center;">可靠性高的应用（文件传输）</td></tr></tbody></table><h2 id="tcp通信流程" tabindex="-1"><a class="header-anchor" href="#tcp通信流程"><span>TCP通信流程</span></a></h2><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图"><span>流程图</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121104748003.png" alt="image-20211121104748003"></p><h3 id="服务器端-被动接收连接" tabindex="-1"><a class="header-anchor" href="#服务器端-被动接收连接"><span>服务器端（被动接收连接）</span></a></h3><ol><li>创建一个用于监听的套接字 <ul><li>监听：监听有客户端的连接</li><li>套接字：这个套接字其实就是一个文件描述符</li></ul></li><li>将这个<code>监听文件描述符</code>和<strong>本地的IP和端口绑定</strong>（IP和端口就是服务器的地址信息） <ul><li>客户端连接服务器的时候使用的就是这个IP和端口</li></ul></li><li>设置监听，<code>监听的fd</code>开始工作</li><li>阻塞等待，当有客户端发起连接，解除阻塞，接受客户端的连接，会得到一个<code>和客户端通信的套接字(fd)</code></li><li>通信 <ul><li>接收数据</li><li>发送数据</li></ul></li><li>通信结束，断开连接</li></ol><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><ol><li>创建一个用于通信的套接字(fd)</li><li>连接服务器，需要指定连接的服务器的 IP 和 端口</li><li>连接成功了，客户端可以直接和服务器通信 <ul><li>接收数据</li><li>发送数据</li></ul></li><li>通信结束，断开连接</li></ol><h2 id="套接字函数" tabindex="-1"><a class="header-anchor" href="#套接字函数"><span>套接字函数</span></a></h2><ul><li><p>包含在下列头文件中</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span> <span class="token comment">// 包含了这个头文件，上面两个就可以省略(因为已经包含上面两个)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数一览</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int socket(int domain, int type, int protocol);</code></p><ul><li>功能：创建一个套接字</li><li>参数： <ul><li><code>domain</code>：协议族(常用如下) <ul><li><code>AF_INET</code> ：<code>ipv4</code></li><li><code>AF_INET</code>6 ：<code>ipv6</code></li><li><code>AF_UNIX</code>, <code>AF_LOCAL</code>：本地套接字通信（进程间通信）</li></ul></li><li><code>type</code>：通信过程中使用的协议类型 <ul><li><code>SOCK_STREAM</code> : 流式协议</li><li><code>SOCK_DGRAM</code> : 报式协议</li></ul></li><li><code>protocol</code>：具体的一个协议，一般写0，用于指定type参数的默认协议类型 <ul><li><code>SOCK_STREAM</code> : 流式协议默认使用 TCP</li><li><code>SOCK_DGRAM</code> : 报式协议默认使用 UDP</li></ul></li></ul></li><li>返回值 <ul><li>成功：返回文件描述符，操作的就是内核缓冲区</li><li>失败：-1</li></ul></li></ul></li><li><p><code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); </code></p><ul><li>功能：绑定，将fd 和本地的IP和端口进行绑定</li><li>参数： <ul><li><code>sockfd</code>：通过socket函数得到的文件描述符</li><li><code>addr</code>：需要绑定的socket地址，这个地址封装了<strong>本地的ip和端口号的信息</strong></li><li><code>addrlen</code>：第二个参数结构体占的内存大小</li></ul></li><li>返回值：成功：0，失败：-1</li></ul></li><li><p><code>int listen(int sockfd, int backlog);</code></p><ul><li><p>功能：监听这个socket上的连接</p></li><li><p>参数：</p><ul><li><p><code>sockfd</code>：通过socket()函数得到的文件描述符</p></li><li><p><code>backlog</code>：未连接的和已经连接的和的最大值，可用<code>cat /proc/sys/net/core/somaxconn</code>查看Linux设置值，==一般指定5就可以（视频说的，是否正确待验证）==</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121111847282.png" alt="image-20211121111847282"></p></li></ul></li><li><p>返回值：成功：0，失败：-1</p></li></ul></li><li><p><code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); </code></p><ul><li>功能：接收客户端连接，默认是一个阻塞的函数，阻塞等待客户端连接</li><li>参数： <ul><li><code>sockfd</code> : 用于监听的文件描述符</li><li><code>addr</code> : 传出参数，记录了连接成功后<strong>客户端的地址信息</strong>（ip，port）</li><li><code>addrlen</code> : 指定第二个参数的对应的内存大小</li></ul></li><li>返回值： <ul><li>成功：用于通信的文件描述符</li><li>失败：-1</li></ul></li></ul></li><li><p><code>int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code></p><ul><li>功能： 客户端连接服务器</li><li>参数： <ul><li><code>sockfd</code> : 用于**通信的文件描述符 **</li><li><code>addr</code> : 客户端要连接的服务器的地址信息</li><li><code>addrlen</code> : 指定第二个参数的对应的内存大小</li></ul></li><li>返回值：成功 0， 失败 -1</li></ul></li><li><p>其他读写函数：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写数据 </span>
<span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="实例-tcp通信" tabindex="-1"><a class="header-anchor" href="#实例-tcp通信"><span>实例：TCP通信</span></a></h2><h3 id="服务器端" tabindex="-1"><a class="header-anchor" href="#服务器端"><span>服务器端</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建socket（用于监听的套接字）</span>
    <span class="token keyword">int</span> listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2. 绑定</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token comment">// 点分十进制转换为网络字节序</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端也可以绑定0.0.0.0即任意地址</span>
    <span class="token comment">// server_addr.sin_addr.s_addr = INADDR_ANY;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3. 监听</span>
    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4. 接收客户端连接</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_addr<span class="token punctuation">;</span>
    <span class="token class-name">socklen_t</span> client_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 输出客户端信息，IP组成至少16个字符（包含结束符）</span>
    <span class="token keyword">char</span> client_ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> client_port <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip:%s, port:%d\\n&quot;</span><span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> client_port<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// 5. 开始通信</span>
    <span class="token comment">// 服务端先接收客户端信息，再向客户端发送数据</span>
    <span class="token comment">// 接收数据</span>
    <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv client data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 表示客户端断开连接</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;hello, i am server&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
        <span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭文件描述符</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端-1" tabindex="-1"><a class="header-anchor" href="#客户端-1"><span>客户端</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建socket（用于通信的套接字）</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 连接服务器端</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 通信</span>
            <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;client message&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
        <span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 接收数据</span>
        ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv client data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 表示服务端断开连接</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关闭连接</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通信效果" tabindex="-1"><a class="header-anchor" href="#通信效果"><span>通信效果</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121133101783.png" alt="image-20211121133101783"></p><h2 id="tcp三次握手——建立连接" tabindex="-1"><a class="header-anchor" href="#tcp三次握手——建立连接"><span>TCP三次握手——建立连接</span></a></h2><ul><li>此节需要结合<code>网络基础-&gt;协议-&gt;TCP协议</code>一起看</li></ul><h3 id="简易图示" tabindex="-1"><a class="header-anchor" href="#简易图示"><span>简易图示</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121144550714.png" alt="image-20211121144550714"></p><h3 id="握手流程" tabindex="-1"><a class="header-anchor" href="#握手流程"><span>握手流程</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121145128707.png" alt="image-20211121145128707"></p><h4 id="第一次握手" tabindex="-1"><a class="header-anchor" href="#第一次握手"><span>第一次握手</span></a></h4><ul><li>客户端将SYN标志位置为1</li><li>生成一个随机的32位的序号seq=J ， 这个序号后边是可以携带数据（数据的大小）</li></ul><h4 id="第二次握手" tabindex="-1"><a class="header-anchor" href="#第二次握手"><span>第二次握手</span></a></h4><ul><li>服务器端接收客户端的连接： ACK=1</li><li>服务器会回发一个确认序号： ack=客户端的序号 + 数据长度 + SYN/FIN(按一个字节算)</li><li>服务器端会向客户端发起连接请求： SYN=1</li><li>服务器会生成一个随机序号：seq = K</li></ul><h4 id="第三次握手" tabindex="-1"><a class="header-anchor" href="#第三次握手"><span>第三次握手</span></a></h4><ul><li>客户端应答服务器的连接请求：ACK=1</li><li>客户端回复收到了服务器端的数据：ack=服务端的序号 + 数据长度 + SYN/FIN(按一个字节算)</li></ul><h3 id="示例-携带数据通信流程" tabindex="-1"><a class="header-anchor" href="#示例-携带数据通信流程"><span>示例：携带数据通信流程</span></a></h3><ul><li>括号内数字代表携带数据大小</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121151016137.png" alt="image-20211121151016137"></p><h2 id="tcp滑动窗口——流量控制" tabindex="-1"><a class="header-anchor" href="#tcp滑动窗口——流量控制"><span>TCP滑动窗口——流量控制</span></a></h2><h3 id="简介-9" tabindex="-1"><a class="header-anchor" href="#简介-9"><span>简介</span></a></h3><ul><li><code>滑动窗口</code>是 TCP 中实现诸如 ACK 确认、流量控制、拥塞控制的承载结构</li><li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着<strong>接收方还有多大的缓冲区可以用于接收数据</strong>。<strong>发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据</strong>。当滑动窗口为 0时，发送方一般不能再发送数据报</li></ul><blockquote><p>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题</p><p>滑动窗口协议是用来改善吞吐量的一种技术，即容许发送方在接收任何应答之前传送附加的包。接收方告诉发送方在某一时刻能送多少包（称窗口尺寸）</p></blockquote><h3 id="滑动窗口与缓冲区" tabindex="-1"><a class="header-anchor" href="#滑动窗口与缓冲区"><span>滑动窗口与缓冲区</span></a></h3><ul><li><p><strong>滑动窗口可以理解为缓冲区的大小</strong></p></li><li><p>滑动窗口的大小会随着发送数据和接收数据而变化，通信的双方都有发送缓冲区和接收数据的缓冲区</p></li><li><p>图示说明：单向发送数据（发送端-&gt;接收端）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121153104245.png" alt="image-20211121153104245"></p><ul><li>发送方的缓冲区 <ul><li>白色格子：空闲的空间</li><li>灰色格子：数据已经被发送出去了，但是还没有被接收</li><li>紫色格子：还没有发送出去的数据</li></ul></li><li>接收方的缓冲区 <ul><li>白色格子：空闲的空间</li><li>紫色格子：已经接收到的数据</li></ul></li></ul></li></ul><h2 id="tcp四次挥手——断开连接" tabindex="-1"><a class="header-anchor" href="#tcp四次挥手——断开连接"><span>TCP四次挥手——断开连接</span></a></h2><h3 id="简易图示-1" tabindex="-1"><a class="header-anchor" href="#简易图示-1"><span>简易图示</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121154555977.png" alt="image-20211121154555977"></p><h3 id="挥手流程" tabindex="-1"><a class="header-anchor" href="#挥手流程"><span>挥手流程</span></a></h3><ul><li>四次挥手发生在断开连接的时候，在程序中当调用了<code>close()</code>会使用TCP协议进行四次挥手</li><li>客户端和服务器端都可以主动发起断开连接，谁先调用<code>close()</code>谁就是发起方</li><li>因为在TCP连接的时候，采用三次握手建立的的连接是双向的，在断开的时候需要双向断开</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121154857445.png" alt="image-20211121154857445"></p><h2 id="实例-完整的tcp通信" tabindex="-1"><a class="header-anchor" href="#实例-完整的tcp通信"><span>实例：完整的TCP通信</span></a></h2><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121155042845.png" alt="image-20211121155042845"></p><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h3><ul><li><p>图中<code>MSS</code>表示Maximum Segment Size(一条数据的最大的数据量)</p></li><li><p><code>win</code>表示滑动窗口大小</p></li><li><p>图中部分<code>ACK</code>应为确认号<code>ack</code>，而非标志位<code>ACK</code></p></li></ul><h3 id="流程说明" tabindex="-1"><a class="header-anchor" href="#流程说明"><span>流程说明</span></a></h3><ol><li><p>第1次，<strong>第一次握手</strong>，客户端向服务器发起连接，客户端的滑动窗口大小是4096，一次发送的最大数据量是1460</p></li><li><p>第2次，<strong>第二次握手</strong>，服务器接收连接情况，告诉客户端服务器的窗口大小是6144，一次发送的最大数据量是1024</p></li><li><p>第3次，<strong>第三次握手</strong></p></li><li><p>第4-9次，客户端连续给服务器发送了6k的数据，每次发送1k</p></li><li><p>第10次，服务器告诉客户端：发送的6k数据以及接收到，存储在缓冲区中，缓冲区数据已经处理了2k，窗口大小是2k(还剩4k未处理，后面同理，不再做单独说明)</p></li><li><p>第11次，服务器告诉客户端：发送的6k数据以及接收到，存储在缓冲区中，缓冲区数据已经处理了4k，窗口大小是4k</p></li><li><p>第12次，客户端给服务器发送了1k的数据</p></li><li><p>第13次，<strong>第一次挥手</strong>，客户端主动请求和服务器断开连接，并且给服务器发送了1k的数据</p></li><li><p>第14-16次，<strong>第二次挥手</strong>，服务器回复ACK 8194(包含FIN标记，所以结果上多加了1)，表示<strong>同意断开连接的请求</strong>，并通知客户端依次已经处理了2k，4k，6k数据，滑动窗口大小依次为2k，4k，6k</p></li><li><p>第17次，<strong>第三次挥手</strong>，服务器端给客户端发送FIN，请求断开连接</p></li><li><p>第18次，<strong>第四次回收</strong>，客户端同意了服务器端的断开请求</p></li></ol><h2 id="tcp通信并发" tabindex="-1"><a class="header-anchor" href="#tcp通信并发"><span>TCP通信并发</span></a></h2><h3 id="注解-1" tabindex="-1"><a class="header-anchor" href="#注解-1"><span>注解</span></a></h3><ul><li>要实现TCP通信服务器处理并发的任务，使用多进程或者多线程来解决</li></ul><h3 id="实例-多进程实现tcp并发通信" tabindex="-1"><a class="header-anchor" href="#实例-多进程实现tcp并发通信"><span>实例：多进程实现TCP并发通信</span></a></h3><h4 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h4><ul><li><p>服务端使用一个父进程，多个子进程</p><ul><li><p>父进程负责等待并接受客户端的连接</p></li><li><p>子进程：完成通信，接受一个客户端连接，就创建一个子进程用于通信</p></li></ul></li><li><p>客户端不需要改变（同一对一通信）</p></li></ul><h4 id="遇到问题及解决" tabindex="-1"><a class="header-anchor" href="#遇到问题及解决"><span>遇到问题及解决*</span></a></h4>`,683),b=a("<li>断开连接后，服务器端如何处理子进程，回收资源？ <ul><li>使用信号处理</li></ul></li><li>使用信号捕捉回收子进程资源后，出现服务端<code>accept: Interrupted system call</code>，且不能有新客户端连接，如何解决？ <ul><li>产生<code>EINTR</code>信号，具体说明通过<code>man 2 accept</code>查看</li><li>在<code>accept</code>返回值处进行判断处理，不输出错误即可</li></ul></li>",2),h=n("code",null,"read: Connection reset by peer",-1),g=n("li",null,"产生的原因：连接断开后的读和写操作引起的",-1),f=n("li",null,"简单修改：将客户端中休眠语句的位置进行更改",-1),y={href:"https://blog.csdn.net/xc_zhou/article/details/80950753",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[s("解决上一个问题后，服务端出现两次"),n("code",null,"client closed..."),s("，如何解决？ "),n("ul",null,[n("li",null,[s("是因为在关闭连接后，应该退出循环，所以在该"),n("code",null,"printf"),s("语句后，添加"),n("code",null,"break"),s("即可")])])],-1),_=a(`<h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">void</span> <span class="token function">recycleChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 写while是为了处理多个信号</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> WNOHANG<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 所有子进程都回收了</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 还有子进程活着</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回收子进程</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;子进程 %d 被回收了\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 注册信号捕捉</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> recycleChild<span class="token punctuation">;</span>
    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1. 创建socket（用于监听的套接字）</span>
    <span class="token keyword">int</span> listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2. 绑定</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token comment">// 点分十进制转换为网络字节序</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端也可以绑定0.0.0.0即任意地址</span>
    <span class="token comment">// server_addr.sin_addr.s_addr = INADDR_ANY;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3. 监听</span>
    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不断循环等待客户端连接</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4. 接收客户端连接</span>
        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_addr<span class="token punctuation">;</span>
        <span class="token class-name">socklen_t</span> client_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 用于处理信号捕捉导致的accept: Interrupted system call</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 子进程</span>
            <span class="token comment">// 输出客户端信息，IP组成至少16个字符（包含结束符）</span>
            <span class="token keyword">char</span> client_ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">short</span> client_port <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip:%s, port:%d\\n&quot;</span><span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> client_port<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 5. 开始通信</span>
            <span class="token comment">// 服务端先接收客户端信息，再向客户端发送数据</span>
            <span class="token comment">// 接收数据</span>
            <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv client data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 表示客户端断开连接</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 退出循环，用来解决出现两次client closed...</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 发送数据</span>
                <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;hello, i am server&quot;</span><span class="token punctuation">;</span>
                <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
                <span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 关闭文件描述符</span>
            <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-2" tabindex="-1"><a class="header-anchor" href="#客户端-2"><span>客户端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建socket（用于通信的套接字）</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 连接服务器端</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 通信</span>
            <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;client message&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
        <span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 休眠的目的是为了更好的观察，此处使用sleep语句会导致read: Connection reset by peer</span>
        <span class="token comment">// sleep(1);</span>
        <span class="token comment">// 接收数据</span>
        ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv server data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 表示客户端断开连接</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关闭连接</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通信效果-1" tabindex="-1"><a class="header-anchor" href="#通信效果-1"><span>通信效果</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121162229827.png" alt="image-20211121162229827"></p><h3 id="实例-多线程实现tcp并发通信" tabindex="-1"><a class="header-anchor" href="#实例-多线程实现tcp并发通信"><span>实例：多线程实现TCP并发通信</span></a></h3><h4 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1"><span>思路</span></a></h4><ul><li><p>服务端使用一个主线程，多个子线程</p><ul><li><p>主线程负责等待并接受客户端的连接</p></li><li><p>子线程：完成通信，接受一个客户端连接，就创建一个子进程用于通信</p></li></ul></li><li><p>客户端不需要改变（同一对一通信）</p></li></ul><h4 id="服务端-1" tabindex="-1"><a class="header-anchor" href="#服务端-1"><span>服务端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">sockInfo</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>                             <span class="token comment">// 通信文件描述符</span>
    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>                      <span class="token comment">// 线程号</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>            <span class="token comment">// 客户端信息</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sockInfo</span> sockinfos<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 表示最大有128个客户端连接</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">working</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子线程与客户端通信</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockInfo</span> <span class="token operator">*</span>pinfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockInfo</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>

    <span class="token comment">// 输出客户端信息，IP组成至少16个字符（包含结束符）</span>
    <span class="token keyword">char</span> client_ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pinfo<span class="token operator">-&gt;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> client_port <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>pinfo<span class="token operator">-&gt;</span>addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip:%s, port:%d\\n&quot;</span><span class="token punctuation">,</span> client_ip<span class="token punctuation">,</span> client_port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 开始通信</span>
    <span class="token comment">// 服务端先接收客户端信息，再向客户端发送数据</span>
    <span class="token comment">// 接收数据</span>
    <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>pinfo<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv client data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 表示客户端断开连接</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;hello, i am server&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
        <span class="token function">write</span><span class="token punctuation">(</span>pinfo<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关闭文件描述符</span>
    <span class="token function">close</span><span class="token punctuation">(</span>pinfo<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化线程结构体数据</span>
    <span class="token keyword">int</span> sockinfo_maxLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockinfos<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockinfos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sockinfo_maxLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 1. 创建socket（用于监听的套接字）</span>
    <span class="token keyword">int</span> listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2. 绑定</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token comment">// 点分十进制转换为网络字节序</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端也可以绑定0.0.0.0即任意地址</span>
    <span class="token comment">// server_addr.sin_addr.s_addr = INADDR_ANY;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3. 监听</span>
    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不断循环等待客户端连接</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4. 接收客户端连接</span>
        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_addr<span class="token punctuation">;</span>
        <span class="token class-name">socklen_t</span> client_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建子线程</span>
        <span class="token keyword">struct</span> <span class="token class-name">sockInfo</span> <span class="token operator">*</span>pinfo<span class="token punctuation">;</span>
        <span class="token comment">// 从线程数组中找到一个可用的元素进行赋值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sockinfo_maxLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pinfo <span class="token operator">=</span> <span class="token operator">&amp;</span>sockinfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 当遍历到最后还没有找到，那么休眠一秒后，从头开始找</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> sockinfo_maxLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 结构体赋值</span>
        pinfo<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> connfd<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pinfo<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> client_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pinfo<span class="token operator">-&gt;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> working<span class="token punctuation">,</span> pinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 释放资源</span>
        <span class="token function">pthread_detach</span><span class="token punctuation">(</span>pinfo<span class="token operator">-&gt;</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-3" tabindex="-1"><a class="header-anchor" href="#客户端-3"><span>客户端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建socket（用于通信的套接字）</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 连接服务器端</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 通信</span>
            <span class="token keyword">char</span> recv_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>send_buf <span class="token operator">=</span> <span class="token string">&quot;client message&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 粗心写成sizeof，那么就会导致遇到空格终止</span>
        <span class="token function">write</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> send_buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>send_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 休眠的目的是为了更好的观察，此处使用sleep语句会导致read: Connection reset by peer</span>
        <span class="token comment">// sleep(1);</span>
        <span class="token comment">// 接收数据</span>
        ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recv_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv server data : %s\\n&quot;</span><span class="token punctuation">,</span> recv_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 表示客户端断开连接</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client closed...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关闭连接</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通信效果-2" tabindex="-1"><a class="header-anchor" href="#通信效果-2"><span>通信效果</span></a></h4><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211121172701543.png" alt="image-20211121172701543"></p><h2 id="tcp状态转换" tabindex="-1"><a class="header-anchor" href="#tcp状态转换"><span>TCP状态转换</span></a></h2><h3 id="通信过程状态转换图1" tabindex="-1"><a class="header-anchor" href="#通信过程状态转换图1"><span>通信过程状态转换图1</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211123124438914.png" alt="image-20211123124438914"></p><h3 id="通信过程状态转换图2" tabindex="-1"><a class="header-anchor" href="#通信过程状态转换图2"><span>通信过程状态转换图2</span></a></h3><ul><li>红色实线代表客户端（主动发起连接）</li><li>绿色虚线代表服务端（被动接收连接）</li><li>黑色实现代表特殊情况</li><li>数字代表三次握手流程</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211123124611335.png" alt="image-20211123124611335"></p><h3 id="msl与半关闭" tabindex="-1"><a class="header-anchor" href="#msl与半关闭"><span>MSL与半关闭</span></a></h3><ul><li><p>主动断开连接的一方，最后会进入一个 <code>TIME_WAIT</code>状态，这个状态会持续<code>2msl</code></p></li><li><p><code>msl</code>：官方建议2分钟，实际是30s，<strong>主要是为了防止挥手信息丢失</strong></p><blockquote><p>当 TCP 连接主动关闭方接收到被动关闭方发送的 FIN 和最终的 ACK 后，连接的主动关闭方必须处于TIME_WAIT 状态并持续 2MSL 时间</p><p>这样就能够让 TCP 连接的主动关闭方在它发送的 ACK 丢失的情况下重新发送最终的 ACK</p><p>主动关闭方重新发送的最终 ACK 并不是因为被动关闭方重传了 ACK（它们并不消耗序列号，被动关闭方也不会重传），而是因为被动关闭方重传了它的 FIN。事实上，被动关闭方总是重传 FIN 直到它收到一个最终的 ACK</p></blockquote></li><li><p><code>半关闭</code>：当 TCP 连接中 A 向 B 发送 FIN 请求关闭，另一端 B 回应 ACK 之后（A 端进入 FIN_WAIT_2状态），并没有立即发送 FIN 给 A，A 方处于半连接状态（半开关），此时 <strong>A 可以接收 B 发送的数据，但是 A 已经不能再向 B 发送数据</strong></p></li><li><p>API 来控制实现半连接状态的方法：<code> shutdown函数</code></p><ul><li><code>int shutdown(int sockfd, int how); </code><ul><li>功能：实现半连接状态</li><li>参数 <ul><li><code>sockfd</code>：需要关闭的socket的描述符</li><li><code>how</code>：允许为shutdown操作选择以下几种方式 <ul><li><code>SHUT_RD(0)</code>：关闭sockfd上的读功能，此选项将不允许sockfd进行读操作，该套接字不再接收数据，任何当前在套接字接受缓冲区的数据将被无声的丢弃掉</li><li><code>SHUT_WR(1)</code>：关闭sockfd的写功能，此选项将不允许sockfd进行写操作。进程不能在对此套接字发 出写操作</li><li><code>SHUT_RDWR(2)</code>：关闭sockfd的读写功能。相当于调用shutdown两次：首先调用<code>SHUT_RD</code>,然后调用 <code>SHUT_WR</code></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="shutdown与close" tabindex="-1"><a class="header-anchor" href="#shutdown与close"><span>shutdown与close</span></a></h3><ul><li>使用 <code>close</code> 中止一个连接，但它只是<strong>减少描述符的引用计数，并不直接关闭连接</strong>，只有当描述符的引用计数为 0 时才关闭连接</li><li><code>shutdown</code> 不考虑描述符的引用计数，<strong>直接关闭描述符</strong>。也可选择中止一个方向的连接，只中止读或只中止写</li><li>如果有多个进程共享一个套接字，close 每被调用一次，计数减 1 ，直到计数为 0 时，也就是所用进程都调用了 close，套接字将被释放</li><li><strong>在多进程中如果一个进程调用了 <code>shutdown(sfd, SHUT_RDWR)</code> 后，其它的进程将无法进行通信</strong>。但如果一个进程 <code>close(sfd)</code> 将不会影响到其它进程=&gt;==难怪800那个项目调shutdown之后其他线程就不能用了==</li></ul><h3 id="端口复用" tabindex="-1"><a class="header-anchor" href="#端口复用"><span>端口复用</span></a></h3><h4 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h4><ul><li>防止服务器重启时之前绑定的端口还未释放</li><li>程序突然退出而系统没有释放端口</li></ul><h4 id="方法——setsockopt" tabindex="-1"><a class="header-anchor" href="#方法——setsockopt"><span>方法——<code>setsockopt</code></span></a></h4><ul><li><code>int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); </code><ul><li>功能：设置套接字的属性（不仅仅能设置端口复用），以下说明仅针对端口复用，其他详细内容可查看第七章相关内容</li><li>参数 <ul><li><code>sockfd</code>：要操作的文件描述符</li><li><code>level</code>：级别，<code>SOL_SOCKET</code> (端口复用的级别)</li><li><code>optname</code>：选项的名称，使用<code>SO_REUSEADDR</code>或<code>SO_REUSEPORT</code></li><li><code>optval</code>：端口复用的值（整形） ，1表示可复用，0表示不可复用</li><li><code>optlen</code>：optval参数的大小</li></ul></li></ul></li></ul><h4 id="注意-3" tabindex="-1"><a class="header-anchor" href="#注意-3"><span>注意</span></a></h4><ul><li>端口复用的设置时机是<strong>在服务器绑定端口之前</strong></li><li>如果不设置端口复用，那么在程序异常终止后，再次启动服务会出现<code>Bind error:Address already in use</code></li></ul><h3 id="查看看网络相关信息命令——netstat" tabindex="-1"><a class="header-anchor" href="#查看看网络相关信息命令——netstat"><span>查看看网络相关信息命令——netstat</span></a></h3><ul><li>格式：<code>netstat -参数名</code></li><li>常用参数 <ul><li><code>a</code>：所有的socket</li><li><code>p</code>：显示正在使用socket的程序的名称</li><li><code>n</code>：直接使用IP地址，而不通过域名服务器</li></ul></li></ul><h1 id="io多路复用-io多路转接" tabindex="-1"><a class="header-anchor" href="#io多路复用-io多路转接"><span>IO多路复用(IO多路转接)</span></a></h1><h2 id="阻塞等待-bio模型" tabindex="-1"><a class="header-anchor" href="#阻塞等待-bio模型"><span>阻塞等待(BIO模型)</span></a></h2><h3 id="简介-10" tabindex="-1"><a class="header-anchor" href="#简介-10"><span>简介</span></a></h3><ul><li>遇到<code>read</code>/<code>recv</code>/<code>accept</code>时，阻塞等待，直接有数据或者连接时才继续往下执行</li></ul><h3 id="单任务" tabindex="-1"><a class="header-anchor" href="#单任务"><span>单任务</span></a></h3><ul><li>好处：不占用CPU宝贵的时间片</li><li>缺点：同一时刻只能处理一个操作, 效率低</li><li>克服缺点：多线程或者多进程解决，一个线程/进程对应一个任务</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124122737594.png" alt="image-20211124122737594"></p><h3 id="多任务" tabindex="-1"><a class="header-anchor" href="#多任务"><span>多任务</span></a></h3><ul><li>优点：能够同时处理多个任务，一个线程/进程对应一个任务</li><li>缺点： <ul><li>线程或者进程会消耗资源</li><li>线程或进程调度消耗CPU资源</li></ul></li><li>根本问题：阻塞(<code>blocking</code>)</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124122820504.png" alt="image-20211124122820504"></p><h2 id="非阻塞-忙轮询-nio模型" tabindex="-1"><a class="header-anchor" href="#非阻塞-忙轮询-nio模型"><span>非阻塞，忙轮询(NIO模型)</span></a></h2><ul><li>优点：提高了程序的执行效率</li><li>缺点：需要占用更多的CPU和系统资源，每循环都需要 O(n) 系统调用（用来查找哪个任务可执行）</li><li>克服缺点：使用IO多路转接技术select/poll/epoll</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124123055701.png" alt="image-20211124123055701"></p><h2 id="io多路转接技术-简介" tabindex="-1"><a class="header-anchor" href="#io多路转接技术-简介"><span>IO多路转接技术(简介)</span></a></h2><h3 id="select-poll" tabindex="-1"><a class="header-anchor" href="#select-poll"><span>select/poll</span></a></h3><ul><li>委托内核进行操作</li><li>只会通知有几个任务可用，但不知道具体哪几个任务，还需遍历（与NIO模型略有不同）</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124125216066.png" alt="image-20211124125216066"></p><h3 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll"><span>epoll</span></a></h3><ul><li>委托内核进行操作</li><li>会通知具体有哪几个任务可用</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124125254136.png" alt="image-20211124125254136"></p><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h2><h3 id="主旨思想" tabindex="-1"><a class="header-anchor" href="#主旨思想"><span>主旨思想</span></a></h3><ol><li>首先要构造一个关于文件描述符的列表，将要监听的文件描述符添加到该列表中</li><li>调用一个系统函数(<code>select</code>)，监听该列表中的文件描述符，直到这些描述符中的一个或者多个进行I/O操作时，该函数才返回 <ul><li>这个函数是阻塞</li><li>函数对文件描述符的检测的操作是由内核完成的</li></ul></li><li>在返回时，它会告诉进程有多少（哪些）描述符要进行I/O操作</li></ol><h3 id="函数说明" tabindex="-1"><a class="header-anchor" href="#函数说明"><span>函数说明</span></a></h3><ul><li><p>概览</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;sys/time.h&gt; 
#include &lt;sys/types.h&gt; 
#include &lt;unistd.h&gt; 
#include &lt;sys/select.h&gt; 

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

// 将参数文件描述符fd对应的标志位设置为0 
void FD_CLR(int fd, fd_set *set); 
// 判断fd对应的标志位是0还是1， 返回值 ： fd对应的标志位的值，0，返回0， 1，返回1 
int FD_ISSET(int fd, fd_set *set); 
// 将参数文件描述符fd 对应的标志位，设置为1 
void FD_SET(int fd, fd_set *set);
// fd_set一共有1024 bit, 全部初始化为0 
void FD_ZERO(fd_set *set);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); </code></p><ul><li><p>通过<code>man select</code>查看帮助</p></li><li><p>参数</p><ul><li><code>nfds</code>：委托内核检测的最大文件描述符的值 + 1（+1是因为遍历是下标从0开始，for循环＜设定）</li><li><code>readfds</code>：要检测的文件描述符的读的集合，委托内核检测哪些文件描述符的读的属性 <ul><li>一般检测读操作</li><li>对应的是对方发送过来的数据，因为读是被动的接收数据，检测的就是读缓冲区</li><li>是一个传入传出参数</li></ul></li><li><code>writefds</code>：要检测的文件描述符的写的集合，委托内核检测哪些文件描述符的写的属性 <ul><li>委托内核检测写缓冲区是不是还可以写数据（不满的就可以写）</li></ul></li><li><code>exceptfds</code>：检测发生异常的文件描述符的集合，一般不用</li><li><code>timeout</code>：设置的超时时间，含义见**<code>select</code>参数列表说明** <ul><li><code>NULL</code>：永久阻塞，直到检测到了文件描述符有变化</li><li><code>tv_sec = tv_usec = 0</code>， 不阻塞</li><li><code> tv_sec &gt; 0,tv_usec &gt; 0</code>：阻塞对应的时间</li></ul></li></ul></li><li><p>返回值</p><ul><li>-1：失败</li><li>&gt;0(n)：检测的集合中有n个文件描述符发生了变化</li></ul></li></ul></li><li><p><code>select</code>参数列表说明</p><ul><li><p><code>fd_set</code>：是一块固定大小的缓冲区(结构体)，<code>sizeof(fd_set)=128</code>，即对应1024个比特位</p></li><li><p><code>timeval </code>：结构体类型</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>struct timeval { 
    long tv_sec; /* seconds */ 
    long tv_usec; /* microseconds */ 
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="工作过程分析" tabindex="-1"><a class="header-anchor" href="#工作过程分析"><span>工作过程分析</span></a></h3><ol><li><p>初始设定</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124232543733.png" alt="image-20211124232543733"></p></li><li><p>设置监听文件描述符，将<code>fd_set</code>集合相应位置为1</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124232723210.png" alt="image-20211124232723210"></p></li><li><p>调用<code>select</code>委托内核检测</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124233009618.png" alt="image-20211124233009618"></p></li><li><p>内核检测完毕后，返回给用户态结果</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211124233108458.png" alt="image-20211124233108458"></p></li></ol><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h4><ul><li><code>select</code>中需要的监听集合需要两个 <ul><li>一个是用户态真正需要监听的集合<code>rSet</code></li><li>一个是内核态返回给用户态的修改集合<code>tmpSet</code></li></ul></li><li>需要先判断监听文件描述符是否发生改变 <ul><li>如果改变了，说明有客户端连接，此时需要将<strong>新的连接文件描述符加入到<code>rSet</code></strong>，并更新最大文件描述符</li><li>如果没有改变，说明没有客户端连接</li></ul></li><li>由于<code>select</code>无法确切知道哪些文件描述符发生了改变，所以需要执行遍历操作，使用<code>FD_ISSET</code>判断是否发生了改变</li><li>如果客户端断开了连接，需要从<code>rSet</code>中清除需要监听的文件描述符</li><li>程序存在的问题：中间的一些断开连接后，最大文件描述符怎么更新？=&gt;==估计不更新，每次都会遍历到之前的最大值处==，解决方案见<a href="###%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83">高并发优化思考</a></li></ul><h4 id="服务端-2" tabindex="-1"><a class="header-anchor" href="#服务端-2"><span>服务端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/select.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789


int main()
{
    // 1. 创建socket（用于监听的套接字）
    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 绑定
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    // 点分十进制转换为网络字节序
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    // 服务端也可以绑定0.0.0.0即任意地址
    // server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    int ret = bind(listenfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;bind&quot;);
        exit(-1);
    }
    // 3. 监听
    ret = listen(listenfd, 8);
        if (ret == -1) {
        perror(&quot;listen&quot;);
        exit(-1);
    }
    // 创建读检测集合
    // rSet用于记录正在的监听集合，tmpSet用于记录在轮训过程中由内核态返回到用户态的集合
    fd_set rSet, tmpSet;
    // 清空
    FD_ZERO(&amp;rSet);
    // 将监听文件描述符加入
    FD_SET(listenfd, &amp;rSet);
    // 此时最大的文件描述符为监听描述符
    int maxfd = listenfd;
    // 不断循环等待客户端连接
    while (1) {
        tmpSet = rSet;
        // 使用select，设置为永久阻塞，有文件描述符变化才返回
        int num = select(maxfd + 1, &amp;tmpSet, NULL, NULL, NULL);
        if (num == -1) {
            perror(&quot;select&quot;);
            exit(-1);
        } else if (num == 0) {
            // 当前无文件描述符有变化，执行下一次遍历
            // 在本次设置中无效（因为select被设置为永久阻塞）
            continue;
        } else {
            // 首先判断监听文件描述符是否发生改变（即是否有客户端连接）
            if (FD_ISSET(listenfd, &amp;tmpSet)) {
                // 4. 接收客户端连接
                struct sockaddr_in client_addr;
                socklen_t client_addr_len = sizeof(client_addr);
                int connfd = accept(listenfd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);
                if (connfd == -1) {
                    perror(&quot;accept&quot;);
                    exit(-1);
                }
                // 输出客户端信息，IP组成至少16个字符（包含结束符）
                char client_ip[16] = {0};
                inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip));
                unsigned short client_port = ntohs(client_addr.sin_port);
                printf(&quot;ip:%s, port:%d\\n&quot;, client_ip, client_port);

                FD_SET(connfd, &amp;rSet);
                // 更新最大文件符
                maxfd = maxfd &gt; connfd ? maxfd : connfd;
            }

            // 遍历集合判断是否有变动，如果有变动，那么通信
            char recv_buf[1024] = {0};
            for (int i = listenfd + 1; i &lt;= maxfd; i++) {
                if (FD_ISSET(i, &amp;tmpSet)) {
                    ret = read(i, recv_buf, sizeof(recv_buf));
                    if (ret == -1) {
                        perror(&quot;read&quot;);
                        exit(-1);
                    } else if (ret &gt; 0) {
                        printf(&quot;recv server data : %s\\n&quot;, recv_buf);
                        write(i, recv_buf, strlen(recv_buf));
                    } else {
                        // 表示客户端断开连接
                        printf(&quot;client closed...\\n&quot;);
                        close(i);
                        FD_CLR(i, &amp;rSet);
                        break;
                    }
                }
            }
        }
    }

    close(listenfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-4" tabindex="-1"><a class="header-anchor" href="#客户端-4"><span>客户端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789

int main()
{
    // 1. 创建socket（用于通信的套接字）
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    if (connfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 连接服务器端
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    server_addr.sin_port = htons(PORT);
    int ret = connect(connfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;connect&quot;);
        exit(-1);
    }
    // 3. 通信
    char recv_buf[1024] = {0};
    while (1) {
        // 发送数据
        char *send_buf = &quot;client message&quot;;
        write(connfd, send_buf, strlen(send_buf));
        // 接收数据
        ret = read(connfd, recv_buf, sizeof(recv_buf));
        if (ret == -1) {
            perror(&quot;read&quot;);
            exit(-1);
        } else if (ret &gt; 0) {
            printf(&quot;recv server data : %s\\n&quot;, recv_buf);
        } else {
            // 表示客户端断开连接
            printf(&quot;client closed...\\n&quot;);
        }
        // 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题
        sleep(1);
    }
    // 关闭连接
    close(connfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高并发优化思考" tabindex="-1"><a class="header-anchor" href="#高并发优化思考"><span>高并发优化思考</span></a></h3><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h4><ul><li>每次都需要利用<code>FD_ISSET</code>轮训<code>[0, maxfd]</code>之间的连接状态，如果位于中间的某一个客户端断开了连接，此时不应该再去利用<code>FD_ISSET</code>轮训，造成资源浪费</li><li>如果在处理客户端数据时，某一次read没有对数据读完，那么造成重新进行下一次时select，获取上一次未处理完的文件描述符，从0开始遍历到maxfd，对上一次的进行再一次操作，效率十分低下</li></ul><h4 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h4><ul><li>考虑到<code>select</code>只有<code>1024</code>个最大可监听数量，可以申请等量客户端数组 <ul><li>初始置为-1，当有状态改变时，置为相应文件描述符</li><li>此时再用<code>FD_ISSET</code>轮训时，跳过标记为-1的客户端，加快遍历速度</li></ul></li><li>对于问题二：对读缓存区循环读，直到返回<code>EAGAIN</code>再处理数据</li></ul><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h4>`,74),q={href:"https://blog.csdn.net/weixin_42889383/article/details/102367621",target:"_blank",rel:"noopener noreferrer"},x=a(`<h3 id="存在问题-缺点" tabindex="-1"><a class="header-anchor" href="#存在问题-缺点"><span>存在问题(缺点)</span></a></h3><ul><li>每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</li><li>同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</li><li>select支持的文件描述符数量太小了，默认是1024</li><li>fds集合不能重用，每次都需要重置</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211126224641170.png" alt="image-20211126224641170"></p><h2 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>poll</span></a></h2><h3 id="主旨思想-1" tabindex="-1"><a class="header-anchor" href="#主旨思想-1"><span>主旨思想</span></a></h3><ul><li>用一个结构体记录文件描述符集合，并记录用户态状态和内核态状态</li></ul><h3 id="函数说明-1" tabindex="-1"><a class="header-anchor" href="#函数说明-1"><span>函数说明</span></a></h3><ul><li><p>概览</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;poll.h&gt; 
struct pollfd { 
    int fd; /* 委托内核检测的文件描述符 */ 
    short events; /* 委托内核检测文件描述符的什么事件 */ 
    short revents; /* 文件描述符实际发生的事件 */ 
};

int poll(struct pollfd *fds, nfds_t nfds, int timeout);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int poll(struct pollfd *fds, nfds_t nfds, int timeout); </code></p><ul><li>通过<code>man poll</code>查看帮助</li><li>参数 <ul><li><code>fds</code>：是一个<code>struct pollfd</code> 结构体数组，这是一个需要检测的文件描述符的集合</li><li><code>nfds</code>：这个是第一个参数数组中最后一个有效元素的下标 + 1</li><li><code>timeout</code>：阻塞时长 <ul><li>0：不阻塞</li><li>-1：阻塞，当检测到需要检测的文件描述符有变化，解除阻塞</li><li>&gt;0：具体的阻塞时长(ms)</li></ul></li></ul></li><li>返回值 <ul><li>-1：失败</li><li>&gt;0(n)：检测的集合中有n个文件描述符发生了变化</li></ul></li></ul></li><li><p><code>events</code>及<code>revents</code>取值，如果有多个事件需要检测，用<code>|</code>即可，如同时检测读和写：<code>POLLIN | POLLOUT</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211126233707281.png" alt="image-20211126233707281"></p></li></ul><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span>代码实现</span></a></h3><h4 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2"><span>注意事项</span></a></h4><ul><li><code>nfds</code>表示的监听文件描述符的下标，所以在遍历时，需要使用<code>fds[i].fd</code>取得相应的文件描述符</li><li>如何优雅的更新nfds?代码中使用连接的文件描述符作为替代更新</li></ul><h4 id="服务端-3" tabindex="-1"><a class="header-anchor" href="#服务端-3"><span>服务端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;poll.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789


int main()
{
    // 1. 创建socket（用于监听的套接字）
    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 绑定
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    // 点分十进制转换为网络字节序
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    // 服务端也可以绑定0.0.0.0即任意地址
    // server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    int ret = bind(listenfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;bind&quot;);
        exit(-1);
    }
    // 3. 监听
    ret = listen(listenfd, 8);
        if (ret == -1) {
        perror(&quot;listen&quot;);
        exit(-1);
    }
    
    struct pollfd fds[1024];
    // 初始化
    for (int i = 0; i &lt; 1024; i++) {
        fds[i].fd = -1;
        fds[i].events = POLLIN;
    }
    // 将监听文件描述符加入
    fds[0].fd = listenfd;
    int nfds = 0;
    // 不断循环等待客户端连接
    while (1) {
        // 使用poll，设置为永久阻塞，有文件描述符变化才返回
        int num = poll(fds, nfds + 1, -1);
        if (num == -1) {
            perror(&quot;poll&quot;);
            exit(-1);
        } else if (num == 0) {
            // 当前无文件描述符有变化，执行下一次遍历
            // 在本次设置中无效（因为select被设置为永久阻塞）
            continue;
        } else {
            // 首先判断监听文件描述符是否发生改变（即是否有客户端连接）
            if (fds[0].revents &amp; POLLIN) {
                // 4. 接收客户端连接
                struct sockaddr_in client_addr;
                socklen_t client_addr_len = sizeof(client_addr);
                int connfd = accept(listenfd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);
                if (connfd == -1) {
                    perror(&quot;accept&quot;);
                    exit(-1);
                }
                // 输出客户端信息，IP组成至少16个字符（包含结束符）
                char client_ip[16] = {0};
                inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip));
                unsigned short client_port = ntohs(client_addr.sin_port);
                printf(&quot;ip:%s, port:%d\\n&quot;, client_ip, client_port);
                // 遍历集合, 将新的需要监听的文件描述符加入集合
                for (int i = 1; i &lt; 1024; i++) {
                    if (fds[i].fd == -1) {
                        fds[i].fd = connfd;
                        fds[i].events = POLLIN;
                        break;
                    }
                }
                // 更新最大的监听文件描述符集合下标
                // 存在问题：使用文件描述符替代最大对应下标
                nfds = nfds &gt; connfd ? nfds : connfd;
            }

            // 遍历集合判断是否有变动，如果有变动，那么通信
            char recv_buf[1024] = {0};
            for (int i = 1; i &lt;= nfds; i++) {
                if (fds[i].fd != -1 &amp;&amp; fds[i].revents &amp; POLLIN) {
                    ret = read(fds[i].fd, recv_buf, sizeof(recv_buf));
                    if (ret == -1) {
                        perror(&quot;read&quot;);
                        exit(-1);
                    } else if (ret &gt; 0) {
                        printf(&quot;recv server data : %s\\n&quot;, recv_buf);
                        write(fds[i].fd, recv_buf, strlen(recv_buf));
                    } else {
                        // 表示客户端断开连接
                        printf(&quot;client closed...\\n&quot;);
                        close(fds[i].fd);
                        fds[i].fd = -1;
                        break;
                    }
                }
            }
        }
    }

    close(listenfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-5" tabindex="-1"><a class="header-anchor" href="#客户端-5"><span>客户端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789

int main()
{
    // 1. 创建socket（用于通信的套接字）
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    if (connfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 连接服务器端
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    server_addr.sin_port = htons(PORT);
    int ret = connect(connfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;connect&quot;);
        exit(-1);
    }
    // 3. 通信
    char recv_buf[1024] = {0};
    while (1) {
        // 发送数据
        char *send_buf = &quot;client message&quot;;
        write(connfd, send_buf, strlen(send_buf));
        // 接收数据
        ret = read(connfd, recv_buf, sizeof(recv_buf));
        if (ret == -1) {
            perror(&quot;read&quot;);
            exit(-1);
        } else if (ret &gt; 0) {
            printf(&quot;recv server data : %s\\n&quot;, recv_buf);
        } else {
            // 表示客户端断开连接
            printf(&quot;client closed...\\n&quot;);
        }
        // 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题
        sleep(1);
    }
    // 关闭连接
    close(connfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在问题-缺点-1" tabindex="-1"><a class="header-anchor" href="#存在问题-缺点-1"><span>存在问题(缺点)</span></a></h3><ul><li>缺点同<code>select</code>第一点和第二点(如下)，即解决了第三点和第四点</li><li>每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</li><li>同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</li></ul><h2 id="epoll-1" tabindex="-1"><a class="header-anchor" href="#epoll-1"><span>epoll</span></a></h2><h3 id="主旨思想-2" tabindex="-1"><a class="header-anchor" href="#主旨思想-2"><span>主旨思想</span></a></h3><ul><li>直接在<strong>内核态</strong>创建<code> eventpoll实例</code>(结构体)，通过<code>epoll</code>提供的API操作该实例</li><li>结构体中有<code>红黑树</code>和<code>双链表</code>，分别用来<strong>存储需要检测的文件描述符</strong>和<strong>存储已经发生改变的文件描述符</strong></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211127170241104.png" alt="image-20211127170241104"></p><h3 id="函数说明-2" tabindex="-1"><a class="header-anchor" href="#函数说明-2"><span>函数说明</span></a></h3><ul><li><p>概览</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h&gt;</span></span>

<span class="token comment">// 创建一个新的epoll实例</span>
<span class="token comment">// 在内核中创建了一个数据，这个数据中有两个比较重要的数据，一个是需要检测的文件描述符的信息（红黑树），还有一个是就绪列表，存放检测到数据发送改变的文件描述符信息（双向链表）</span>
<span class="token keyword">int</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对epoll实例进行管理：添加文件描述符信息，删除信息，修改信息</span>
<span class="token keyword">int</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> epfd<span class="token punctuation">,</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token punctuation">{</span> 
    <span class="token class-name">uint32_t</span> events<span class="token punctuation">;</span> <span class="token comment">/* Epoll events */</span> 
    <span class="token class-name">epoll_data_t</span> data<span class="token punctuation">;</span> <span class="token comment">/* User data variable */</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">union</span> epoll_data <span class="token punctuation">{</span> 
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span> 
    <span class="token class-name">uint32_t</span> u32<span class="token punctuation">;</span> 
    <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token class-name">epoll_data_t</span><span class="token punctuation">;</span>

<span class="token comment">// 检测函数</span>
<span class="token keyword">int</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> epfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>events<span class="token punctuation">,</span> <span class="token keyword">int</span> maxevents<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>int epoll_create(int size);</code></p><ul><li>功能：创建一个新的epoll实例</li><li>参数：<code>size</code>，目前没有意义了(之前底层实现是哈希表，现在是红黑树)，随便写一个数，必须大于0</li><li>返回值 <ul><li>-1：失败</li><li>&gt;0：操作<code>epoll实例</code>的文件描述符</li></ul></li></ul></li><li><p><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code></p><ul><li>功能：对epoll实例进行管理：添加文件描述符信息，删除信息，修改信息</li><li>参数： <ul><li><code>epfd</code>：epoll实例对应的文件描述符</li><li><code>op</code>：要进行什么操作 <ul><li>添加：<code>EPOLL_CTL_ADD</code></li><li>删除：<code>EPOLL_CTL_DEL</code></li><li>修改：<code>EPOLL_CTL_MOD</code></li></ul></li><li><code>fd</code>：要检测的文件描述符</li><li><code>event</code>：检测文件描述符什么事情，通过设置<code>epoll_event.events</code>，常见操作 <ul><li>读事件：<code>EPOLLIN</code></li><li>写事件：<code>EPOLLOUT </code></li><li>错误事件：<code>EPOLLERR</code></li><li>设置边沿触发：<code>EPOLLET</code>（默认水平触发）</li></ul></li></ul></li><li>返回值：成功0，失败-1</li></ul></li><li><p><code>int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);</code></p><ul><li>功能：检测哪些文件描述符发生了改变</li><li>参数： <ul><li><code>epfd</code>：epoll实例对应的文件描述符</li><li><code>events</code>：传出参数，保存了发生了变化的文件描述符的信息</li><li><code>maxevents</code>：第二个参数结构体数组的大小</li><li><code>timeout</code>：阻塞时长 <ul><li>0：不阻塞</li><li>-1：阻塞，当检测到需要检测的文件描述符有变化，解除阻塞</li><li>&gt;0：具体的阻塞时长(ms)</li></ul></li></ul></li><li>返回值： <ul><li>&gt; 0：成功，返回发送变化的文件描述符的个数</li><li>-1：失败</li></ul></li></ul></li></ul><h3 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2"><span>代码实现</span></a></h3><h4 id="注意事项-3" tabindex="-1"><a class="header-anchor" href="#注意事项-3"><span>注意事项</span></a></h4><ul><li><p><code>events</code>是封装了监听描述符信息的结构体，每一个新增文件都需要这个(可重用)</p></li><li><p>需要注意可能同时发生了多个监听（如监听读事件和写事件），那么代码逻辑需要做相应判断</p><blockquote><p>如本例中只检测读事件，排除了写事件</p></blockquote></li></ul><h4 id="服务端-4" tabindex="-1"><a class="header-anchor" href="#服务端-4"><span>服务端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/epoll.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789


int main()
{
    // 1. 创建socket（用于监听的套接字）
    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 绑定
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    // 点分十进制转换为网络字节序
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    // 服务端也可以绑定0.0.0.0即任意地址
    // server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    int ret = bind(listenfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;bind&quot;);
        exit(-1);
    }
    // 3. 监听
    ret = listen(listenfd, 8);
        if (ret == -1) {
        perror(&quot;listen&quot;);
        exit(-1);
    }
    
    // 创建epoll实例
    int epfd = epoll_create(100);
    // 将监听文件描述符加入实例
    struct epoll_event event;
    event.events = EPOLLIN;
    event.data.fd = listenfd;
    ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;event);
    if (ret == -1) {
        perror(&quot;epoll_ctl&quot;);
        exit(-1);
    }
    // 此结构体用来保存内核态返回给用户态发生改变的文件描述符信息
    struct epoll_event events[1024];
    // 不断循环等待客户端连接
    while (1) {
        // 使用epoll，设置为永久阻塞，有文件描述符变化才返回
        int num = epoll_wait(epfd, events, 1024, -1);
        if (num == -1) {
            perror(&quot;poll&quot;);
            exit(-1);
        } else if (num == 0) {
            // 当前无文件描述符有变化，执行下一次遍历
            // 在本次设置中无效（因为select被设置为永久阻塞）
            continue;
        } else {
            // 遍历发生改变的文件描述符集合
            for (int i = 0; i &lt; num; i++) {
                // 判断监听文件描述符是否发生改变（即是否有客户端连接）
                int curfd = events[i].data.fd;
                if (curfd == listenfd) {
                    // 4. 接收客户端连接
                    struct sockaddr_in client_addr;
                    socklen_t client_addr_len = sizeof(client_addr);
                    int connfd = accept(listenfd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);
                    if (connfd == -1) {
                        perror(&quot;accept&quot;);
                        exit(-1);
                    }
                    // 输出客户端信息，IP组成至少16个字符（包含结束符）
                    char client_ip[16] = {0};
                    inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip));
                    unsigned short client_port = ntohs(client_addr.sin_port);
                    printf(&quot;ip:%s, port:%d\\n&quot;, client_ip, client_port);
                    // 将信息加入监听集合
                    event.events = EPOLLIN;
                    event.data.fd = connfd;
                    epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &amp;event);
                } else {
                    // 只检测读事件
                    if (events[i].events &amp; EPOLLOUT) {
                        continue;
                    }
                    // 接收消息
                    char recv_buf[1024] = {0};
                    ret = read(curfd, recv_buf, sizeof(recv_buf));
                    if (ret == -1) {
                        perror(&quot;read&quot;);
                        exit(-1);
                    } else if (ret &gt; 0) {
                        printf(&quot;recv server data : %s\\n&quot;, recv_buf);
                        write(curfd, recv_buf, strlen(recv_buf));
                    } else {
                        // 表示客户端断开连接
                        printf(&quot;client closed...\\n&quot;);
                        close(curfd);
                        epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL);
                        break;
                    }
                }
            }
        }
    }

    close(listenfd);
    close(epfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-6" tabindex="-1"><a class="header-anchor" href="#客户端-6"><span>客户端</span></a></h4><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789

int main()
{
    // 1. 创建socket（用于通信的套接字）
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    if (connfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 连接服务器端
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    server_addr.sin_port = htons(PORT);
    int ret = connect(connfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;connect&quot;);
        exit(-1);
    }
    // 3. 通信
    char recv_buf[1024] = {0};
    while (1) {
        // 发送数据
        char *send_buf = &quot;client message&quot;;
        write(connfd, send_buf, strlen(send_buf));
        // 接收数据
        ret = read(connfd, recv_buf, sizeof(recv_buf));
        if (ret == -1) {
            perror(&quot;read&quot;);
            exit(-1);
        } else if (ret &gt; 0) {
            printf(&quot;recv server data : %s\\n&quot;, recv_buf);
        } else {
            // 表示客户端断开连接
            printf(&quot;client closed...\\n&quot;);
        }
        // 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题
        sleep(1);
    }
    // 关闭连接
    close(connfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工作模式-lt与et" tabindex="-1"><a class="header-anchor" href="#工作模式-lt与et"><span>工作模式(LT与ET)</span></a></h3><h4 id="水平触发-level-triggered-lt" tabindex="-1"><a class="header-anchor" href="#水平触发-level-triggered-lt"><span>水平触发(level triggered, LT)</span></a></h4><ul><li>epoll的缺省的工作方式，并且同时支持 block 和 non-block socket</li><li>在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的</li></ul><h4 id="边沿触发-edge-triggered-et" tabindex="-1"><a class="header-anchor" href="#边沿触发-edge-triggered-et"><span>边沿触发(edge triggered, ET)</span></a></h4><ul><li>是高速工作方式，只支持 non-block socket，需要对监听文件描述符设置才能实现</li><li>在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了。但是请注意，如果一直不对这个 fd 作 IO 操作（从而导致它再次变成未就绪），内核不会发送更多的通知（only once）</li></ul><h4 id="区别与说明" tabindex="-1"><a class="header-anchor" href="#区别与说明"><span>区别与说明</span></a></h4><ul><li><p>ET 模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高</p></li><li><p>epoll工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死</p></li><li><p>所以如果使用ET且缓冲区内容不能一次性读完，<strong>需要写一个循环将内容全部读取，且需要将套接字设置为非阻塞</strong></p></li><li><p>说明：假设委托内核检测读事件，即检测fd的读缓冲区，那么如果读缓冲区有数据 ，epoll检测到了会给用户通知</p><ul><li>LT <ul><li>用户不读数据，数据一直在缓冲区，epoll 会一直通知</li><li>用户只读了一部分数据，epoll会通知</li><li>缓冲区的数据读完了，不通知</li></ul></li><li>ET <ul><li>用户不读数据，数据一致在缓冲区中，epoll下次检测的时候就不通知了</li><li>用户只读了一部分数据，epoll不通知</li><li>缓冲区的数据读完了，不通知</li></ul></li></ul></li></ul><h4 id="代码-et" tabindex="-1"><a class="header-anchor" href="#代码-et"><span>代码(ET)</span></a></h4><h5 id="服务端-5" tabindex="-1"><a class="header-anchor" href="#服务端-5"><span>服务端</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/epoll.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789


int main()
{
    // 1. 创建socket（用于监听的套接字）
    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    int opt = 1;
    setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT, &amp;opt, sizeof(opt));

    // 2. 绑定
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    // 点分十进制转换为网络字节序
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    // 服务端也可以绑定0.0.0.0即任意地址
    // server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    int ret = bind(listenfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;bind&quot;);
        exit(-1);
    }
    // 3. 监听
    ret = listen(listenfd, 8);
        if (ret == -1) {
        perror(&quot;listen&quot;);
        exit(-1);
    }
    
    // 创建epoll实例
    int epfd = epoll_create(100);
    // 将监听文件描述符加入实例
    struct epoll_event event;
    event.events = EPOLLIN;
    event.data.fd = listenfd;
    ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;event);
    if (ret == -1) {
        perror(&quot;epoll_ctl&quot;);
        exit(-1);
    }
    // 此结构体用来保存内核态返回给用户态发生改变的文件描述符信息
    struct epoll_event events[1024];
    // 不断循环等待客户端连接
    while (1) {
        // 使用epoll，设置为永久阻塞，有文件描述符变化才返回
        int num = epoll_wait(epfd, events, 1024, -1);
        // 方便观察epoll通知了几次
        printf(&quot;num = %d\\n&quot;, num);
        if (num == -1) {
            perror(&quot;poll&quot;);
            exit(-1);
        } else if (num == 0) {
            // 当前无文件描述符有变化，执行下一次遍历
            // 在本次设置中无效（因为select被设置为永久阻塞）
            continue;
        } else {
            // 遍历发生改变的文件描述符集合
            for (int i = 0; i &lt; num; i++) {
                // 判断监听文件描述符是否发生改变（即是否有客户端连接）
                int curfd = events[i].data.fd;
                if (curfd == listenfd) {
                    // 4. 接收客户端连接
                    struct sockaddr_in client_addr;
                    socklen_t client_addr_len = sizeof(client_addr);
                    int connfd = accept(listenfd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);
                    if (connfd == -1) {
                        perror(&quot;accept&quot;);
                        exit(-1);
                    }
                    // 输出客户端信息，IP组成至少16个字符（包含结束符）
                    char client_ip[16] = {0};
                    inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip));
                    unsigned short client_port = ntohs(client_addr.sin_port);
                    printf(&quot;ip:%s, port:%d\\n&quot;, client_ip, client_port);
                    // 将通信套接字设置为非阻塞
                    int flag = fcntl(connfd, F_GETFL);
                    flag |= O_NONBLOCK;
                    fcntl(connfd, F_SETFL, flag);

                    // 将信息加入监听集合，设置为ET模式
                    event.events = EPOLLIN | EPOLLET;
                    event.data.fd = connfd;
                    epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &amp;event);
                } else {
                    // 只检测读事件
                    if (events[i].events &amp; EPOLLOUT) {
                        continue;
                    }
                    // 接收消息，将缓冲区减少，这样能更好说明一次性无法读取数据时，epoll的操作
                    // 需要循环读取数据
                    char recv_buf[5] = {0};
                    while ((ret = read(curfd, recv_buf, sizeof(recv_buf))) &gt; 0) {
                        // 应该是打印的时候最后没有结束符
                        char test_buf[6] = {0};
                        strcpy(test_buf, recv_buf);
                        printf(&quot;recv server data : %s\\n&quot;, test_buf);
                        // write(STDOUT_FILENO, recv_buf, ret);
                        // write(curfd, recv_buf, strlen(recv_buf));
                        write(curfd, recv_buf, sizeof(recv_buf));
                        memset(recv_buf, 0, sizeof(recv_buf));
                    }
                    if (ret == -1) {
                        if(errno == EAGAIN) {
                            printf(&quot;data over...\\n&quot;);
                        }else {
                            perror(&quot;read&quot;);
                            exit(-1);
                        }
                    } else {
                        // 表示客户端断开连接
                        printf(&quot;client closed...\\n&quot;);
                        close(curfd);
                        epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL);
                        break;
                    }
                }
            }
        }
    }

    close(listenfd);
    close(epfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="客户端-7" tabindex="-1"><a class="header-anchor" href="#客户端-7"><span>客户端</span></a></h5><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;

#define SERVERIP &quot;127.0.0.1&quot;
#define PORT 6789

int main()
{
    // 1. 创建socket（用于通信的套接字）
    int connfd = socket(AF_INET, SOCK_STREAM, 0);
    if (connfd == -1) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    // 2. 连接服务器端
    struct sockaddr_in server_addr;
    server_addr.sin_family = PF_INET;
    inet_pton(AF_INET, SERVERIP, &amp;server_addr.sin_addr.s_addr);
    server_addr.sin_port = htons(PORT);
    int ret = connect(connfd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));
    if (ret == -1) {
        perror(&quot;connect&quot;);
        exit(-1);
    }
    // 3. 通信
    char recv_buf[1024] = {0};
    while (1) {
        // 发送数据，修改为从键盘获取内容
        fgets(recv_buf, sizeof(recv_buf), stdin);
        write(connfd, recv_buf, strlen(recv_buf));
        // 因为用的时同一个数组，不清空就会有残留数据
        memset(recv_buf, 0, sizeof(recv_buf));
        // 接收数据
        ret = read(connfd, recv_buf, sizeof(recv_buf));
        if (ret == -1) {
            perror(&quot;read&quot;);
            exit(-1);
        } else if (ret &gt; 0) {
            printf(&quot;recv server data : %s\\n&quot;, recv_buf);
        } else {
            // 表示客户端断开连接
            printf(&quot;client closed...\\n&quot;);
        }
        // 休眠的目的是为了更好的观察，放在此处可以解决read: Connection reset by peer问题
        sleep(1);
    }
    // 关闭连接
    close(connfd);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="udp与本地套接字" tabindex="-1"><a class="header-anchor" href="#udp与本地套接字"><span>UDP与本地套接字</span></a></h1><h2 id="udp通信" tabindex="-1"><a class="header-anchor" href="#udp通信"><span>UDP通信</span></a></h2><h3 id="通信流程" tabindex="-1"><a class="header-anchor" href="#通信流程"><span>通信流程</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211127210835952.png" alt="image-20211127210835952"></p><h3 id="消息收发函数" tabindex="-1"><a class="header-anchor" href="#消息收发函数"><span>消息收发函数</span></a></h3><ul><li><code>ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);</code><ul><li>功能：udp发送消息函数</li><li>参数 <ul><li><code>sockfd</code>：通信的套接字(文件描述符)</li><li><code>buf</code>：要发送的数据</li><li><code>len</code>：发送数据的长度</li><li><code>flags</code>：设置为0即可</li><li><code>dest_addr</code>：通信的另外一端的地址信息</li><li><code>addrlen</code>：地址的内存大小，即<code>sizeof(dest_addr)</code></li></ul></li><li>返回值：失败-1，否则返回发送数据大小</li></ul></li><li><code>ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); </code><ul><li>功能：udp接收消息函数</li><li>参数 <ul><li><code>sockfd</code>：通信的套接字(文件描述符)</li><li><code>buf</code>：接收的数据</li><li><code>len</code>：接收数据的长度</li><li><code>flags</code>：设置为0即可</li><li><code>dest_addr</code>：通信的另外一端的地址信息，不需要设置为NULL即可</li><li><code>addrlen</code>：地址的内存大小，即<code>sizeof(dest_addr)</code></li></ul></li><li>返回值：失败-1，否则返回发送数据大小</li></ul></li></ul><h3 id="实例-udp通信" tabindex="-1"><a class="header-anchor" href="#实例-udp通信"><span>实例：UDP通信</span></a></h3><h4 id="说明-2" tabindex="-1"><a class="header-anchor" href="#说明-2"><span>说明</span></a></h4><ul><li>服务端不需要设置监听文件描述符=&gt;因为不需要三次握手</li><li>不需要多进程/多线程，或者IO多路复用即可实现多并发</li></ul><h4 id="服务端-6" tabindex="-1"><a class="header-anchor" href="#服务端-6"><span>服务端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 绑定本机地址(服务端)</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 通信</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> recvbuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> ipbuf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> cliaddr<span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 接收数据</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recvbuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client IP : %s, Port : %d\\n&quot;</span><span class="token punctuation">,</span> 
            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> ipbuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ipbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">ntohs</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client say : %s\\n&quot;</span><span class="token punctuation">,</span> recvbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发送数据</span>
        <span class="token function">sendto</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>recvbuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-8" tabindex="-1"><a class="header-anchor" href="#客户端-8"><span>客户端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SERVERIP</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 通信</span>
    <span class="token comment">// 设置服务器信息</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SERVERIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        <span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token string">&quot;hello , i am client %d \\n&quot;</span><span class="token punctuation">,</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendto</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 接收数据</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server say : %s\\n&quot;</span><span class="token punctuation">,</span> sendBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="广播" tabindex="-1"><a class="header-anchor" href="#广播"><span>广播</span></a></h2><h3 id="简介-11" tabindex="-1"><a class="header-anchor" href="#简介-11"><span>简介</span></a></h3><ul><li>只能在局域网中使用</li><li>客户端需要绑定服务器广播使用的端口，才可以接收到广播消息</li></ul><blockquote><p>向子网中多台计算机发送消息，并且子网中所有的计算机都可以接收到发送方发送的消息，每个广播消息都包含一个特殊的IP地址，这个IP中子网内主机标志部分的二进制全部为1</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211204205113069.png" alt="image-20211204205113069"></p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><ul><li>通过设置<code>setsockopt</code>函数，服务端进行设置（发送广播端）</li><li><code>int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); </code><ul><li><code>sockfd</code>：通信套接字</li><li><code>level</code>：设置为<code>SOL_SOCKET</code></li><li><code>optname</code>：设置为<code>SO_BROADCAST</code></li><li><code>optval</code>：int类型的值，为1表示允许广播</li><li><code>optlen</code>：optval的大小</li></ul></li></ul><h3 id="注意事项-4" tabindex="-1"><a class="header-anchor" href="#注意事项-4"><span>注意事项</span></a></h3><ul><li><p>此时客户端和服务端界限模糊，按理来说，需要<code>bind</code>端为服务端，而在广播时，需要<code>bind</code>的一端为接收消息端</p></li><li><p><code>发送广播端</code>需要通过<code>setsockopt</code>设置相关信息，广播地址需要根据本地IP进行配置，即<code>xxx.xxx.xxx.255</code></p></li><li><p><code>接收广播端</code>需要绑定广播地址或设置为接收任意地址消息</p></li><li><p>接收端在连入时，已经过去的消息将不被接收</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211204212615592.png" alt="image-20211204212615592"></p></li></ul><h3 id="实例-广播" tabindex="-1"><a class="header-anchor" href="#实例-广播"><span>实例：广播</span></a></h3><h4 id="服务端-发送广播端" tabindex="-1"><a class="header-anchor" href="#服务端-发送广播端"><span>服务端（发送广播端）</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BROADCASTIP</span> <span class="token string">&quot;192.168.213.255&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.设置广播属性</span>
    <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">setsockopt</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_BROADCAST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.创建一个广播的地址</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> broad_addr<span class="token punctuation">;</span>
    broad_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    broad_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> BROADCASTIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>broad_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 通信</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token string">&quot;hello, client....%d&quot;</span><span class="token punctuation">,</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送数据</span>
        <span class="token function">sendto</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>broad_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>broad_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;广播的数据：%s\\n&quot;</span><span class="token punctuation">,</span> sendBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-接收广播端" tabindex="-1"><a class="header-anchor" href="#客户端-接收广播端"><span>客户端（接收广播端）</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BROADCASTIP</span> <span class="token string">&quot;192.168.213.255&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.客户端绑定通信的IP和端口</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置为接收任意网址信息或指定多播地址</span>
    <span class="token comment">// addr.sin_addr.s_addr = INADDR_ANY;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> BROADCASTIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 将信息进行绑定</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4. 通信</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 接收数据</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server say : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组播-多播" tabindex="-1"><a class="header-anchor" href="#组播-多播"><span>组播(多播）</span></a></h2><h3 id="简介-12" tabindex="-1"><a class="header-anchor" href="#简介-12"><span>简介</span></a></h3><ul><li>组播既可以用于局域网，也可以用于广域网</li><li>客户端需要加入多播组，才能接收到多播的数据</li></ul><blockquote><p>单播地址标识单个 IP 接口，广播地址标识某个子网的所有 IP 接口，多播地址标识一组 IP 接口</p><p>单播和广播是寻址方案的两个极端（要么单个要么全部），多播则意在两者之间提供一种折中方案</p><p>多播数据报只应该由对它感兴趣的接口接收，也就是说由运行相应多播会话应用系统的主机上的接口接收。另外，广播一般局限于局域网内使用，而多播则既可以用于局域网，也可以跨广域网使用</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211204212840626.png" alt="image-20211204212840626"></p><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1"><span>方法</span></a></h3><ul><li>通过设置<code>setsockopt</code>函数，服务器和客户端都需要进行设置</li><li><code>int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); </code></li><li>服务端：设置多播的信息，外出接口 <ul><li><code>sockfd</code>：通信套接字</li><li><code>level</code>：设置为<code>IPPROTO_IP</code></li><li><code>optname</code>：设置为<code>IP_MULTICAST_IF</code></li><li><code>optval</code>：<code>struct in_addr</code>类型</li><li><code>optlen</code>：optval的大小</li></ul></li><li>客户端：加入多播组 <ul><li><code>sockfd</code>：通信套接字</li><li><code>level</code>：设置为<code>IPPROTO_IP</code></li><li><code>optname</code>：设置为<code>IP_ADD_MEMBERSHIP</code></li><li><code>optval</code>：<code>struct ip_mreq</code>类型</li><li><code>optlen</code>：optval的大小</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token class-name">uint32_t</span> <span class="token class-name">in_addr_t</span><span class="token punctuation">;</span> 
<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span> 
    <span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ip_mreq</span> <span class="token punctuation">{</span> 
    <span class="token comment">/* IP multicast address of group. */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> imr_multiaddr<span class="token punctuation">;</span> <span class="token comment">// 组播的IP地址 </span>
    <span class="token comment">/* Local IP address of interface. */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> imr_interface<span class="token punctuation">;</span> <span class="token comment">// 本地的IP地址 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项-5" tabindex="-1"><a class="header-anchor" href="#注意事项-5"><span>注意事项</span></a></h3><ul><li>服务端通过<code>setsockopt</code>设置<code>optval</code>时，需要指定多播地址，即<code>239.0.0.0~239.255.255.255</code>其中一个即可</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211204220128304.png" alt="image-20211204220128304"></p><h3 id="实例-组播" tabindex="-1"><a class="header-anchor" href="#实例-组播"><span>实例：组播</span></a></h3><h4 id="服务端-7" tabindex="-1"><a class="header-anchor" href="#服务端-7"><span>服务端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MULTIIP</span> <span class="token string">&quot;239.0.0.10&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.设置多播属性</span>
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> op<span class="token punctuation">;</span>
    <span class="token comment">// 初始化多播地址</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> MULTIIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setsockopt</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> IPPROTO_IP<span class="token punctuation">,</span> IP_MULTICAST_IF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.初始化客户端的地址信息</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> cliaddr<span class="token punctuation">;</span>
    cliaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    cliaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> MULTIIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 通信</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token string">&quot;hello, client....%d&quot;</span><span class="token punctuation">,</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送数据</span>
        <span class="token function">sendto</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;多播的数据：%s\\n&quot;</span><span class="token punctuation">,</span> sendBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-9" tabindex="-1"><a class="header-anchor" href="#客户端-9"><span>客户端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MULTIIP</span> <span class="token string">&quot;239.0.0.10&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">6789</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.客户端绑定通信的IP和端口</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置为接收任意网址信息或指定多播地址</span>
    <span class="token comment">// addr.sin_addr.s_addr = INADDR_ANY;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> MULTIIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 将信息进行绑定</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4. 加入多播组</span>
    <span class="token comment">// 设置多播属性</span>
    <span class="token keyword">struct</span> <span class="token class-name">ip_mreq</span> op<span class="token punctuation">;</span>
    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> MULTIIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">.</span>imr_multiaddr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    op<span class="token punctuation">.</span>imr_interface<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>
    <span class="token comment">// 加入多播组</span>
    <span class="token function">setsockopt</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> IPPROTO_IP<span class="token punctuation">,</span> IP_ADD_MEMBERSHIP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 通信</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 接收数据</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server say : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地套接字通信" tabindex="-1"><a class="header-anchor" href="#本地套接字通信"><span>本地套接字通信</span></a></h2><h3 id="简介-13" tabindex="-1"><a class="header-anchor" href="#简介-13"><span>简介</span></a></h3><ul><li>本地套接字的作用：本地的进程间通信，包括<code>有关系的进程通信(父子进程)</code>和<code>没有关系的进程间通信</code></li><li>本地套接字实现流程和网络套接字类似，一般采用<code>TCP的通信流程</code></li></ul><h3 id="通信流程-1" tabindex="-1"><a class="header-anchor" href="#通信流程-1"><span>通信流程</span></a></h3><ul><li>服务端 <ol><li>创建监听的套接字：<code>int lfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0);</code></li><li>监听的套接字绑定本地的套接字文件：<code>bind(lfd, addr, len); </code>，绑定成功之后，指定的<code>sun_path</code>中的套接字文件会自动生成</li><li>监听：<code>listen(lfd, 100);</code></li><li>等待并接受连接请求：<code>int cfd = accept(lfd, &amp;cliaddr, len);</code></li><li>通信 <ul><li>接收数据：<code>read/recv</code></li><li>发送数据：<code>write/send</code></li></ul></li><li>关闭连接：<code>close()</code></li></ol></li><li>客户端 <ol><li>创建通信的套接字：<code>int cfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0); </code></li><li>监听的套接字绑定本地的IP端口：<code>bind(cfd, &amp;addr, len); </code>，绑定成功之后，指定的sun_path中的套接字文件会自动生成</li><li>连接服务器：<code>connect(fd, &amp;serveraddr, sizeof(serveraddr));</code></li><li>通信 <ul><li>接收数据：<code>read/recv</code></li><li>发送数据：<code>write/send</code></li></ul></li><li>关闭连接：<code>close()</code></li></ol></li></ul><h3 id="注意事项-6" tabindex="-1"><a class="header-anchor" href="#注意事项-6"><span>注意事项</span></a></h3><ul><li><p>地址结构体为：<code>struct sockaddr_un</code>类型</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 头文件: sys/un.h </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNIX_PATH_MAX</span> <span class="token expression"><span class="token number">108</span> </span></span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> <span class="token punctuation">{</span> 
    <span class="token class-name">sa_family_t</span> sun_family<span class="token punctuation">;</span> <span class="token comment">// 地址族协议 af_local </span>
    <span class="token keyword">char</span> sun_path<span class="token punctuation">[</span>UNIX_PATH_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 套接字文件的路径, 这是一个伪文件, 大小永远=0 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>unlink</code>解除占用：本地套接字通信通过文件，如果不用unlink解除占用，则会出现&quot;bind: Address already in use&quot;</p></li></ul><h3 id="实例-本地进程间通信" tabindex="-1"><a class="header-anchor" href="#实例-本地进程间通信"><span>实例：本地进程间通信</span></a></h3><h4 id="服务端-8" tabindex="-1"><a class="header-anchor" href="#服务端-8"><span>服务端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 本地套接字通信通过文件，如果不用unlink解除占用，则会出现&quot;bind: Address already in use&quot;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 创建监听套接字</span>
    <span class="token keyword">int</span> listenfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 绑定本地信息</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 监听</span>
    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4. 接收连接</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> client_addr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> client_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client_addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;client.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 5. 通信</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收信息</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> buf_len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf_len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>buf_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client close...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;client say : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 发送信息</span>
            <span class="token function">send</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 6. 关闭套接字</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-10" tabindex="-1"><a class="header-anchor" href="#客户端-10"><span>客户端</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 本地套接字通信通过文件，如果不用unlink解除占用，则会出现&quot;bind: Address already in use&quot;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&quot;client.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 创建通信套接字</span>
    <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 绑定</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> client_addr<span class="token punctuation">;</span>
    client_addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;client.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 建立连接</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> server_addr<span class="token punctuation">;</span>
    server_addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> <span class="token string">&quot;server.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>server_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 通信</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送信息</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;the data is %d&quot;</span><span class="token punctuation">,</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">send</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 接收信息</span>
        <span class="token keyword">int</span> buf_len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf_len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;recv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>buf_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server close...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;server say : %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 6. 关闭套接字</span>
    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="阻塞-非阻塞-同步-异步" tabindex="-1"><a class="header-anchor" href="#阻塞-非阻塞-同步-异步"><span>阻塞/非阻塞 &amp; 同步/异步</span></a></h1>`,98),I=a('<li><p>一个典型的网络IO接口调用，分为两个阶段，分别是<code>数据就绪</code> 和 <code>数据读写</code></p></li><li><p><code>数据就绪阶段</code>分为<code>阻塞</code>和<code>非阻塞</code></p><ul><li>阻塞：阻塞当前线程，直到满足条件</li><li>非阻塞：直接返回，等满足条件时再通知</li></ul></li><li><p><code>数据读写阶段</code>分为<code>同步</code>和<code>异步</code></p><ul><li>同步：当A向B请求调用一个网络IO接口时(或者调用某个业务逻辑API接口时)，<strong>数据的读写都是由请求方A自己来完成的(不管是阻塞还是非阻塞)</strong></li><li>异步：A向B请求调用一个网络IO接口时(或者调用某个业务逻辑API接口时)，<strong>向B传入请求的事件以及事件发生时通知的方式，A就可以处理其它逻辑了</strong>，当B监听到事件处理完成后，会用事先约定好的通知方式，通知A处理结果</li></ul></li><li><p>小结</p><blockquote><p>陈硕：在处理 IO 的时候，阻塞和非阻塞都是同步 IO，只有使用了特殊的 API 才是异步 IO</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209185616260.png" alt="image-20211209185616260"></p></li><li><p>图示说明</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209185734047.png" alt="image-20211209185734047"></p><ul><li><code>sockfd</code>对应操作系统中的TCP接收缓冲区</li><li><code>recv</code>默认阻塞，直到读到数据才往下执行，如果设置为非阻塞，那么就应该通过返回值判断 <ul><li><code>size == -1</code>：说明读取出错了，但有几种例外需要判断，如产生了<code>EINTR</code>(信号捕捉回收子进程资源时产生<code>SIGCHLD</code>导致这个信号)，<code>EAGAIN/EWOULDBLOCK</code>信号</li><li><code>size == 0</code>：读到文件末尾，即对方连接已关闭</li><li><code>size &gt; 0</code>：读到了大小为<code>size</code>的数据</li></ul></li></ul></li>',5),L=n("p",null,"参考",-1),P={href:"https://blog.csdn.net/hnlyyk/article/details/51444617",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.cnblogs.com/pigerhan/archive/2013/02/27/2935403.html",target:"_blank",rel:"noopener noreferrer"},T=a(`<h1 id="unix-linux上的i-o模型" tabindex="-1"><a class="header-anchor" href="#unix-linux上的i-o模型"><span>Unix/Linux上的I/O模型</span></a></h1><h2 id="阻塞-bio-blocking" tabindex="-1"><a class="header-anchor" href="#阻塞-bio-blocking"><span>阻塞(BIO, blocking)</span></a></h2><ul><li>调用者调用了某个函数，<strong>等待这个函数返回，期间什么也不做</strong>，不停的去检查这个函数有没有返回，必须等这个函数返回才能进行下一步动作</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209201202971.png" alt="image-20211209201202971"></p><h2 id="非阻塞-nio-non-blocking" tabindex="-1"><a class="header-anchor" href="#非阻塞-nio-non-blocking"><span>非阻塞(NIO, non-blocking)</span></a></h2><ul><li>非阻塞等待，<strong>每隔一段时间就去检测IO事件是否就绪，没有就绪就可以做其他事</strong></li><li>非阻塞 I/O 执行系统调用总是立即返回，不管事件是否已经发生</li><li>若事件没有发生，则返回-1，此时可以根据 <code>errno</code> 区分这两种情况，对于<code>accept</code>，<code>recv</code> 和 <code>send</code>，事件未发生时，<code>errno</code> 通常被设置成 <code>EAGAIN</code></li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209201425774.png" alt="image-20211209201425774"></p><h2 id="io-复用-io-multiplexing" tabindex="-1"><a class="header-anchor" href="#io-复用-io-multiplexing"><span>IO 复用(IO multiplexing)</span></a></h2><ul><li>Linux 用 <code>select/poll/epoll</code> 函数实现 IO 复用模型，这些函数也会使进程阻塞，但是<strong>和阻塞IO所不同的是这些函数可以同时阻塞多个IO操作</strong></li><li>可以同时对多个读操作、写操作的IO函数进行检测。直到有数据可读或可写时，才真正调用IO操作函数</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209201547104.png" alt="image-20211209201547104"></p><h2 id="信号驱动-signal-driven" tabindex="-1"><a class="header-anchor" href="#信号驱动-signal-driven"><span>信号驱动(signal-driven)</span></a></h2><ul><li>Linux 用套接口进行信号驱动 IO，安装一个信号处理函数，<strong>进程继续运行并不阻塞，当IO事件就绪，进程收到SIGIO 信号，然后处理 IO 事件</strong></li><li>下图中，内核在第一个阶段是异步，在第二个阶段是同步</li><li>与非阻塞IO的区别在于它提供了消息通知机制，不需要用户进程不断的轮询检查，减少了系统API的调用次数，提高了效率</li></ul><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209201744086.png" alt="image-20211209201744086"></p><h2 id="异步-asynchronous" tabindex="-1"><a class="header-anchor" href="#异步-asynchronous"><span>异步(asynchronous)</span></a></h2><ul><li>Linux中，可以调用 <code>aio_read</code> 函数告诉内核<strong>描述字缓冲区指针和缓冲区的大小、文件偏移及通知的方式</strong>，然后立即返回，当内核将数据拷贝到缓冲区后，再通知应用程序</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Asynchronous I/O control block. */</span> 
<span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> aio_fildes<span class="token punctuation">;</span> <span class="token comment">/* File desriptor. */</span> 
    <span class="token keyword">int</span> aio_lio_opcode<span class="token punctuation">;</span> <span class="token comment">/* Operation to be performed. */</span> 
    <span class="token keyword">int</span> aio_reqprio<span class="token punctuation">;</span> <span class="token comment">/* Request priority offset. */</span> 
    <span class="token keyword">volatile</span> <span class="token keyword">void</span> <span class="token operator">*</span>aio_buf<span class="token punctuation">;</span> <span class="token comment">/* Location of buffer. */</span> 
    <span class="token class-name">size_t</span> aio_nbytes<span class="token punctuation">;</span> <span class="token comment">/* Length of transfer. */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">sigevent</span> aio_sigevent<span class="token punctuation">;</span> <span class="token comment">/* Signal number and value. */</span> 
    
    <span class="token comment">/* Internal members. */</span> 
    <span class="token keyword">struct</span> <span class="token class-name">aiocb</span> <span class="token operator">*</span>__next_prio<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> __abs_prio<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> __policy<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> __error_code<span class="token punctuation">;</span> 
    __ssize_t __return_value<span class="token punctuation">;</span> 
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__USE_FILE_OFFSET64 </span></span>
    __off_t aio_offset<span class="token punctuation">;</span> <span class="token comment">/* File offset. */</span> 
    <span class="token keyword">char</span> __pad<span class="token punctuation">[</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>__off64_t<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>__off_t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span>
    __off64_t aio_offset<span class="token punctuation">;</span> <span class="token comment">/* File offset. */</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
    <span class="token keyword">char</span> __glibc_reserved<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20211209202158250.png" alt="image-20211209202158250"></p>`,17);function E(C,R){const e=c("ExternalLinkIcon");return i(),o("div",null,[u,n("ol",null,[d,n("li",null,[r,n("p",null,[s("注："),n("a",k,[s("参考链接"),t(e)])])]),v]),m,n("ul",null,[b,n("li",null,[s("当停止所有的客户端连接后，出现"),h,s("，如何解决？ "),n("ul",null,[g,f,n("li",null,[s("方法："),n("a",y,[s("[261]Connection reset by peer的常见原因及解决办法"),t(e)])])])]),w]),_,n("ul",null,[n("li",null,[n("a",q,[s("多路复用IO模型之select与并发问题进一步优化"),t(e)])])]),x,n("ul",null,[I,n("li",null,[L,n("ul",null,[n("li",null,[n("a",P,[s("linux中对errno是EINTR的处理"),t(e)])]),n("li",null,[n("a",N,[s("Linux中的EAGAIN含义"),t(e)])])])])]),T])}const O=p(l,[["render",E],["__file","Linux服务器编程.html.vue"]]),S=JSON.parse('{"path":"/view/note/C__/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.html","title":"Linux服务器编程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"系统配置","slug":"系统配置","link":"#系统配置","children":[]},{"level":2,"title":"VS code","slug":"vs-code","link":"#vs-code","children":[]},{"level":2,"title":"GCC","slug":"gcc","link":"#gcc","children":[{"level":3,"title":"安装gcc","slug":"安装gcc","link":"#安装gcc","children":[]},{"level":3,"title":"gcc工作流程","slug":"gcc工作流程","link":"#gcc工作流程","children":[]},{"level":3,"title":"gcc常用参数选项","slug":"gcc常用参数选项","link":"#gcc常用参数选项","children":[]},{"level":3,"title":"gcc与g++区别","slug":"gcc与g-区别","link":"#gcc与g-区别","children":[]}]},{"level":2,"title":"静态库与动态库","slug":"静态库与动态库","link":"#静态库与动态库","children":[{"level":3,"title":"库","slug":"库","link":"#库","children":[]},{"level":3,"title":"静态库的制作","slug":"静态库的制作","link":"#静态库的制作","children":[]},{"level":3,"title":"静态库的使用","slug":"静态库的使用","link":"#静态库的使用","children":[]},{"level":3,"title":"动态库的制作","slug":"动态库的制作","link":"#动态库的制作","children":[]},{"level":3,"title":"动态库的使用","slug":"动态库的使用","link":"#动态库的使用","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"静态库和动态库的对比","slug":"静态库和动态库的对比","link":"#静态库和动态库的对比","children":[]}]},{"level":2,"title":"Makefile","slug":"makefile","link":"#makefile","children":[{"level":3,"title":"概念及安装","slug":"概念及安装","link":"#概念及安装","children":[]},{"level":3,"title":"Makefile 文件命名和规则","slug":"makefile-文件命名和规则","link":"#makefile-文件命名和规则","children":[]},{"level":3,"title":"Makefile编写方式","slug":"makefile编写方式","link":"#makefile编写方式","children":[]},{"level":3,"title":"清除中间文件","slug":"清除中间文件","link":"#清除中间文件","children":[]},{"level":3,"title":"工作原理","slug":"工作原理-1","link":"#工作原理-1","children":[]}]},{"level":2,"title":"GDB调试","slug":"gdb调试","link":"#gdb调试","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"准备工作","slug":"准备工作-1","link":"#准备工作-1","children":[]},{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]}]},{"level":2,"title":"文件IO","slug":"文件io","link":"#文件io","children":[{"level":3,"title":"标准 C 库 IO 函数","slug":"标准-c-库-io-函数","link":"#标准-c-库-io-函数","children":[]},{"level":3,"title":"标准 C 库 IO 和 Linux 系统 IO 的关系","slug":"标准-c-库-io-和-linux-系统-io-的关系","link":"#标准-c-库-io-和-linux-系统-io-的关系","children":[]},{"level":3,"title":"虚拟地址空间","slug":"虚拟地址空间","link":"#虚拟地址空间","children":[]},{"level":3,"title":"文件描述符","slug":"文件描述符","link":"#文件描述符","children":[]},{"level":3,"title":"Linux 系统 IO 函数","slug":"linux-系统-io-函数","link":"#linux-系统-io-函数","children":[]},{"level":3,"title":"文件属性操作函数","slug":"文件属性操作函数","link":"#文件属性操作函数","children":[]},{"level":3,"title":"目录操作函数","slug":"目录操作函数","link":"#目录操作函数","children":[]},{"level":3,"title":"目录遍历函数","slug":"目录遍历函数","link":"#目录遍历函数","children":[]},{"level":3,"title":"文件描述符之dup、dup2","slug":"文件描述符之dup、dup2","link":"#文件描述符之dup、dup2","children":[]},{"level":3,"title":"fcntl 函数","slug":"fcntl-函数","link":"#fcntl-函数","children":[]}]},{"level":2,"title":"程序和进程","slug":"程序和进程","link":"#程序和进程","children":[]},{"level":2,"title":"单道、多道程序设计","slug":"单道、多道程序设计","link":"#单道、多道程序设计","children":[]},{"level":2,"title":"时间片","slug":"时间片","link":"#时间片","children":[]},{"level":2,"title":"并行和并发","slug":"并行和并发","link":"#并行和并发","children":[]},{"level":2,"title":"进程控制块（PCB）","slug":"进程控制块-pcb","link":"#进程控制块-pcb","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"三态模型","slug":"三态模型","link":"#三态模型","children":[]},{"level":2,"title":"五态模型","slug":"五态模型","link":"#五态模型","children":[]},{"level":2,"title":"进程相关命令","slug":"进程相关命令","link":"#进程相关命令","children":[{"level":3,"title":"查看进程-静态","slug":"查看进程-静态","link":"#查看进程-静态","children":[]},{"level":3,"title":"查看进程-动态","slug":"查看进程-动态","link":"#查看进程-动态","children":[]},{"level":3,"title":"杀死进程","slug":"杀死进程","link":"#杀死进程","children":[]}]},{"level":2,"title":"进程号和相关函数","slug":"进程号和相关函数","link":"#进程号和相关函数","children":[]},{"level":2,"title":"进程创建：fork","slug":"进程创建-fork","link":"#进程创建-fork","children":[]},{"level":2,"title":"fork工作原理","slug":"fork工作原理","link":"#fork工作原理","children":[]},{"level":2,"title":"父子进程关系","slug":"父子进程关系","link":"#父子进程关系","children":[{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"共同点","slug":"共同点","link":"#共同点","children":[]},{"level":3,"title":"父子进程对变量共享说明","slug":"父子进程对变量共享说明","link":"#父子进程对变量共享说明","children":[]}]},{"level":2,"title":"GDB 多进程调试","slug":"gdb-多进程调试","link":"#gdb-多进程调试","children":[]},{"level":2,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":2,"title":"种类","slug":"种类","link":"#种类","children":[]},{"level":2,"title":"进程退出","slug":"进程退出","link":"#进程退出","children":[]},{"level":2,"title":"孤儿进程","slug":"孤儿进程","link":"#孤儿进程","children":[]},{"level":2,"title":"僵尸进程","slug":"僵尸进程","link":"#僵尸进程","children":[]},{"level":2,"title":"进程回收","slug":"进程回收","link":"#进程回收","children":[{"level":3,"title":"基本概念","slug":"基本概念-2","link":"#基本概念-2","children":[]},{"level":3,"title":"退出信息相关宏函数","slug":"退出信息相关宏函数","link":"#退出信息相关宏函数","children":[]},{"level":3,"title":"wait()","slug":"wait","link":"#wait","children":[]},{"level":3,"title":"waitpid()","slug":"waitpid","link":"#waitpid","children":[]}]},{"level":2,"title":"进程间通讯概念","slug":"进程间通讯概念","link":"#进程间通讯概念","children":[]},{"level":2,"title":"Linux 进程间通信的方式","slug":"linux-进程间通信的方式","link":"#linux-进程间通信的方式","children":[]},{"level":2,"title":"管道","slug":"管道","link":"#管道","children":[{"level":3,"title":"管道特点","slug":"管道特点","link":"#管道特点","children":[]},{"level":3,"title":"管道实现进程通信的原理","slug":"管道实现进程通信的原理","link":"#管道实现进程通信的原理","children":[]},{"level":3,"title":"管道的数据结构","slug":"管道的数据结构","link":"#管道的数据结构","children":[]},{"level":3,"title":"匿名管道","slug":"匿名管道","link":"#匿名管道","children":[]},{"level":3,"title":"有名管道","slug":"有名管道","link":"#有名管道","children":[]}]},{"level":2,"title":"内存映射","slug":"内存映射","link":"#内存映射","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"进程间通信种类","slug":"进程间通信种类","link":"#进程间通信种类","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"实例：父子进程通信","slug":"实例-父子进程通信","link":"#实例-父子进程通信","children":[]},{"level":3,"title":"实例：文件拷贝","slug":"实例-文件拷贝","link":"#实例-文件拷贝","children":[]},{"level":3,"title":"实例：匿名内存映射","slug":"实例-匿名内存映射","link":"#实例-匿名内存映射","children":[]}]},{"level":2,"title":"基本概念","slug":"基本概念-3","link":"#基本概念-3","children":[]},{"level":2,"title":"信号一览表及特点","slug":"信号一览表及特点","link":"#信号一览表及特点","children":[]},{"level":2,"title":"信号相关的函数","slug":"信号相关的函数","link":"#信号相关的函数","children":[{"level":3,"title":"core文件生成及调试","slug":"core文件生成及调试","link":"#core文件生成及调试","children":[]},{"level":3,"title":"kill & raise & abort","slug":"kill-raise-abort","link":"#kill-raise-abort","children":[]},{"level":3,"title":"alarm & setitimer","slug":"alarm-setitimer","link":"#alarm-setitimer","children":[]}]},{"level":2,"title":"信号捕捉函数","slug":"信号捕捉函数","link":"#信号捕捉函数","children":[{"level":3,"title":"signal","slug":"signal","link":"#signal","children":[]},{"level":3,"title":"sigaction","slug":"sigaction","link":"#sigaction","children":[]},{"level":3,"title":"signal和sigaction区别","slug":"signal和sigaction区别","link":"#signal和sigaction区别","children":[]},{"level":3,"title":"内核实现信号捕捉的过程","slug":"内核实现信号捕捉的过程","link":"#内核实现信号捕捉的过程","children":[]},{"level":3,"title":"==未解决==","slug":"未解决","link":"#未解决","children":[]}]},{"level":2,"title":"信号集","slug":"信号集","link":"#信号集","children":[{"level":3,"title":"基本概念","slug":"基本概念-4","link":"#基本概念-4","children":[]},{"level":3,"title":"阻塞信号集与非阻塞信号集说明","slug":"阻塞信号集与非阻塞信号集说明","link":"#阻塞信号集与非阻塞信号集说明","children":[]},{"level":3,"title":"操作自定义信号集函数(sigemptyset等)","slug":"操作自定义信号集函数-sigemptyset等","link":"#操作自定义信号集函数-sigemptyset等","children":[]},{"level":3,"title":"操作内核信号集函数(sigprocmask & sigpending)","slug":"操作内核信号集函数-sigprocmask-sigpending","link":"#操作内核信号集函数-sigprocmask-sigpending","children":[]}]},{"level":2,"title":"SIGCHLD信号","slug":"sigchld信号","link":"#sigchld信号","children":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"实例：僵尸问题解决","slug":"实例-僵尸问题解决","link":"#实例-僵尸问题解决","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"基本概念","slug":"基本概念-5","link":"#基本概念-5","children":[]},{"level":2,"title":"共享内存使用步骤","slug":"共享内存使用步骤","link":"#共享内存使用步骤","children":[]},{"level":2,"title":"共享内存操作函数","slug":"共享内存操作函数","link":"#共享内存操作函数","children":[]},{"level":2,"title":"共享内存操作命令","slug":"共享内存操作命令","link":"#共享内存操作命令","children":[{"level":3,"title":"ipcs","slug":"ipcs","link":"#ipcs","children":[]},{"level":3,"title":"ipcrm","slug":"ipcrm","link":"#ipcrm","children":[]}]},{"level":2,"title":"实例：进程间通信（注意）","slug":"实例-进程间通信-注意","link":"#实例-进程间通信-注意","children":[{"level":3,"title":"写端","slug":"写端","link":"#写端","children":[]},{"level":3,"title":"读端","slug":"读端","link":"#读端","children":[]},{"level":3,"title":"注意","slug":"注意-1","link":"#注意-1","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]},{"level":3,"title":"共享内存与内存映射区别","slug":"共享内存与内存映射区别","link":"#共享内存与内存映射区别","children":[]}]},{"level":2,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[{"level":3,"title":"终端","slug":"终端","link":"#终端","children":[]},{"level":3,"title":"进程组","slug":"进程组","link":"#进程组","children":[]},{"level":3,"title":"会话","slug":"会话","link":"#会话","children":[]},{"level":3,"title":"进程组、会话、控制终端之间的关系","slug":"进程组、会话、控制终端之间的关系","link":"#进程组、会话、控制终端之间的关系","children":[]},{"level":3,"title":"进程组、会话操作函数","slug":"进程组、会话操作函数","link":"#进程组、会话操作函数","children":[]}]},{"level":2,"title":"守护进程概念","slug":"守护进程概念","link":"#守护进程概念","children":[]},{"level":2,"title":"守护进程的创建步骤","slug":"守护进程的创建步骤","link":"#守护进程的创建步骤","children":[]},{"level":2,"title":"实例：守护进程实现每隔两秒获取时间并写入磁盘","slug":"实例-守护进程实现每隔两秒获取时间并写入磁盘","link":"#实例-守护进程实现每隔两秒获取时间并写入磁盘","children":[]},{"level":2,"title":"后台运行进程","slug":"后台运行进程","link":"#后台运行进程","children":[]},{"level":2,"title":"线程概述","slug":"线程概述","link":"#线程概述","children":[{"level":3,"title":"基本概念","slug":"基本概念-6","link":"#基本概念-6","children":[]},{"level":3,"title":"线程和进程区别","slug":"线程和进程区别","link":"#线程和进程区别","children":[]},{"level":3,"title":"线程之间共享和非共享资源","slug":"线程之间共享和非共享资源","link":"#线程之间共享和非共享资源","children":[]},{"level":3,"title":"NPTL","slug":"nptl","link":"#nptl","children":[]},{"level":3,"title":"注意","slug":"注意-2","link":"#注意-2","children":[]}]},{"level":2,"title":"线程操作函数","slug":"线程操作函数","link":"#线程操作函数","children":[]},{"level":2,"title":"线程创建","slug":"线程创建","link":"#线程创建","children":[]},{"level":2,"title":"线程终止","slug":"线程终止","link":"#线程终止","children":[]},{"level":2,"title":"线程连接","slug":"线程连接","link":"#线程连接","children":[]},{"level":2,"title":"线程分离","slug":"线程分离","link":"#线程分离","children":[]},{"level":2,"title":"线程取消","slug":"线程取消","link":"#线程取消","children":[]},{"level":2,"title":"线程属性","slug":"线程属性","link":"#线程属性","children":[{"level":3,"title":"常用API","slug":"常用api","link":"#常用api","children":[]},{"level":3,"title":"设置步骤","slug":"设置步骤","link":"#设置步骤","children":[]},{"level":3,"title":"实例：通过设置线程属性实现线程分离","slug":"实例-通过设置线程属性实现线程分离","link":"#实例-通过设置线程属性实现线程分离","children":[]}]},{"level":2,"title":"==疑问==","slug":"疑问","link":"#疑问","children":[]},{"level":2,"title":"出现的原因","slug":"出现的原因","link":"#出现的原因","children":[]},{"level":2,"title":"线程同步概念","slug":"线程同步概念","link":"#线程同步概念","children":[]},{"level":2,"title":"互斥量/互斥锁","slug":"互斥量-互斥锁","link":"#互斥量-互斥锁","children":[{"level":3,"title":"基本概念","slug":"基本概念-7","link":"#基本概念-7","children":[]},{"level":3,"title":"互斥量相关操作函数","slug":"互斥量相关操作函数","link":"#互斥量相关操作函数","children":[]},{"level":3,"title":"实例：互斥锁实现进程同步售票","slug":"实例-互斥锁实现进程同步售票","link":"#实例-互斥锁实现进程同步售票","children":[]}]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[{"level":3,"title":"基本概念","slug":"基本概念-8","link":"#基本概念-8","children":[]},{"level":3,"title":"死锁的几种场景","slug":"死锁的几种场景","link":"#死锁的几种场景","children":[]}]},{"level":2,"title":"读写锁","slug":"读写锁","link":"#读写锁","children":[{"level":3,"title":"基本概念","slug":"基本概念-9","link":"#基本概念-9","children":[]},{"level":3,"title":"读写锁相关操作函数","slug":"读写锁相关操作函数","link":"#读写锁相关操作函数","children":[]},{"level":3,"title":"实例：读写锁实现读线程数量大于写线程数量","slug":"实例-读写锁实现读线程数量大于写线程数量","link":"#实例-读写锁实现读线程数量大于写线程数量","children":[]}]},{"level":2,"title":"生产者和消费者","slug":"生产者和消费者","link":"#生产者和消费者","children":[{"level":3,"title":"关系模型","slug":"关系模型","link":"#关系模型","children":[]},{"level":3,"title":"存在问题","slug":"存在问题","link":"#存在问题","children":[]},{"level":3,"title":"实例：简易版多生产者多消费者（互斥量，==存在未解决问题==）","slug":"实例-简易版多生产者多消费者-互斥量-存在未解决问题","link":"#实例-简易版多生产者多消费者-互斥量-存在未解决问题","children":[]}]},{"level":2,"title":"条件变量","slug":"条件变量","link":"#条件变量","children":[{"level":3,"title":"条件变量相关操作函数","slug":"条件变量相关操作函数","link":"#条件变量相关操作函数","children":[]},{"level":3,"title":"实例：条件变量下的多生产者多消费者","slug":"实例-条件变量下的多生产者多消费者","link":"#实例-条件变量下的多生产者多消费者","children":[]}]},{"level":2,"title":"信号量","slug":"信号量","link":"#信号量","children":[{"level":3,"title":"信号量相关操作函数","slug":"信号量相关操作函数","link":"#信号量相关操作函数","children":[]},{"level":3,"title":"实例：信号量下的多生产者多消费者","slug":"实例-信号量下的多生产者多消费者","link":"#实例-信号量下的多生产者多消费者","children":[]}]},{"level":2,"title":"网络结构模式","slug":"网络结构模式","link":"#网络结构模式","children":[{"level":3,"title":"C/S结构","slug":"c-s结构","link":"#c-s结构","children":[]},{"level":3,"title":"B/S结构","slug":"b-s结构","link":"#b-s结构","children":[]}]},{"level":2,"title":"MAC地址","slug":"mac地址","link":"#mac地址","children":[{"level":3,"title":"网卡","slug":"网卡","link":"#网卡","children":[]},{"level":3,"title":"MAC地址","slug":"mac地址-1","link":"#mac地址-1","children":[]}]},{"level":2,"title":"IP地址","slug":"ip地址","link":"#ip地址","children":[{"level":3,"title":"简介","slug":"简介-2","link":"#简介-2","children":[]},{"level":3,"title":"IP 地址编址方式","slug":"ip-地址编址方式","link":"#ip-地址编址方式","children":[]},{"level":3,"title":"A类IP地址","slug":"a类ip地址","link":"#a类ip地址","children":[]},{"level":3,"title":"B类IP地址","slug":"b类ip地址","link":"#b类ip地址","children":[]},{"level":3,"title":"C类IP地址","slug":"c类ip地址","link":"#c类ip地址","children":[]},{"level":3,"title":"D类IP地址","slug":"d类ip地址","link":"#d类ip地址","children":[]},{"level":3,"title":"特殊的网址","slug":"特殊的网址","link":"#特殊的网址","children":[]},{"level":3,"title":"子网掩码","slug":"子网掩码","link":"#子网掩码","children":[]}]},{"level":2,"title":"端口","slug":"端口","link":"#端口","children":[{"level":3,"title":"简介","slug":"简介-3","link":"#简介-3","children":[]},{"level":3,"title":"端口类型","slug":"端口类型","link":"#端口类型","children":[]}]},{"level":2,"title":"网络模型","slug":"网络模型","link":"#网络模型","children":[{"level":3,"title":"OSI七层参考模型","slug":"osi七层参考模型","link":"#osi七层参考模型","children":[]},{"level":3,"title":"TCP/IP四层模型","slug":"tcp-ip四层模型","link":"#tcp-ip四层模型","children":[]}]},{"level":2,"title":"协议","slug":"协议","link":"#协议","children":[{"level":3,"title":"简介","slug":"简介-4","link":"#简介-4","children":[]},{"level":3,"title":"常见协议","slug":"常见协议","link":"#常见协议","children":[]},{"level":3,"title":"UDP协议","slug":"udp协议","link":"#udp协议","children":[]},{"level":3,"title":"TCP协议","slug":"tcp协议","link":"#tcp协议","children":[]},{"level":3,"title":"IP协议","slug":"ip协议","link":"#ip协议","children":[]},{"level":3,"title":"以太网帧协议","slug":"以太网帧协议","link":"#以太网帧协议","children":[]},{"level":3,"title":"ARP协议","slug":"arp协议","link":"#arp协议","children":[]}]},{"level":2,"title":"网络通信流程","slug":"网络通信流程","link":"#网络通信流程","children":[{"level":3,"title":"封装与分用","slug":"封装与分用","link":"#封装与分用","children":[]},{"level":3,"title":"实例：QQ发送消息简易流程","slug":"实例-qq发送消息简易流程","link":"#实例-qq发送消息简易流程","children":[]},{"level":3,"title":"ARP协议","slug":"arp协议-1","link":"#arp协议-1","children":[]}]},{"level":2,"title":"socket介绍","slug":"socket介绍","link":"#socket介绍","children":[]},{"level":2,"title":"字节序","slug":"字节序","link":"#字节序","children":[{"level":3,"title":"简介","slug":"简介-5","link":"#简介-5","children":[]},{"level":3,"title":"字节序举例","slug":"字节序举例","link":"#字节序举例","children":[]},{"level":3,"title":"查看机器字节序","slug":"查看机器字节序","link":"#查看机器字节序","children":[]},{"level":3,"title":"字节序转换函数","slug":"字节序转换函数","link":"#字节序转换函数","children":[]}]},{"level":2,"title":"socket地址","slug":"socket地址","link":"#socket地址","children":[{"level":3,"title":"简介","slug":"简介-6","link":"#简介-6","children":[]},{"level":3,"title":"通用 socket 地址","slug":"通用-socket-地址","link":"#通用-socket-地址","children":[]},{"level":3,"title":"专用socket地址","slug":"专用socket地址","link":"#专用socket地址","children":[]}]},{"level":2,"title":"IP地址转换","slug":"ip地址转换","link":"#ip地址转换","children":[]},{"level":2,"title":"TCP与UDP区别","slug":"tcp与udp区别","link":"#tcp与udp区别","children":[{"level":3,"title":"简介","slug":"简介-8","link":"#简介-8","children":[]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}]},{"level":2,"title":"TCP通信流程","slug":"tcp通信流程","link":"#tcp通信流程","children":[{"level":3,"title":"流程图","slug":"流程图","link":"#流程图","children":[]},{"level":3,"title":"服务器端（被动接收连接）","slug":"服务器端-被动接收连接","link":"#服务器端-被动接收连接","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]}]},{"level":2,"title":"套接字函数","slug":"套接字函数","link":"#套接字函数","children":[]},{"level":2,"title":"实例：TCP通信","slug":"实例-tcp通信","link":"#实例-tcp通信","children":[{"level":3,"title":"服务器端","slug":"服务器端","link":"#服务器端","children":[]},{"level":3,"title":"客户端","slug":"客户端-1","link":"#客户端-1","children":[]},{"level":3,"title":"通信效果","slug":"通信效果","link":"#通信效果","children":[]}]},{"level":2,"title":"TCP三次握手——建立连接","slug":"tcp三次握手——建立连接","link":"#tcp三次握手——建立连接","children":[{"level":3,"title":"简易图示","slug":"简易图示","link":"#简易图示","children":[]},{"level":3,"title":"握手流程","slug":"握手流程","link":"#握手流程","children":[]},{"level":3,"title":"示例：携带数据通信流程","slug":"示例-携带数据通信流程","link":"#示例-携带数据通信流程","children":[]}]},{"level":2,"title":"TCP滑动窗口——流量控制","slug":"tcp滑动窗口——流量控制","link":"#tcp滑动窗口——流量控制","children":[{"level":3,"title":"简介","slug":"简介-9","link":"#简介-9","children":[]},{"level":3,"title":"滑动窗口与缓冲区","slug":"滑动窗口与缓冲区","link":"#滑动窗口与缓冲区","children":[]}]},{"level":2,"title":"TCP四次挥手——断开连接","slug":"tcp四次挥手——断开连接","link":"#tcp四次挥手——断开连接","children":[{"level":3,"title":"简易图示","slug":"简易图示-1","link":"#简易图示-1","children":[]},{"level":3,"title":"挥手流程","slug":"挥手流程","link":"#挥手流程","children":[]}]},{"level":2,"title":"实例：完整的TCP通信","slug":"实例-完整的tcp通信","link":"#实例-完整的tcp通信","children":[{"level":3,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":3,"title":"流程说明","slug":"流程说明","link":"#流程说明","children":[]}]},{"level":2,"title":"TCP通信并发","slug":"tcp通信并发","link":"#tcp通信并发","children":[{"level":3,"title":"注解","slug":"注解-1","link":"#注解-1","children":[]},{"level":3,"title":"实例：多进程实现TCP并发通信","slug":"实例-多进程实现tcp并发通信","link":"#实例-多进程实现tcp并发通信","children":[]},{"level":3,"title":"实例：多线程实现TCP并发通信","slug":"实例-多线程实现tcp并发通信","link":"#实例-多线程实现tcp并发通信","children":[]}]},{"level":2,"title":"TCP状态转换","slug":"tcp状态转换","link":"#tcp状态转换","children":[{"level":3,"title":"通信过程状态转换图1","slug":"通信过程状态转换图1","link":"#通信过程状态转换图1","children":[]},{"level":3,"title":"通信过程状态转换图2","slug":"通信过程状态转换图2","link":"#通信过程状态转换图2","children":[]},{"level":3,"title":"MSL与半关闭","slug":"msl与半关闭","link":"#msl与半关闭","children":[]},{"level":3,"title":"shutdown与close","slug":"shutdown与close","link":"#shutdown与close","children":[]},{"level":3,"title":"端口复用","slug":"端口复用","link":"#端口复用","children":[]},{"level":3,"title":"查看看网络相关信息命令——netstat","slug":"查看看网络相关信息命令——netstat","link":"#查看看网络相关信息命令——netstat","children":[]}]},{"level":2,"title":"阻塞等待(BIO模型)","slug":"阻塞等待-bio模型","link":"#阻塞等待-bio模型","children":[{"level":3,"title":"简介","slug":"简介-10","link":"#简介-10","children":[]},{"level":3,"title":"单任务","slug":"单任务","link":"#单任务","children":[]},{"level":3,"title":"多任务","slug":"多任务","link":"#多任务","children":[]}]},{"level":2,"title":"非阻塞，忙轮询(NIO模型)","slug":"非阻塞-忙轮询-nio模型","link":"#非阻塞-忙轮询-nio模型","children":[]},{"level":2,"title":"IO多路转接技术(简介)","slug":"io多路转接技术-简介","link":"#io多路转接技术-简介","children":[{"level":3,"title":"select/poll","slug":"select-poll","link":"#select-poll","children":[]},{"level":3,"title":"epoll","slug":"epoll","link":"#epoll","children":[]}]},{"level":2,"title":"select","slug":"select","link":"#select","children":[{"level":3,"title":"主旨思想","slug":"主旨思想","link":"#主旨思想","children":[]},{"level":3,"title":"函数说明","slug":"函数说明","link":"#函数说明","children":[]},{"level":3,"title":"工作过程分析","slug":"工作过程分析","link":"#工作过程分析","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":3,"title":"高并发优化思考","slug":"高并发优化思考","link":"#高并发优化思考","children":[]},{"level":3,"title":"存在问题(缺点)","slug":"存在问题-缺点","link":"#存在问题-缺点","children":[]}]},{"level":2,"title":"poll","slug":"poll","link":"#poll","children":[{"level":3,"title":"主旨思想","slug":"主旨思想-1","link":"#主旨思想-1","children":[]},{"level":3,"title":"函数说明","slug":"函数说明-1","link":"#函数说明-1","children":[]},{"level":3,"title":"代码实现","slug":"代码实现-1","link":"#代码实现-1","children":[]},{"level":3,"title":"存在问题(缺点)","slug":"存在问题-缺点-1","link":"#存在问题-缺点-1","children":[]}]},{"level":2,"title":"epoll","slug":"epoll-1","link":"#epoll-1","children":[{"level":3,"title":"主旨思想","slug":"主旨思想-2","link":"#主旨思想-2","children":[]},{"level":3,"title":"函数说明","slug":"函数说明-2","link":"#函数说明-2","children":[]},{"level":3,"title":"代码实现","slug":"代码实现-2","link":"#代码实现-2","children":[]},{"level":3,"title":"工作模式(LT与ET)","slug":"工作模式-lt与et","link":"#工作模式-lt与et","children":[]}]},{"level":2,"title":"UDP通信","slug":"udp通信","link":"#udp通信","children":[{"level":3,"title":"通信流程","slug":"通信流程","link":"#通信流程","children":[]},{"level":3,"title":"消息收发函数","slug":"消息收发函数","link":"#消息收发函数","children":[]},{"level":3,"title":"实例：UDP通信","slug":"实例-udp通信","link":"#实例-udp通信","children":[]}]},{"level":2,"title":"广播","slug":"广播","link":"#广播","children":[{"level":3,"title":"简介","slug":"简介-11","link":"#简介-11","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-4","link":"#注意事项-4","children":[]},{"level":3,"title":"实例：广播","slug":"实例-广播","link":"#实例-广播","children":[]}]},{"level":2,"title":"组播(多播）","slug":"组播-多播","link":"#组播-多播","children":[{"level":3,"title":"简介","slug":"简介-12","link":"#简介-12","children":[]},{"level":3,"title":"方法","slug":"方法-1","link":"#方法-1","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-5","link":"#注意事项-5","children":[]},{"level":3,"title":"实例：组播","slug":"实例-组播","link":"#实例-组播","children":[]}]},{"level":2,"title":"本地套接字通信","slug":"本地套接字通信","link":"#本地套接字通信","children":[{"level":3,"title":"简介","slug":"简介-13","link":"#简介-13","children":[]},{"level":3,"title":"通信流程","slug":"通信流程-1","link":"#通信流程-1","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-6","link":"#注意事项-6","children":[]},{"level":3,"title":"实例：本地进程间通信","slug":"实例-本地进程间通信","link":"#实例-本地进程间通信","children":[]}]},{"level":2,"title":"阻塞(BIO, blocking)","slug":"阻塞-bio-blocking","link":"#阻塞-bio-blocking","children":[]},{"level":2,"title":"非阻塞(NIO, non-blocking)","slug":"非阻塞-nio-non-blocking","link":"#非阻塞-nio-non-blocking","children":[]},{"level":2,"title":"IO 复用(IO multiplexing)","slug":"io-复用-io-multiplexing","link":"#io-复用-io-multiplexing","children":[]},{"level":2,"title":"信号驱动(signal-driven)","slug":"信号驱动-signal-driven","link":"#信号驱动-signal-driven","children":[]},{"level":2,"title":"异步(asynchronous)","slug":"异步-asynchronous","link":"#异步-asynchronous","children":[]}],"git":{},"filePathRelative":"view/note/C++/Linux服务器编程.md","excerpt":"\\n<h1>准备工作</h1>\\n<h2>系统配置</h2>\\n<ol>\\n<li>\\n<p>在虚拟机中安装Linux系统，本项目采用<code>VMware Workstation 16.1.2</code>和<code>Ubuntu 18.04</code>，本机系统为<code>Win 10</code></p>\\n</li>\\n<li>\\n<p>更新<code>Ubuntu 18.04</code>源并安装<code>open-vm-tools</code></p>\\n<ol>\\n<li>\\n<p>进入<code>/etc/apt/sources.list</code> 修改为国内镜像源（速度快），全部删除，替换为下述内容，如果更新报错，将<code>https</code>换成<code>http</code></p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\\n<span class=\\"token comment\\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span>\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\\n<span class=\\"token comment\\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span>\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\\n<span class=\\"token comment\\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span>\\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\\n<span class=\\"token comment\\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>\\n\\n<span class=\\"token comment\\"># 预发布软件源，不建议启用</span>\\n<span class=\\"token comment\\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>\\n<span class=\\"token comment\\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>\\n</code></pre></div></li>\\n<li>\\n<p>更新系统源：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># update 是同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt</span> update\\n<span class=\\"token comment\\"># upgrade 是升级已安装的所有软件包(可选)</span>\\n<span class=\\"token comment\\"># sudo apt upgrade</span>\\n</code></pre></div></li>\\n<li>\\n<p>安装<code>open-vm-tools</code>：<code>sudo apt install open-vm-tools</code></p>\\n</li>\\n<li>\\n<p><s>如果要实现文件夹共享，需要安装<code>open-vm-tools-dkms</code>：<code>sudo apt install open-vm-tools-dkms</code></s>=&gt;清华源找不到<code>open-vm-tools-dkms</code>，不安装不影响</p>\\n</li>\\n<li>\\n<p>桌面环境还需要安装<code>open-vm-tools-desktop</code>以支持双向拖放文件：<code>sudo apt install open-vm-tools-desktop</code></p>\\n</li>\\n<li>\\n<p>重启（使用<code>VMware</code>自带重启，使用<code>reboot</code>重启可能失败）后成功进行拖拽复制</p>\\n</li>\\n</ol>\\n<p>注：<a href=\\"https://blog.csdn.net/hhdhz/article/details/87922794\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考链接</a></p>\\n</li>\\n<li>\\n<p>在<code>Ubuntu 18.10</code>安装必要组件</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 安装Vim环境</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt</span> <span class=\\"token function\\">install</span> <span class=\\"token function\\">vim</span>\\n\\n<span class=\\"token comment\\"># 用于远程连接虚拟机</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt</span> <span class=\\"token function\\">install</span> openssh-server\\n\\n<span class=\\"token comment\\"># 用于查看IP地址</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt</span> <span class=\\"token function\\">install</span> net-tools\\n\\n<span class=\\"token comment\\"># 树形查看文件夹内容</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt</span> <span class=\\"token function\\">install</span> tree\\n</code></pre></div></li>\\n</ol>"}');export{O as comp,S as data};
