import{_ as a,r as s,o as d,c,a as i,b as l,d as n,e}from"./app-DZvKpr8y.js";const r={},o=e('<h1 id="git基础教程" tabindex="-1"><a class="header-anchor" href="#git基础教程"><span>Git基础教程</span></a></h1><h2 id="_1、版本控制" tabindex="-1"><a class="header-anchor" href="#_1、版本控制"><span>1、版本控制</span></a></h2><h3 id="_1-1、什么是版本控制" tabindex="-1"><a class="header-anchor" href="#_1-1、什么是版本控制"><span>1.1、什么是版本控制</span></a></h3><p>版本控制：就是在开发过程中用于<strong>管理</strong>对文件、目录或工程等内容的修改历史，简单来说它是一种管理多人协同开发项目的<strong>技术</strong>。</p><p>优势：</p><ul><li>方便查看更改历史记录，恢复和备份以前的版本</li><li>组织和保护我们的源代码和文档</li><li>统计工作量</li><li>并行开发，提高工作效率</li><li>跟踪记录整个软件开发过程</li><li>减轻开发人员的负担，节省时间</li></ul><p>没有采用版本控制技术进行软件开发可能存在的问题：</p><ul><li>代码一致性</li><li>软件内容冗余</li><li>软件开发过程的并发性</li><li>软件源代码的安全性</li></ul><h3 id="_1-2、常见的版本控制工具" tabindex="-1"><a class="header-anchor" href="#_1-2、常见的版本控制工具"><span>1.2、常见的版本控制工具</span></a></h3><ul><li>Git</li><li>SVN</li><li>CVS</li><li>VSS</li><li>TFS</li><li>…</li></ul><h3 id="_1-3、版本控制分类-采用的思想不同" tabindex="-1"><a class="header-anchor" href="#_1-3、版本控制分类-采用的思想不同"><span>1.3、版本控制分类（采用的思想不同）</span></a></h3>',11),p=i("li",null,[i("p",null,"本地版本控制（RCS）"),i("p",null,"文件的每次更新，对每个版本做个快照或补丁文件（记录对应版本更新的内容）")],-1),g={href:"https://so.csdn.net/so/search?q=SVN&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},h=i("p",null,[l("所以迭代版本保存在"),i("strong",null,"服务器"),l("上，开发者直接同步更新或上传自己的修改即可")],-1),u=i("li",null,[i("p",null,"分布式版本控制（Git）无需联网"),i("p",null,"每个人都拥有全部代码")],-1),m=e('<h3 id="_1-4、svn和git的区别" tabindex="-1"><a class="header-anchor" href="#_1-4、svn和git的区别"><span>1.4、SVN和Git的区别</span></a></h3><blockquote><p>SVN</p></blockquote><ul><li>集中版本控制系统</li><li>版本库存放在中央服务器上（需要联网）</li><li>工作方式：先从中央处理器上拿到最新版本，最后再讲修改后的版本推送到中央处理器上</li></ul><blockquote><p>Git</p></blockquote><ul><li>分布式版本控制系统</li><li>每个工作的电脑就是一个完整的版本库（不需要联网）</li><li>工作方式：每个人修改过的内容，彼此之间互相推送</li></ul><h2 id="_2、git" tabindex="-1"><a class="header-anchor" href="#_2、git"><span>2、Git</span></a></h2><h3 id="_2-1、软件下载" tabindex="-1"><a class="header-anchor" href="#_2-1、软件下载"><span>2.1、软件下载</span></a></h3>',7),b={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},_=i("li",null,"淘宝镜像：http://npm.taobao.org/mirrors/git-for-windows/",-1),v=e(`<h3 id="_2-2、安装和启动" tabindex="-1"><a class="header-anchor" href="#_2-2、安装和启动"><span>2.2、安装和启动</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/8d1c6f0009894469a3a078566f0520d5.png" alt="在这里插入图片描述"></p><ul><li>git-bash.exe：Unix与Linux风格的命令行，使用最多，推荐最多</li><li>git-cmd.exe：Windows风格的命令行</li></ul><h3 id="_2-3、常用的linux命令" tabindex="-1"><a class="header-anchor" href="#_2-3、常用的linux命令"><span>2.3、常用的Linux命令</span></a></h3><ul><li>cd : 改变目录</li><li>cd . . 回退到上一个目录，直接cd进入默认目录</li><li>pwd : 显示当前所在的目录路径</li><li>ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细</li><li>touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件</li><li>rm: 删除一个文件, rm index.js 就会把index.js文件删除。</li><li>mkdir: 新建一个目录,就是新建一个文件夹</li><li>rm -r : 删除一个文件夹, rm -r src 删除src目录 <strong>rm -rf / 切勿在Linux中尝试！删除电脑中全部文件</strong></li><li>mv 移动文件, mv index.html src， index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下</li><li>reset 重新初始化终端/清屏</li><li>clear 清屏</li><li>history 查看命令历史</li><li>help 帮助</li><li>exit 退出</li><li>#表示注释</li></ul><h3 id="_2-4、git配置" tabindex="-1"><a class="header-anchor" href="#_2-4、git配置"><span>2.4、Git配置</span></a></h3><p>查看Git配置：<code>git config -l</code></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/d6455ec83b73455a80cd929cceced1ab.png" alt="在这里插入图片描述"></p><p>查看不同级别的配置：</p><ul><li>查看系统配置：<code>git config --system --list</code></li><li>查看当前用户配置：<code>git config --global --list</code></li></ul><p>Git相关配置文件：</p><ul><li><p><code>E:\\Environment\\Git\\etc\\gitconfig</code> ：Git安装目录下，–system系统级</p></li><li><p><code>C:\\Users\\Administrator\\.gitconfig</code> ：C盘里面*（注意：如果刚安装从来没有配置过用户信息，这里没有.gitconfig文件）*只需要执行命令进行简单配置C盘对应目录下就会自动生成</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/9501e2a2a8b546b6b773eaf89c76a0e9.png" alt="在这里插入图片描述"></p><p>配置方式：</p><ul><li>可以通过命令行配置</li><li>可以直接打开.gitconfig文件进行编写</li></ul></li></ul><h2 id="_3、三个区域" tabindex="-1"><a class="header-anchor" href="#_3、三个区域"><span>3、三个区域</span></a></h2><p>Git本地有三个工作区域：</p><ul><li>工作目录（Working Directory）：Workspace（工作区），就是你平时存放项目代码的地方</li><li>暂存区(Stage/Index)：Index / Stage（暂存区），用于临时存放你的改动，事实上它只是一个文件，保存<strong>即将提交</strong>到文件列表信息</li><li>资源库(Repository或Git Directory)：Repository（仓库区或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据，<strong>其中HEAD指向最新放入仓库的版本。</strong></li></ul><p>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/0df36f3e743e4d4095b489593cee8f9c.png" alt="在这里插入图片描述"></p><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/b5087b91dc454f2abfbfb5c682898a4b.png" alt="在这里插入图片描述"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，<strong>初始化仓库的时候自动创建</strong>，<code> git init</code> 。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h2 id="_4、工作流程" tabindex="-1"><a class="header-anchor" href="#_4、工作流程"><span>4、工作流程</span></a></h2><ul><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库；</li></ul><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/ea2dff18062e42b8abfa0fc5d31deb96.png" alt="在这里插入图片描述"></p><h2 id="_5、git项目搭建" tabindex="-1"><a class="header-anchor" href="#_5、git项目搭建"><span>5、Git项目搭建</span></a></h2><ul><li><p>创建工作目录（常用命令）</p><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。记忆下图常用命令：</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/7f42a9f516a844c4aacda91a55869882.png" alt="在这里插入图片描述"></p></li><li><p>本地仓库搭建</p><ul><li><p>创建全新的仓库</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 创建全新的仓库，需要用GIT管理的项目的根目录执行：
# 在当前目录新建一个Git代码库
$ git init
123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>克隆远程仓库</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 克隆远程目录，是将远程服务器上的仓库完全镜像一份至本地！
# 克隆一个项目和它的整个代码历史(版本信息)
$ git clone [url]  # https://gitee.com/kuangstudy/openclass.git
123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_6、git文件操作" tabindex="-1"><a class="header-anchor" href="#_6、git文件操作"><span>6、Git文件操作</span></a></h2><h3 id="_6-1、文件的四种状态" tabindex="-1"><a class="header-anchor" href="#_6-1、文件的四种状态"><span>6.1、文件的四种状态</span></a></h3><blockquote><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p></blockquote><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. <strong>通过git add 状态变为Staged</strong></li><li>Staged: 暂存状态. 执行<code>git commit</code> 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行<code>git reset HEAD filename</code> 取消暂存, 文件状态为Modified</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有<strong>两种去处</strong>, 如果它被修改, 变为Modified. 如果它没有被修改，使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code> 可进入暂存staged状态, 使用<code>git checkout </code>则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li></ul><h3 id="_6-2、查看文件状态" tabindex="-1"><a class="header-anchor" href="#_6-2、查看文件状态"><span>6.2、查看文件状态</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#查看指定文件状态
git status [filename]
 
#查看所有文件状态
git status
 
#添加所有文件到暂存区
git add .

#提交暂存区中的内容到本地仓库 -m 提交信息
git commit -m &quot;消息内容&quot;
1234567891011
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3、忽略文件" tabindex="-1"><a class="header-anchor" href="#_6-3、忽略文件"><span>6.3、忽略文件</span></a></h3><blockquote><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p></blockquote><p>在主目录下建立&quot;.gitignore&quot;文件，此文件有如下规则：</p><ul><li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li><li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p></li><li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li><li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li><li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#为注释
*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！
!lib.txt     #但lib.txt除外
/temp        #仅忽略项目根目录下的所有文件,但不包括根目录下的temp文件夹
build/       #忽略build/目录下的所有文件
doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_7、idea集成git" tabindex="-1"><a class="header-anchor" href="#_7、idea集成git"><span>7、idea集成Git</span></a></h2><h3 id="_7-1、码云设置公钥" tabindex="-1"><a class="header-anchor" href="#_7-1、码云设置公钥"><span>7.1、码云设置公钥</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/aee4c95ab5f54c8aa302c63a76785b28.png" alt="在这里插入图片描述"></p><h3 id="_7-2、idea集成git" tabindex="-1"><a class="header-anchor" href="#_7-2、idea集成git"><span>7.2、idea集成Git</span></a></h3><blockquote><p>个人开发</p></blockquote><ul><li><p>克隆远程仓库（码云）文件到本地（<strong>采用SSH协议</strong>）</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/36a113686a70478faffbbf2c65749bd8.png" alt="在这里插入图片描述"></p></li><li><p>在指定Git的目录下（就是初始化仓库或者说是所有克隆文件所在的根目录）新建项目，把克隆的项目复制到该项目中</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/99ff117d7eee44ee90b8c799adc2f3bd.png" alt="在这里插入图片描述"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/d049fc01f45045edae654888dd0368cb.png" alt="在这里插入图片描述"></p></li><li><p>第一次修改提交</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/f8d13211669e499595c37fd90eb0f8dd.png" alt="在这里插入图片描述"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/0e4327198b1d419d8b805590b3f54350.png" alt="在这里插入图片描述"></p><blockquote><p>多人协作</p></blockquote><ul><li>Git分支，参考官网教程+工作或学习上的频繁使用来掌握</li></ul></li></ul>`,42);function f(x,k){const t=s("ExternalLinkIcon");return d(),c("div",null,[o,i("ul",null,[p,i("li",null,[i("p",null,[l("集中版本控制（"),i("a",g,[l("SVN"),n(t)]),l("）联网")]),h]),u]),m,i("ul",null,[i("li",null,[l("Git官网："),i("a",b,[l("Git (git-scm.com)"),n(t)])]),_]),v])}const G=a(r,[["render",f],["__file","Git学习笔记.html.vue"]]),y=JSON.parse('{"path":"/view/note/Git/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html","title":"Git基础教程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1、版本控制","slug":"_1、版本控制","link":"#_1、版本控制","children":[{"level":3,"title":"1.1、什么是版本控制","slug":"_1-1、什么是版本控制","link":"#_1-1、什么是版本控制","children":[]},{"level":3,"title":"1.2、常见的版本控制工具","slug":"_1-2、常见的版本控制工具","link":"#_1-2、常见的版本控制工具","children":[]},{"level":3,"title":"1.3、版本控制分类（采用的思想不同）","slug":"_1-3、版本控制分类-采用的思想不同","link":"#_1-3、版本控制分类-采用的思想不同","children":[]},{"level":3,"title":"1.4、SVN和Git的区别","slug":"_1-4、svn和git的区别","link":"#_1-4、svn和git的区别","children":[]}]},{"level":2,"title":"2、Git","slug":"_2、git","link":"#_2、git","children":[{"level":3,"title":"2.1、软件下载","slug":"_2-1、软件下载","link":"#_2-1、软件下载","children":[]},{"level":3,"title":"2.2、安装和启动","slug":"_2-2、安装和启动","link":"#_2-2、安装和启动","children":[]},{"level":3,"title":"2.3、常用的Linux命令","slug":"_2-3、常用的linux命令","link":"#_2-3、常用的linux命令","children":[]},{"level":3,"title":"2.4、Git配置","slug":"_2-4、git配置","link":"#_2-4、git配置","children":[]}]},{"level":2,"title":"3、三个区域","slug":"_3、三个区域","link":"#_3、三个区域","children":[]},{"level":2,"title":"4、工作流程","slug":"_4、工作流程","link":"#_4、工作流程","children":[]},{"level":2,"title":"5、Git项目搭建","slug":"_5、git项目搭建","link":"#_5、git项目搭建","children":[]},{"level":2,"title":"6、Git文件操作","slug":"_6、git文件操作","link":"#_6、git文件操作","children":[{"level":3,"title":"6.1、文件的四种状态","slug":"_6-1、文件的四种状态","link":"#_6-1、文件的四种状态","children":[]},{"level":3,"title":"6.2、查看文件状态","slug":"_6-2、查看文件状态","link":"#_6-2、查看文件状态","children":[]},{"level":3,"title":"6.3、忽略文件","slug":"_6-3、忽略文件","link":"#_6-3、忽略文件","children":[]}]},{"level":2,"title":"7、idea集成Git","slug":"_7、idea集成git","link":"#_7、idea集成git","children":[{"level":3,"title":"7.1、码云设置公钥","slug":"_7-1、码云设置公钥","link":"#_7-1、码云设置公钥","children":[]},{"level":3,"title":"7.2、idea集成Git","slug":"_7-2、idea集成git","link":"#_7-2、idea集成git","children":[]}]}],"git":{"updatedTime":1709311174000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"view/note/Git/Git学习笔记.md","excerpt":"\\n<h2>1、版本控制</h2>\\n<h3>1.1、什么是版本控制</h3>\\n<p>版本控制：就是在开发过程中用于<strong>管理</strong>对文件、目录或工程等内容的修改历史，简单来说它是一种管理多人协同开发项目的<strong>技术</strong>。</p>\\n<p>优势：</p>\\n<ul>\\n<li>方便查看更改历史记录，恢复和备份以前的版本</li>\\n<li>组织和保护我们的源代码和文档</li>\\n<li>统计工作量</li>\\n<li>并行开发，提高工作效率</li>\\n<li>跟踪记录整个软件开发过程</li>\\n<li>减轻开发人员的负担，节省时间</li>\\n</ul>\\n<p>没有采用版本控制技术进行软件开发可能存在的问题：</p>"}');export{G as comp,y as data};
