import{_ as e,o as a,c as p,e as c}from"./app-BNFsDCu6.js";const n={},i=c(`<h1 id="内层call追局部变量" tabindex="-1"><a class="header-anchor" href="#内层call追局部变量"><span>内层CALL追局部变量</span></a></h1><h2 id="查找数据" tabindex="-1"><a class="header-anchor" href="#查找数据"><span>查找数据</span></a></h2><blockquote><p>首先查找血量地址</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226203201185.png" alt="image-20240226203201185"></p><h2 id="追踪数据" tabindex="-1"><a class="header-anchor" href="#追踪数据"><span>追踪数据</span></a></h2><p>在OD里面dd血量地址，随后下硬件访问断点</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226203859746.png" alt="image-20240226203859746"></p><p>断下后得知此时的eax+0x8就是血量地址</p><p>eax来源来自于cmp代码的上面的call，进入call分析。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226204124508.png" alt="image-20240226204124508"></p><blockquote><p>方法一</p></blockquote><p>此时可以直接调用eax来源call来对eax进行赋值，再进行表达式组装就可以得到血量的地址了。也就是将参数eax==[[00xF84B74]+0X40C push给来源call，但是这个方法过于简单。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mov ecx,0xF84B74
mov ecx,[ecx]
mov ecx,[ecx+0x40C]
push eax
add ecx,0x410
mov eax,0x00665870
call eax
mov 人物对象，eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DWORD Temp = *(DWORD*)(人物对象+0xC)</p><p>DWORD*(Temp + 0x8) == 人物血量</p><blockquote><p>方法二</p></blockquote><p>也就是该文章要讲的方法，直接进入eax来源call,寻找eax的赋值流程</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226205517703.png" alt=""></p><p>发现内部对eax赋值主要是来源于ebp-0x4这个局部变量，但是这层代码里没有找到ebp-0x4的来源，也就是上面的CALL 008A5500改变了ebp-0x4这个局部变量的值。</p><blockquote><p>方法一</p><p>进入CALL，观察ebp-0x4的值被哪条指令所改写，就追踪那个值的来源。</p></blockquote><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226235845919.png" alt="image-20240226235845919"></p><p>最后得到血量表达式为：</p><p>[[[[ecx+0x14]+0x34*8+0x4]+0xc]+0xc]+0x8</p><p>再向外层寻找ecx来源，可以得到ecx=[[0xF84B74]+0x410]</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240227000107726.png" alt="image-20240227000107726"></p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240227000146294.png" alt="image-20240227000146294"></p><p>最后得到 [[[[[0xF84B74]+0x410+0x14]+0x34*8+0x4]+0xc]+0xc]+0x8</p><blockquote><p>方法二</p><p>内层CALL中往往传递了外层CALL局部变量的指针，我们可以看到参数中edx是ebp-0x8，所以edx+4就是ebp-0x4，也就意味着我们进入CALL后，只需要寻找第一个参数+4就是指向该局部变量的指针了。</p></blockquote><p>而进入内层CALL后，第一个参数也就是ebp+0x8**（这里涉及到堆栈知识，要动脑子思考一下）**</p><p>标注出所有ebp+0x8，寻找ebp+0x8来源</p><p>然后再往下寻找[ebp+0x8]+0x4就可以找到局部变量所在了，最后发现就是上面的ecx</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240227000941134.png" alt="image-20240227000941134"></p><p>剩下的操作是一样的，追踪ecx即可。</p>`,33),t=[i];function l(m,o){return a(),p("div",null,t)}const x=e(n,[["render",l],["__file","内层CALL追局部变量.html.vue"]]),g=JSON.parse('{"path":"/blog/%E5%86%85%E5%B1%82CALL%E8%BF%BD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.html","title":"内层CALL追局部变量","lang":"en-US","frontmatter":{"title":"内层CALL追局部变量","date":"2024-02-26T00:00:00.000Z","category":["History"],"tag":["逆向","windows","汇编"]},"headers":[{"level":2,"title":"查找数据","slug":"查找数据","link":"#查找数据","children":[]},{"level":2,"title":"追踪数据","slug":"追踪数据","link":"#追踪数据","children":[]}],"git":{"updatedTime":1709311174000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"blog/内层CALL追局部变量.md","excerpt":"\\n<h2>查找数据</h2>\\n<blockquote>\\n<p>首先查找血量地址</p>\\n</blockquote>\\n<p><img src=\\"https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226203201185.png\\" alt=\\"image-20240226203201185\\"></p>\\n<h2>追踪数据</h2>\\n<p>在OD里面dd血量地址，随后下硬件访问断点</p>\\n<p><img src=\\"https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20240226203859746.png\\" alt=\\"image-20240226203859746\\"></p>"}');export{x as comp,g as data};
