import{_ as n,o as s,c as a,e as t}from"./app-koVjN3rn.js";const p={},e=t(`<h1 id="最低成本的方式搭建chatgpt接口" tabindex="-1"><a class="header-anchor" href="#最低成本的方式搭建chatgpt接口"><span>最低成本的方式搭建ChatGpt接口</span></a></h1><blockquote><p>2023-11-02补充：如今国内的文心一言等AI模型已经公开并且盛行，已经可以在国内直接调用了，没必要像下文那样去使用chatgpt了，本文旨在提供调用外网正版chatgpt接口的思路。</p></blockquote><p>首先我们先要通过挂梯子(翻墙)访问到openai官网，然后拿到自己调用接口的key，此步直接省略。</p><p>假设你的key为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（请勿泄露给别人）</p><h2 id="初次试错" tabindex="-1"><a class="header-anchor" href="#初次试错"><span>初次试错</span></a></h2><p>接下来我们就要对需求进行分析，因为接口必须翻墙才可以访问，所以按照大家惯性思维去搭建这个后端接口的话，都是采用任一编程语言实现一段http接口操作，然后运行到服务器上后，并且给服务器挂上梯子，再通过前端对这个接口进行访问。</p><p>于是我便开始了这第一种方法的尝试，这里我使用的是Nodejs语言的Express实现了一个简易的后端接口进行测试。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义GET请求的路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/ask&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> question <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>question<span class="token punctuation">;</span>

    <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;method&#39;</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;url&#39;</span><span class="token operator">:</span> <span class="token string">&#39;https://api.openai.com/v1/chat/completions&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;headers&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;Authorization&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Bearer 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&#39;</span><span class="token punctuation">,</span><span class="token comment">//这里替换成自己的key</span>
            <span class="token string-property property">&#39;User-Agent&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Apifox/1.0.0 (https://www.apifox.cn)&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{
            &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,
            &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>question<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}]
        }</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动服务器</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server started on port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与此同时我将本机开启了全局翻墙，但我经过测试接口发现会引发超时错误。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">Error</span><span class="token operator">:</span> Error<span class="token operator">:</span> connect <span class="token constant">ETIMEDOUT</span> <span class="token number">104.23</span><span class="token number">.125</span><span class="token number">.189</span><span class="token operator">:</span><span class="token number">443</span>
    at Request<span class="token punctuation">.</span><span class="token function">_callback</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\Administrator\\Desktop\\gptinterface\\test<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">)</span>
    at self<span class="token punctuation">.</span><span class="token function">callback</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\Administrator\\Desktop\\gptinterface\\node_modules\\request\\request<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">185</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span>
    at Request<span class="token punctuation">.</span><span class="token function">emit</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>events<span class="token operator">:</span><span class="token number">513</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span>
    at Request<span class="token punctuation">.</span><span class="token function">onRequestError</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\Administrator\\Desktop\\gptinterface\\node_modules\\request\\request<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">877</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span>
    at ClientRequest<span class="token punctuation">.</span><span class="token function">emit</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>events<span class="token operator">:</span><span class="token number">513</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span>
    at TLSSocket<span class="token punctuation">.</span><span class="token function">socketErrorListener</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>_http_client<span class="token operator">:</span><span class="token number">502</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">)</span>
    at TLSSocket<span class="token punctuation">.</span><span class="token function">emit</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>events<span class="token operator">:</span><span class="token number">513</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span>
    at <span class="token function">emitErrorNT</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>streams<span class="token operator">/</span>destroy<span class="token operator">:</span><span class="token number">151</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span>
    at <span class="token function">emitErrorCloseNT</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>streams<span class="token operator">/</span>destroy<span class="token operator">:</span><span class="token number">116</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>
    at process<span class="token punctuation">.</span><span class="token function">processTicksAndRejections</span> <span class="token punctuation">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>process<span class="token operator">/</span>task_queues<span class="token operator">:</span><span class="token number">82</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是通过API工具调用接口进行尝试，一样引发了超时错误。</p><p>这里可以推测出原因，系统虽然实现了翻墙，但是代码并没有走系统代理，于是我便对API工具设置了系统代理。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503143835318.png" alt="image-20230503143835318"></p><p>然后再次访问测试，得到了我想要的结果。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503143959381.png" alt="image-20230503143959381"></p><p>知道了原因，那么我们还要想办法对代码实现系统代理，这里就比较复杂了，况且就算实现后，我们还要自备服务器和翻墙软件，然后将其跑在自己的服务器上，成本很高，并且要挂梯子，很复杂，所以我便直接放弃了这个方案。</p><h2 id="步入正轨" tabindex="-1"><a class="header-anchor" href="#步入正轨"><span>步入正轨</span></a></h2><p>下面给大家推荐一个终极解决方案</p><blockquote><p>使用云函数对openai接口进行访问</p></blockquote><p>知名云计算平台，例如阿里云、腾讯云、华为云，都有云函数的支持，我们只需要将云函数的地区设置到美国或者其他Openai支持的国家，就可以实现免翻墙直接访问接口。</p><p>这里要感谢云计算为我们个人开发者或者中小企业带来的便利。 接下来详细的介绍一下云函数的使用方法及代码编写，这里以<strong>腾讯云</strong>为例。</p><h3 id="_1-新建云函数" tabindex="-1"><a class="header-anchor" href="#_1-新建云函数"><span>1.新建云函数</span></a></h3><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503144910978.png" alt="image-20230503144910978"></p><p>选择从头开始，运行环境根据自己的编程语言来，这里以Nodejs为例。</p><p>函数代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">main_handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> question <span class="token operator">=</span> event<span class="token punctuation">.</span>queryString<span class="token punctuation">.</span>question<span class="token punctuation">;</span>
<span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>
			<span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;https://api.openai.com/v1/chat/completions&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
				<span class="token string-property property">&#39;Authorization&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Bearer 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&#39;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token string-property property">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gpt-3.5-turbo&quot;</span><span class="token punctuation">,</span>
				<span class="token string-property property">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> question<span class="token punctuation">}</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			answer <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>content
			<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，该云函数就实现了读取question参数并访问openai接口，然后返回chatgpt机器人回复内容的功能。</p><p>正常云函数是通过定时触发的，因为我们要通过http主动访问这个云函数，所以要创建一个API网关触发器而不是定时触发器。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503145445929.png" alt="image-20230503145445929"></p><p>还有最后一个异常重要的地方要进行设置，因为ChatGpt接口调用有时延，有的时候机器人需要数十秒才可以回应我们的请求，所以要设置超时长一点，这里设置成60s。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503152125364.png" alt="image-20230503152125364"></p><p>至此，所有环境配置完毕，点击完成即可。</p><h3 id="_2-安装依赖" tabindex="-1"><a class="header-anchor" href="#_2-安装依赖"><span>2.安装依赖</span></a></h3><p>刚刚只是编写了js代码，但是依赖库还没有安装，所以我们要先去安装函数依赖。只用到了request一个包，只需要安装这一个就可以了。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503145614838.png" alt="image-20230503145614838"></p><p>首先点击终端-新建终端</p><p>我们可以看到index.js在src目录里，所以步骤如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src
<span class="token function">npm</span> <span class="token function">install</span> request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503145833960.png" alt="image-20230503145833960"></p><p>执行完毕后就多出来了一堆依赖文件，至此我们的云函数就算是编写完毕了，点击部署按钮，即可上传云函数成功。</p><h3 id="_3-查看访问url" tabindex="-1"><a class="header-anchor" href="#_3-查看访问url"><span>3.查看访问url</span></a></h3><p>切换到触发管理界面，找到刚刚我们创建的API网关触发的访问路径，将其复制下来。</p><p>https://service-2ruclnmk-1304194722.usw.apigw.tencentcs.com/release/chatgpt</p><p>这里要去掉release才是真正的访问路径</p><p>https://service-2ruclnmk-1304194722.usw.apigw.tencentcs.com/chatgpt</p><p>我们再对question参数进行拼接</p><p>https://service-2ruclnmk-1304194722.usw.apigw.tencentcs.com/chatgpt?question=你好，我是帅哥</p><p>这里question便是我们自定义的问题了，通过get请求或者直接浏览器访问即可实现chatgpt接口的云函数调用。</p><p><img src="https://wqby-1304194722.cos.ap-nanjing.myqcloud.com/img/image-20230503150348750.png" alt="image-20230503150348750"></p><p>至此，我们的功能便彻底实现完成。</p><p>云函数首次使用应该会赠送免费的使用额度，使用完免费额度后，是按量付费的，成本很低，要记住往腾讯云里充值一些余额，以防欠费后无法调用。</p>`,51),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","最低成本的方式搭建ChatGpt接口.html.vue"]]),k=JSON.parse('{"path":"/blog/%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC%E7%9A%84%E6%96%B9%E5%BC%8F%E6%90%AD%E5%BB%BAChatGpt%E6%8E%A5%E5%8F%A3.html","title":"最低成本的方式搭建ChatGpt接口","lang":"en-US","frontmatter":{"title":"最低成本的方式搭建ChatGpt接口","date":"2023-05-03T00:00:00.000Z","category":["History"],"tag":["后端","nodejs","js"]},"headers":[{"level":2,"title":"初次试错","slug":"初次试错","link":"#初次试错","children":[]},{"level":2,"title":"步入正轨","slug":"步入正轨","link":"#步入正轨","children":[{"level":3,"title":"1.新建云函数","slug":"_1-新建云函数","link":"#_1-新建云函数","children":[]},{"level":3,"title":"2.安装依赖","slug":"_2-安装依赖","link":"#_2-安装依赖","children":[]},{"level":3,"title":"3.查看访问url","slug":"_3-查看访问url","link":"#_3-查看访问url","children":[]}]}],"git":{"updatedTime":1709311174000,"contributors":[{"name":"wqby","email":"9479421@qq.com","commits":1}]},"filePathRelative":"blog/最低成本的方式搭建ChatGpt接口.md","excerpt":"\\n<blockquote>\\n<p>2023-11-02补充：如今国内的文心一言等AI模型已经公开并且盛行，已经可以在国内直接调用了，没必要像下文那样去使用chatgpt了，本文旨在提供调用外网正版chatgpt接口的思路。</p>\\n</blockquote>\\n<p>首先我们先要通过挂梯子(翻墙)访问到openai官网，然后拿到自己调用接口的key，此步直接省略。</p>\\n<p>假设你的key为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（请勿泄露给别人）</p>\\n<h2>初次试错</h2>\\n<p>接下来我们就要对需求进行分析，因为接口必须翻墙才可以访问，所以按照大家惯性思维去搭建这个后端接口的话，都是采用任一编程语言实现一段http接口操作，然后运行到服务器上后，并且给服务器挂上梯子，再通过前端对这个接口进行访问。</p>"}');export{u as comp,k as data};
